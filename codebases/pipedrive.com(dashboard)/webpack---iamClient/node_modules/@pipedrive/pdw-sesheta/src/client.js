'use strict';

var Api = require('./api'),
	Configuration = require('./configuration'),
	Event = require('./event'),
	EventCollection = require('./eventcollection');

function Client(config) {
	config = new Configuration(config);

	this.api_ = new Api({
		id: config.id,
		key: config.key,
		host: config.host
	});

	this.batchSize_ = config.batchSize;
	this.bufferTime_ = config.bufferTime;

	this.events_ = new EventCollection();
	this.timeout_ = null;
	this.callbacks_ = [];

	this.stats_ = {
		rejected: 0,
		accepted: 0,
		buffered: 0,
		inflight: 0,
		uploaded: 0,
		dropped: 0,
		evicted: 0
	};

	var unloadListener = function() {
		this.doFlush_(true);
	}.bind(this);

	window.addEventListener('beforeunload', unloadListener);
	window.addEventListener('unload', unloadListener);
	document.addEventListener('visibilitychange', unloadListener);
}

Client.prototype.addEvent = function(event, callback) {
	callback = typeof callback === 'function' ? callback : function() {};

	try {
		event = new Event(event);
		event.callback_ = callback;
	} catch (e) {
		this.stats_.rejected++;

		return callback(e);
	}

	if (event.getSize() > this.batchSize_) {
		this.stats_.rejected++;

		return callback(new Error('Event too large (size=' + event.getSize() + ', max=' + this.batchSize_ + ')'));
	}

	this.stats_.accepted++;

	if (this.events_.getSizeWith(event) > this.batchSize_) {
		this.doFlush_();
	}

	this.events_.addEvent(event);
	this.stats_.buffered++;

	if (this.events_.getSize() === this.batchSize_) {
		this.doFlush_();
	} else if (this.timeout_ === null && this.bufferTime_ !== Infinity) {
		this.timeout_ = setTimeout(this.flush.bind(this), this.bufferTime_);
	}
};

Client.prototype.flush = function(callback) {
	if (typeof callback === 'function') {
		this.callbacks_.push(callback);
	}

	this.doFlush_(false);
};

Client.prototype.reset = function() {
	this.stats_.buffered -= this.events_.getCount();
	this.stats_.evicted += this.events_.getCount();

	this.events_.reset();
	clearTimeout(this.flushTimeout_);
	this.flushTimeout_ = null;
};

Client.prototype.getStats = function() {
	return JSON.parse(JSON.stringify(this.stats_));
};

Client.prototype.doFlush_ = function(asBeacon) {
	var self = this;

	clearTimeout(self.timeout_);
	self.timeout_ = null;

	var collection = self.events_.move();

	self.stats_.buffered -= collection.getCount();
	self.stats_.inflight += collection.getCount();

	if (collection.getCount() === 0) {
		return self.invokeCallbacks_();
	}

	self.api_.postEvents(collection, asBeacon, function(result) {
		self.stats_.inflight -= collection.getCount();

		if (result instanceof Error) {
			self.stats_.dropped += collection.getCount();
		} else {
			self.stats_.uploaded += collection.getCount();
		}

		collection.getEvents().forEach(function(event) {
			event.callback_(result);
		});

		self.invokeCallbacks_();
	});
};

Client.prototype.invokeCallbacks_ = function() {
	if (this.stats_.buffered + this.stats_.inflight > 0) {
		return;
	}

	this.callbacks_.splice(0).forEach(function(cb) {
		cb();
	});
};

module.exports = Client;
