(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (factory((global.fetch = {})));
}(this, (function (exports) { 'use strict';

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      var ownKeys = Object.keys(source);

      if (typeof Object.getOwnPropertySymbols === 'function') {
        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }

      ownKeys.forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    }

    return target;
  }

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};

    var target = _objectWithoutPropertiesLoose(source, excluded);

    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  function getCookieValue(name) {
    var value = "; ".concat(document.cookie);
    var parts = value.split("; ".concat(name, "="));

    if (!parts || parts.length !== 2) {
      return '';
    }

    return parts.pop().split(';').shift();
  }

  var errorMessages = {
    default: 'Request unsuccessful',
    invalidJSON: 'Did not receive JSON response',
    notAvailable: 'Fetch is not available',
    unauthorized: 'Unauthorized request'
  };

  function parseResponse(response, isErrorResponse) {
    return new Promise(function (resolve, reject) {
      response.json().then(function (parsedResponse) {
        if (isErrorResponse || !parsedResponse.success) {
          return reject(Object.assign({
            message: errorMessages.default
          }, parsedResponse));
        }

        return resolve(parsedResponse);
      }).catch(function (err) {
        var message = err.message.includes('invalid json response body') ? errorMessages.invalidJSON : errorMessages.default;
        return reject(new Error(message));
      });
    });
  }

  function fetch(url) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (!global.fetch) {
      throw new Error(errorMessages.notAvailable);
    }

    var _options$retryOptions = options.retryOptions,
        retryOptions = _options$retryOptions === void 0 ? {
      retries: 1,
      retryDelay: 250
    } : _options$retryOptions,
        _options$queryParams = options.queryParams,
        queryParams = _options$queryParams === void 0 ? {} : _options$queryParams,
        authCallback = options.authCallback,
        restOptions = _objectWithoutProperties(options, ["retryOptions", "queryParams", "authCallback"]);

    var queryWithDefaults = _objectSpread({
      session_token: getCookieValue('pipe-session-token'),
      strict_mode: true
    }, queryParams);

    var queryString = Object.keys(queryWithDefaults).map(function (key) {
      var value = queryWithDefaults[key];
      return "".concat(key, "=").concat(encodeURIComponent(value));
    }).join('&');
    url += "".concat(url.match(/\?/) ? '&' : '?').concat(queryString);

    var fetchOptions = _objectSpread({
      credentials: 'include'
    }, restOptions, {
      headers: _objectSpread({
        Accept: 'application/json',
        'Content-Type': 'application/json',
        'Cache-control': 'no-cache',
        Pragma: 'no-cache'
      }, restOptions.headers)
    });

    return new Promise(function (resolve, reject) {
      var retryFetch = function retryFetch() {
        var retriesLeft = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : retryOptions.retries - 1;
        return global.fetch(url, fetchOptions).then(function (response) {
          if (response.status === 401) {
            if (typeof authCallback === 'function') {
              authCallback(response);
            } else {
              window.location.assign('/auth/login');
            }

            return reject(new Error(errorMessages.unauthorized));
          }

          if (response.status < 200 || response.status >= 300) {
            return parseResponse(response, true);
          }

          return parseResponse(response);
        }).then(function (parsedResponse) {
          return resolve(parsedResponse);
        }).catch(function (err) {
          if (retriesLeft > 0) {
            setTimeout(function () {
              retryFetch(--retriesLeft);
            }, retryOptions.retryDelay);
          } else {
            if (err instanceof Error && retryOptions.retries > 1) {
              return reject(new Error("Request unsuccessful after ".concat(retryOptions.retries, " retries with error: ").concat(err.message)));
            }

            reject(err);
          }
        });
      };

      retryFetch();
    });
  }

  var getStringData = function getStringData(data) {
    return typeof data === 'string' ? data : JSON.stringify(data);
  };
  var get = function get(path, options) {
    return fetch(path, _objectSpread({
      method: 'GET'
    }, options));
  };
  var post = function post(path, data, options) {
    var stringData = getStringData(data);
    return fetch(path, _objectSpread({
      method: 'POST',
      body: stringData
    }, options));
  };
  var put = function put(path, data, options) {
    var stringData = getStringData(data);
    return fetch(path, _objectSpread({
      method: 'PUT',
      body: stringData
    }, options));
  };
  var patch = function patch(path, data, options) {
    var stringData = getStringData(data);
    return fetch(path, _objectSpread({
      method: 'PATCH',
      body: stringData
    }, options));
  };
  var remove = function remove(path, data, options) {
    var stringData = getStringData(data);
    return fetch(path, _objectSpread({
      method: 'DELETE',
      body: stringData
    }, options));
  };

  exports.default = fetch;
  exports.getCookieValue = getCookieValue;
  exports.get = get;
  exports.put = put;
  exports.patch = patch;
  exports.post = post;
  exports.remove = remove;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=index.umd.js.map
