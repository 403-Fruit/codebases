import React from 'react';
import { createFragmentContainer, graphql } from '@pipedrive/relay';

import { CustomField } from '../CustomField';
import { FormValue, isCompoundFieldFormValue } from '../../../types/types';
import { formatMonetary } from '../utils/utils';

import type { CustomFieldMonetary_data } from './__generated__/CustomFieldMonetary_data.graphql';
import type { CustomFieldMonetary_language } from './__generated__/CustomFieldMonetary_language.graphql';

type MoneyInput = {
	amount: string;
	currency: string;
};

type CustomFieldMonetaryInput = {
	id: string;
	value: MoneyInput | null;
};

type Props = {
	readonly data: CustomFieldMonetary_data;
	readonly language: CustomFieldMonetary_language | null;
	readonly onUpdate: (input: { CustomFieldMonetary: CustomFieldMonetaryInput }) => Promise<boolean>;
};

const CustomFieldMonetaryWithoutData: React.FC<Props> = ({ data, language, onUpdate }) => {
	function handleUpdate(rawFormFieldData: { [customFieldId: string]: FormValue }) {
		const [id, monetary] = Object.entries(rawFormFieldData)[0];
		let value;

		if (monetary === null) {
			value = null;
		} else {
			if (!isCompoundFieldFormValue(monetary)) {
				return Promise.resolve(false);
			}

			value = {
				amount: monetary.value,
				currency: monetary.label,
			};
		}

		return onUpdate({
			CustomFieldMonetary: {
				id,
				value,
			},
		});
	}

	const amount = data.moneyValue?.amount;
	const currency = data.moneyValue?.currency;

	let disabledValue = null;
	if (amount != null && currency != null) {
		disabledValue = formatMonetary(
			{
				value: Number(amount),
				// unused legacy parameters for BC (should be eventually removed):
				currency: currency.code,
			},
			{
				symbol: currency.symbol ?? '',
				// unused legacy parameters for BC (should be eventually removed):
				active_flag: true,
				code: currency.code,
				decimal_points: -1,
				id: -1,
				is_custom_flag: false,
				name: currency.name,
			},
			language?.languageTag,
		);
	}

	return (
		<CustomField
			icon="monetary"
			type="monetary"
			value={
				amount == null
					? undefined
					: {
							value: amount,
							label: currency?.code ?? '',
					  }
			}
			disabledValue={disabledValue}
			data={data}
			onUpdate={handleUpdate}
		/>
	);
};

export const CustomFieldMonetary = createFragmentContainer(CustomFieldMonetaryWithoutData, {
	data: graphql`
		fragment CustomFieldMonetary_data on CustomFieldMonetary {
			...CustomField_data
			moneyValue: value {
				amount
				currency {
					code
					name
					symbol
				}
			}
		}
	`,
	language: graphql`
		fragment CustomFieldMonetary_language on Language {
			languageTag
		}
	`,
});
