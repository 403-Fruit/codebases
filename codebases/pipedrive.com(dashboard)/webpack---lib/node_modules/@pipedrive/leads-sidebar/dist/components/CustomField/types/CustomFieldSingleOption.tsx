import React from 'react';
import { createFragmentContainer, graphql } from '@pipedrive/relay';

import { CustomField } from '../CustomField';
import type { FormValue } from '../../../types/types';

import type { CustomFieldSingleOption_data } from './__generated__/CustomFieldSingleOption_data.graphql';

type CustomFieldSingleOptionInput = {
	readonly id: string;
	readonly option: string | null;
};

type Props = {
	readonly data: CustomFieldSingleOption_data;
	readonly onUpdate: (input: { CustomFieldSingleOption: CustomFieldSingleOptionInput }) => Promise<boolean>;
};

const CustomFieldSingleOptionWithoutData: React.FC<Props> = ({ data, onUpdate }) => {
	const allAvailableOptions =
		data.availableOptions?.map((option, index) => ({
			id: index + 1, // ID _must_ be a number
			label: option.label ?? '',
			value: option.id,
		})) ?? [];

	function handleOnUpdate(formValues: { [fieldId: string]: FormValue }) {
		const [fieldID, optionIndex] = Object.entries(formValues)[0];
		const option = allAvailableOptions.find((option) => option.id === optionIndex);
		return onUpdate({
			CustomFieldSingleOption: {
				id: fieldID,
				option: option?.value ?? null,
			},
		});
	}

	const selectedOption = allAvailableOptions.find((option) => option.value === data.selectedOption?.id);

	return (
		<CustomField
			icon="singleoption"
			type="enum"
			value={selectedOption}
			disabledValue={selectedOption?.label ?? ''}
			data={data}
			onUpdate={handleOnUpdate}
			options={allAvailableOptions}
		/>
	);
};

export const CustomFieldSingleOption = createFragmentContainer(CustomFieldSingleOptionWithoutData, {
	data: graphql`
		fragment CustomFieldSingleOption_data on CustomFieldSingleOption {
			...CustomField_data
			selectedOption: option {
				id
				label
			}
			availableOptions {
				id
				label
			}
		}
	`,
});
