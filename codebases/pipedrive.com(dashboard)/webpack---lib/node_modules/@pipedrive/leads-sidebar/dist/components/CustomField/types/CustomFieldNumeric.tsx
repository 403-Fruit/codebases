import React, { useContext } from 'react';
import { createFragmentContainer, graphql } from '@pipedrive/relay';
import { FormFieldsContext } from '@pipedrive/form-fields';

import { CustomField } from '../CustomField';
import { FormValue } from '../../../types/types';

import type { CustomFieldNumeric_data } from './__generated__/CustomFieldNumeric_data.graphql';
import type { CustomFieldNumeric_language } from './__generated__/CustomFieldNumeric_language.graphql';

type CustomFieldNumericInput = {
	readonly id: string;
	readonly number: number | null;
};

type Props = {
	readonly data: CustomFieldNumeric_data;
	readonly language: CustomFieldNumeric_language | null;
	readonly onUpdate: (input: { CustomFieldNumeric: CustomFieldNumericInput }) => Promise<boolean>;
};

const CustomFieldNumericWithoutData: React.FC<Props> = ({ data, language, onUpdate }) => {
	const { formatter } = useContext(FormFieldsContext);

	const handleFieldUpdate = (formFieldData: { [customFieldId: string]: FormValue }) => {
		const [id, rawNumber] = Object.entries(formFieldData)[0];
		if (!formatter) {
			throw new Error('Could not save numeric value, because formatter was not defined.');
		}
		return onUpdate({
			CustomFieldNumeric: {
				id,
				number:
					rawNumber === '' || rawNumber == null
						? null // field reset
						: Number(formatter.unformat(String(rawNumber))),
			},
		});
	};

	return <CustomField icon="numerical" type="double" value={data.number} data={data} onUpdate={handleFieldUpdate} />;
};

export const CustomFieldNumeric = createFragmentContainer(CustomFieldNumericWithoutData, {
	data: graphql`
		fragment CustomFieldNumeric_data on CustomFieldNumeric {
			...CustomField_data
			number
		}
	`,
	language: graphql`
		fragment CustomFieldNumeric_language on Language {
			languageTag
		}
	`,
});
