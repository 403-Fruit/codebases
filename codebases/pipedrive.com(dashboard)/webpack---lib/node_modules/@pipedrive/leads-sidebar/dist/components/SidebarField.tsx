import { getFormValueIsEmpty } from '@pipedrive/form-fields';
import React, { useState } from 'react';

import { FormValue } from '../types/types';

import { DisabledField } from './DisabledField/DisabledField';
import { EditField, EditFieldProps } from './EditField';
import { SidebarFieldWrapper } from './SidebarFieldWrapper/SidebarFieldWrapper';
import { LinkedField } from './LinkedField';

type Props = {
	readonly icon: string;
	readonly value?: FormValue;
	readonly stringValue?: string;
	readonly label?: string;
	readonly isLinked?: boolean;
	readonly linkUrl?: string;
	readonly isDisabled?: boolean;
	readonly isDeleted: boolean;
	readonly single?: boolean;
	readonly ccEmail?: string;
} & Pick<
	EditFieldProps,
	'fieldType' | 'fieldKey' | 'placeholder' | 'onUpdate' | 'currencies' | 'placement' | 'settings'
>;

export const SidebarField: React.FC<Props> = (props) => {
	const {
		icon,
		label,
		stringValue,
		linkUrl,
		isLinked = false,
		isDisabled = false,
		value,
		fieldType,
		fieldKey,
		single,
		placement,
		ccEmail,
		...editProps
	} = props;

	const [isActive, setActive] = useState(false);

	if (isLinked) {
		return (
			<SidebarFieldWrapper isIconHighlight icon={icon} hasHover>
				<LinkedField
					text={value as string}
					pathUrl={linkUrl!}
					fieldKey={fieldKey}
					fieldType={fieldType}
					{...editProps}
				/>
			</SidebarFieldWrapper>
		);
	}

	if (isDisabled || props.isDeleted) {
		return stringValue ? (
			<SidebarFieldWrapper icon={icon} isDisabled hasValue>
				<DisabledField label={label || fieldKey} type={fieldKey} isDeleted={props.isDeleted}>
					{stringValue}
				</DisabledField>
			</SidebarFieldWrapper>
		) : null;
	}

	const valueIsEmpty = getFormValueIsEmpty(value);

	return (
		<SidebarFieldWrapper
			icon={icon}
			isActive={isActive}
			hasValue={!valueIsEmpty}
			dataTestId={`SidebarField-${fieldKey}`}
			fieldType={fieldType}
			placement={placement}
		>
			<EditField
				isActive={isActive}
				setActive={setActive}
				fieldType={fieldType}
				fieldKey={fieldKey}
				initValue={value}
				single={true}
				placement={placement}
				ccEmail={ccEmail}
				{...editProps}
			/>
		</SidebarFieldWrapper>
	);
};
