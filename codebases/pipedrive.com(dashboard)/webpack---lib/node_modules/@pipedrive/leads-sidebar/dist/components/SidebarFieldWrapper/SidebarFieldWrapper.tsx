import { Icon } from '@pipedrive/convention-ui-react';
import React, { useRef } from 'react';

import { EditFieldProps } from '../EditField';

import * as S from './SidebarFieldWrapper.styles';

type Props = {
	icon: string;
	isActive?: boolean;
	hasValue?: boolean;
	onClick?: () => void;
	isIconHighlight?: boolean;
	isDisabled?: boolean;
	hasHover?: boolean;
	dataTestId?: string;
} & Pick<EditFieldProps, 'fieldType' | 'placement'>;

export const SidebarFieldWrapper: React.FC<Props> = (props) => {
	const {
		onClick,
		isIconHighlight = false,
		isDisabled = false,
		isActive = false,
		icon,
		hasValue = false,
		hasHover = true,
		children,
		dataTestId,
		fieldType,
		placement,
	} = props;

	const fieldRef = useRef<HTMLDivElement>(null);

	const getIconColor = () => {
		if (isIconHighlight) {
			return 'blue';
		}
		if (isActive || hasValue) {
			return 'black';
		}
		return 'black-24';
	};

	const handleClick = (event: React.MouseEvent<Element>) => {
		const target = event.target as Element;
		if (target.tagName === 'A') {
			return '';
		}
		// This check is required, because this event can be triggered from the google maps modal
		if (fieldRef.current?.contains(target)) {
			onClick && onClick();
		}
	};

	return (
		<S.FieldWrapper
			ref={fieldRef}
			onClick={handleClick}
			isActive={isActive}
			isDisabled={isDisabled}
			hasHover={hasHover && !isActive}
			data-testid={dataTestId}
		>
			<S.IconWrapper isHighlight={isIconHighlight}>
				<Icon icon={icon} color={getIconColor()} />
			</S.IconWrapper>
			<S.ContentWrapper placement={placement} fieldType={fieldType}>
				{children}
			</S.ContentWrapper>
		</S.FieldWrapper>
	);
};
