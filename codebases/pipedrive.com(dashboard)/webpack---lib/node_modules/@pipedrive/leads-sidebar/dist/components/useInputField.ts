import React, { useEffect, useReducer } from 'react';

import { AddressGmaps, Email, FormValue, isCompoundFieldFormValue, Phone } from '../types/types';

// List of fields which needs some extra transformation
// the rest falls into `any` and skip any transformation
// eslint-disable-next-line @typescript-eslint/no-explicit-any
type FieldType = 'varchar' | 'address' | 'text' | 'email' | 'phone' | any;

// @pipedrive/form-field expect `any` as value
// eslint-disable-next-line @typescript-eslint/no-explicit-any
type InputValue = any;

type State = {
	defaultValue: InputValue;
	value: InputValue;
	error: string | undefined;
};

type Action =
	| { type: 'value'; value: FormValue }
	| { type: 'defaultValue'; defaultValue: FormValue; fieldType: FieldType }
	| { type: 'error'; error: string | undefined };

const transformAddress = (value?: AddressGmaps) => {
	return typeof value === 'string' ? value : value?.description;
};

const transformPhone = (value?: Phone | Email) => {
	if (typeof value === 'string') {
		return value;
	}

	if (value && isCompoundFieldFormValue(value)) {
		const newValue = { ...value, label: value.label.toLowerCase() };
		return newValue;
	}

	return value;
};

const transformEmail = transformPhone;

// eslint-disable-next-line @typescript-eslint/no-explicit-any
const transformDefault = (value?: any) => value;

const Transformers: Record<FieldType, (value?: InputValue) => InputValue> = {
	address: transformAddress,
	phone: transformPhone,
	email: transformEmail,
	varchar: transformDefault,
	text: transformDefault,
};

const getValue = (value: FormValue | undefined, fieldType: FieldType): InputValue => {
	const transformer = Transformers[fieldType] ?? transformDefault;
	return transformer(value);
};

export const useInputValue = (
	defaultValue: FormValue | undefined,
	fieldType: FieldType,
): [State, React.Dispatch<Action>] => {
	const [value, dispatch] = useReducer<(state: State, action: Action) => State>(
		(state, action) => {
			switch (action.type) {
				case 'value':
					return {
						...state,
						value: getValue(action.value, fieldType),
						error: undefined,
					};

				case 'error': {
					return { ...state, error: action.error };
				}

				case 'defaultValue':
					return {
						...state,
						value: getValue(action.defaultValue, action.fieldType),
						defaultValue: getValue(action.defaultValue, action.fieldType),
					};
				default:
					return state;
			}
		},
		{
			value: getValue(defaultValue, fieldType),
			defaultValue: getValue(defaultValue, fieldType),
			error: undefined,
		},
	);

	useEffect(() => {
		dispatch({ type: 'defaultValue', defaultValue, fieldType });
	}, [defaultValue, fieldType]);

	return [value, dispatch];
};
