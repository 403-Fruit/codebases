import React, { useContext } from 'react';
import { createFragmentContainer, graphql } from '@pipedrive/relay';

import { CustomField } from '../CustomField';
import { FormValue } from '../../../types/types';
import { EditableCustomFieldsContext } from '../EditableCustomFieldsContext';

import type { CustomFieldPhone_data } from './__generated__/CustomFieldPhone_data.graphql';

type CustomFieldPhoneInput = {
	id: string;
	phone?: string | null;
};

type Props = {
	readonly data: CustomFieldPhone_data;
	readonly onUpdate: (input: { CustomFieldPhone: CustomFieldPhoneInput }) => Promise<boolean>;
};

const CustomFieldPhoneWithoutData: React.FC<Props> = ({ data, onUpdate }) => {
	const { settings } = useContext(EditableCustomFieldsContext);

	function handleUpdate(rawFormFieldData: { [customFieldId: string]: FormValue }) {
		const [id, phone] = Object.entries(rawFormFieldData)[0];

		if (typeof phone !== 'string') {
			return Promise.resolve(false);
		}

		return onUpdate({
			CustomFieldPhone: {
				id,
				phone,
			},
		});
	}

	return (
		<CustomField
			icon="ac-call"
			type="phone"
			value={data.phone}
			data={data}
			onUpdate={handleUpdate}
			settings={settings}
		/>
	);
};

export const CustomFieldPhone = createFragmentContainer(CustomFieldPhoneWithoutData, {
	data: graphql`
		fragment CustomFieldPhone_data on CustomFieldPhone {
			...CustomField_data
			phone
		}
	`,
});
