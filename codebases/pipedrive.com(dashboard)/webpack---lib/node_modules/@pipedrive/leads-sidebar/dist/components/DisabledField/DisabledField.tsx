import { Icon, Tooltip } from '@pipedrive/convention-ui-react';
import { useTranslator } from '@pipedrive/react-utils';
import React from 'react';

import { FieldLabel } from '../FieldLabel';

import * as S from './DisabledField.styles';

// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
export const transformHrefUrl = (type: string, value?: string) => {
	switch (type) {
		case 'email':
			return `mailto:${value}`;
		case 'phone': {
			const phoneWithoutSpaces = value?.replace(/ /g, '');
			return `callto:${phoneWithoutSpaces}`;
		}
		default:
			return undefined;
	}
};

type Props = {
	readonly type: string;
	readonly label?: string | null;
	readonly isDeleted?: boolean;
};

/**
 * @deprecated We are allowing every field to be editable so this component should be eventually removed.
 */
export const DisabledField: React.FC<Props> = ({ children, label, type, isDeleted = false }) => {
	const translator = useTranslator();
	const href = transformHrefUrl(type, children?.toString());

	const FieldContent = React.createElement(
		href ? 'a' : 'span',
		{
			href,
			'data-testid': 'CustomFieldContent',
		},
		children,
	);

	const tooltipText = isDeleted
		? translator.gettext('This item canâ€™t be edited because it has been deleted')
		: translator.gettext('This custom field is read-only here, but you can edit it after conversion to a deal');

	return (
		<S.Wrapper>
			<S.Content>
				<div>
					{FieldContent}
					{label != null && <FieldLabel label={label} />}
				</div>
			</S.Content>
			<S.ButtonWrapper>
				<Tooltip placement={'left'} content={tooltipText} style={{ width: '200px' }}>
					<div>
						<S.Button size="s" disabled>
							<Icon icon="pencil" size="s" />
						</S.Button>
					</div>
				</Tooltip>
			</S.ButtonWrapper>
		</S.Wrapper>
	);
};
