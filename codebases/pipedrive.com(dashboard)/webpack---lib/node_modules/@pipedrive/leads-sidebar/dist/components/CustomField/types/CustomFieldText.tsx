import React from 'react';
import { createFragmentContainer, graphql } from '@pipedrive/relay';

import { CustomField } from '../CustomField';
import { FormValue } from '../../../types/types';

import type { CustomFieldText_data } from './__generated__/CustomFieldText_data.graphql';

type CustomFieldTextInput = {
	readonly id: string;
	readonly text: string | null;
};

type Props = {
	readonly data: CustomFieldText_data;
	readonly onUpdate: (input: { CustomFieldText: CustomFieldTextInput }) => Promise<boolean>;
};

const CustomFieldTextWithoutData: React.FC<Props> = ({ data, onUpdate }) => {
	function handleUpdate(rawFormFieldData: { [customFieldId: string]: FormValue }) {
		const [id, text] = Object.entries(rawFormFieldData)[0];

		if (typeof text !== 'string') {
			return Promise.resolve(false);
		}

		return onUpdate({
			CustomFieldText: {
				id,
				text,
			},
		});
	}

	return <CustomField icon="text" type="varchar" value={data.text} data={data} onUpdate={handleUpdate} />;
};

export const CustomFieldText = createFragmentContainer(CustomFieldTextWithoutData, {
	data: graphql`
		fragment CustomFieldText_data on CustomFieldText {
			...CustomField_data
			text
		}
	`,
});
