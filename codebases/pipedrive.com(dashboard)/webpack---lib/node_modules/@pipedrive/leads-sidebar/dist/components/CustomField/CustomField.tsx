import React, { useContext, useState } from 'react';
import { createFragmentContainer, graphql } from '@pipedrive/relay';

import { SidebarFieldWrapper } from '../SidebarFieldWrapper/SidebarFieldWrapper';
import { DisabledField } from '../DisabledField/DisabledField';
import { EditField, EditFieldProps } from '../EditField';
import { FormFieldOption, FormValue, Settings } from '../../types/types';

import { EditableCustomFieldsContext } from './EditableCustomFieldsContext';
import { CustomField_data } from './__generated__/CustomField_data.graphql';

interface Props {
	readonly icon: string;
	readonly type: string;
	readonly value: FormValue | null; // the custom field can be empty (nullable)
	readonly disabledValue?: React.ReactNode;
	readonly data: CustomField_data;
	readonly isDisabled?: boolean;
	readonly onUpdate: (fieldValue: { [key: string]: FormValue }) => Promise<boolean>;
	readonly options?: FormFieldOption[];
	readonly settings?: Settings;
}

const CustomFieldWithoutData: React.FC<Props> = (props) => {
	const { currencies, enableEditableCustomFields, isDeleted } = useContext(EditableCustomFieldsContext);

	const [isActive, setActive] = useState(false);
	const isDisabled = !enableEditableCustomFields || props.isDisabled || isDeleted;

	return (
		<SidebarFieldWrapper icon={props.icon} isActive={isActive} isDisabled={isDisabled} hasValue={true}>
			{isDisabled ? (
				<DisabledField type={props.type} label={props.data.name} isDeleted={isDeleted}>
					{props.disabledValue === undefined ? props.value : props.disabledValue}
				</DisabledField>
			) : (
				<EditField
					currencies={currencies}
					fieldKey={props.data.id}
					fieldType={props.type as EditFieldProps['fieldType']}
					initValue={props.value}
					isActive={isActive}
					onUpdate={props.onUpdate}
					placeholder={props.data.name ?? ''}
					setActive={setActive}
					options={props.options}
					settings={props.settings}
				/>
			)}
		</SidebarFieldWrapper>
	);
};

export const CustomField = createFragmentContainer(CustomFieldWithoutData, {
	data: graphql`
		fragment CustomField_data on CustomField {
			id
			name
		}
	`,
});
