/* eslint-disable complexity */
import React from 'react';
import { commitMutation, createFragmentContainer, graphql, useRelayEnvironment } from '@pipedrive/relay';
import { warning } from '@adeira/js';

import { CustomFieldAddress } from './types/CustomFieldAddress';
import { CustomFieldAutocomplete } from './types/CustomFieldAutocomplete';
import { CustomFieldDate } from './types/CustomFieldDate';
import { CustomFieldDateRange } from './types/CustomFieldDateRange';
import { CustomFieldLargeText } from './types/CustomFieldLargeText';
import { CustomFieldMonetary } from './types/CustomFieldMonetary';
import { CustomFieldMultipleOptions } from './types/CustomFieldMultipleOptions';
import { CustomFieldNumeric } from './types/CustomFieldNumeric';
import { CustomFieldPhone } from './types/CustomFieldPhone';
import { CustomFieldSingleOption } from './types/CustomFieldSingleOption';
import { CustomFieldText } from './types/CustomFieldText';
import { CustomFieldTime } from './types/CustomFieldTime';
import { CustomFieldTimeRange } from './types/CustomFieldTimeRange';
import { CustomFieldOrganization } from './types/CustomFieldOrganization';
import { CustomFieldPerson } from './types/CustomFieldPerson';
import type { CustomFieldRenderer_language } from './__generated__/CustomFieldRenderer_language.graphql';
import type { CustomFieldRenderer_customField } from './__generated__/CustomFieldRenderer_customField.graphql';
import type { CustomFieldRenderer_customFieldInfo } from './__generated__/CustomFieldRenderer_customFieldInfo.graphql';
import type {
	CustomFieldInput,
	CustomFieldRendererMutation,
} from './__generated__/CustomFieldRendererMutation.graphql';

interface Props {
	readonly language: CustomFieldRenderer_language | null;
	readonly customField: CustomFieldRenderer_customField | null;
	readonly customFieldInfo: CustomFieldRenderer_customFieldInfo | null;
	readonly showCustomField: boolean;
	readonly enableEditableCustomFields?: boolean;
	readonly onUpdate?: () => void;
}

/**
 * This component is responsible for rendering any custom field type. Eventually, this should be
 * replaced with Relay 3D loading.
 */
const CustomFieldRendererWithoutData: React.FC<Props> = (props) => {
	const environment = useRelayEnvironment();
	const { customField, customFieldInfo } = props;

	if (customField === null || customFieldInfo === null) {
		return null;
	}

	// Fields should be visible when:
	// 1) server returned they should be always visible, OR
	// 2) prop `showCustomField` is set
	const isVisible = props.showCustomField || customFieldInfo.isVisible;
	if (isVisible === false) {
		return null;
	}

	if (props.customFieldInfo?.valueHash == null && props.enableEditableCustomFields === false) {
		// We do not display custom fields if they are empty AND the editation of custom fields
		// is not enabled. This will never happen in Leads Inbox since the edits should be always
		// allowed there but it could happen in Live Chat for example where editable custom fields
		// are NOT supported (on GraphQL). Here is how it should behave:
		//
		//
		// Leads Inbox FE:
		//
		// Supported custom fields with value - visible, editable
		// Supported custom fields without value - visible (based on the settings), editable
		// Not supported custom fields with value - visible, read only
		// Not supported custom fields without value - hidden
		//
		//
		// Everywhere else:
		//
		// Supported custom fields with value - visible, read only
		// Supported custom fields without value - hidden
		// Not supported custom fields with value - visible, read only
		// Not supported custom fields without value - hidden
		return null;
	}

	function handleUpdate(customFieldInput: CustomFieldInput): Promise<boolean> {
		return new Promise((resolve) => {
			commitMutation<CustomFieldRendererMutation>(environment, {
				mutation: graphql`
					mutation CustomFieldRendererMutation($customFieldInput: CustomFieldInput!) {
						updateCustomFieldValue(input: $customFieldInput) {
							... on Error {
								# We should be able fetch only the aliased typename, see: https://github.com/facebook/relay/issues/3179
								# __isError: __typename
								__isErrorFIXME: message
							}
							...CustomFieldRenderer_customField
							...CustomFieldRenderer_customFieldInfo
						}
					}
				`,
				variables: { customFieldInput },
				onCompleted: async (response) => {
					const isSuccess = response.updateCustomFieldValue?.__isErrorFIXME == null;
					if (isSuccess) {
						props.onUpdate?.();
						return resolve(true);
					}
					return resolve(false);
				},
			});
		});
	}

	const typename = customField.__typename;
	if (customField.__typename === 'CustomFieldAddress') {
		return <CustomFieldAddress key={typename} data={customField} />;
	} else if (customField.__typename === 'CustomFieldAutocomplete') {
		return <CustomFieldAutocomplete key={typename} data={customField} />;
	} else if (customField.__typename === 'CustomFieldDate') {
		return <CustomFieldDate key={typename} data={customField} onUpdate={handleUpdate} />;
	} else if (customField.__typename === 'CustomFieldDateRange') {
		return <CustomFieldDateRange key={typename} data={customField} />;
	} else if (customField.__typename === 'CustomFieldLargeText') {
		return <CustomFieldLargeText key={typename} data={customField} onUpdate={handleUpdate} />;
	} else if (customField.__typename === 'CustomFieldMonetary') {
		return (
			<CustomFieldMonetary key={typename} data={customField} language={props.language} onUpdate={handleUpdate} />
		);
	} else if (customField.__typename === 'CustomFieldMultipleOptions') {
		return <CustomFieldMultipleOptions key={typename} data={customField} onUpdate={handleUpdate} />;
	} else if (customField.__typename === 'CustomFieldNumeric') {
		return (
			<CustomFieldNumeric key={typename} data={customField} language={props.language} onUpdate={handleUpdate} />
		);
	} else if (customField.__typename === 'CustomFieldPhone') {
		return <CustomFieldPhone key={typename} data={customField} onUpdate={handleUpdate} />;
	} else if (customField.__typename === 'CustomFieldSingleOption') {
		return <CustomFieldSingleOption key={typename} data={customField} onUpdate={handleUpdate} />;
	} else if (customField.__typename === 'CustomFieldText') {
		return <CustomFieldText key={typename} data={customField} onUpdate={handleUpdate} />;
	} else if (customField.__typename === 'CustomFieldTime') {
		return <CustomFieldTime key={typename} data={customField} />;
	} else if (customField.__typename === 'CustomFieldTimeRange') {
		return <CustomFieldTimeRange key={typename} data={customField} />;
	} else if (customField.__typename === 'CustomFieldOrganization') {
		return <CustomFieldOrganization key={typename} data={customField} />;
	} else if (customField.__typename === 'CustomFieldPerson') {
		return <CustomFieldPerson key={typename} data={customField} />;
	} else {
		warning(false, 'Custom field type without implementation: %s', typename);
		return null;
	}
};

export const CustomFieldRenderer = createFragmentContainer(CustomFieldRendererWithoutData, {
	customFieldInfo: graphql`
		fragment CustomFieldRenderer_customFieldInfo on CustomField {
			isVisible
			valueHash
		}
	`,
	customField: graphql`
		fragment CustomFieldRenderer_customField on CustomField {
			__typename
			... on CustomFieldAutocomplete {
				...CustomFieldAutocomplete_data
			}
			... on CustomFieldDate {
				...CustomFieldDate_data
			}
			... on CustomFieldDateRange {
				...CustomFieldDateRange_data
			}
			... on CustomFieldLargeText {
				...CustomFieldLargeText_data
			}
			... on CustomFieldMonetary {
				...CustomFieldMonetary_data
			}
			... on CustomFieldMultipleOptions {
				...CustomFieldMultipleOptions_data
			}
			... on CustomFieldNumeric {
				...CustomFieldNumeric_data
			}
			... on CustomFieldPhone {
				...CustomFieldPhone_data
			}
			... on CustomFieldSingleOption {
				...CustomFieldSingleOption_data
			}
			... on CustomFieldText {
				...CustomFieldText_data
			}
			... on CustomFieldTime {
				...CustomFieldTime_data
			}
			... on CustomFieldTimeRange {
				...CustomFieldTimeRange_data
			}
			... on CustomFieldAddress {
				...CustomFieldAddress_data
			}
			... on CustomFieldOrganization {
				...CustomFieldOrganization_data
			}
			... on CustomFieldPerson {
				...CustomFieldPerson_data
			}
		}
	`,
	language: graphql`
		fragment CustomFieldRenderer_language on Language {
			...CustomFieldMonetary_language
			...CustomFieldNumeric_language
		}
	`,
});
