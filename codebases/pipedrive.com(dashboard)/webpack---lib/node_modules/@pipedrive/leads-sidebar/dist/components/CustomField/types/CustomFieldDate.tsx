import React from 'react';
import { createFragmentContainer, graphql } from '@pipedrive/relay';

import { CustomField } from '../CustomField';
import { formatGraphQLDate } from '../format/formatGraphQLDate';
import { FormValue } from '../../../types/types';

import type { CustomFieldDate_data } from './__generated__/CustomFieldDate_data.graphql';

type CustomFieldDateInput = {
	id: string;
	date: string | null;
};

type Props = {
	readonly data: CustomFieldDate_data;
	readonly onUpdate: (input: { CustomFieldDate: CustomFieldDateInput }) => Promise<boolean>;
};

const CustomFieldDateWithoutData: React.FC<Props> = ({ data, onUpdate }) => {
	function handleUpdate(rawFormFieldData: { [customFieldId: string]: FormValue }) {
		const [id, date] = Object.entries(rawFormFieldData)[0];

		if (typeof date !== 'string') {
			return Promise.resolve(false);
		}

		return onUpdate({
			CustomFieldDate: {
				id,
				date:
					date === '' || date == null
						? null // field reset
						: date,
			},
		});
	}

	return (
		<CustomField
			icon="calendar"
			type="date"
			value={data.date}
			disabledValue={formatGraphQLDate(data.date)}
			data={data}
			onUpdate={handleUpdate}
		/>
	);
};

export const CustomFieldDate = createFragmentContainer(CustomFieldDateWithoutData, {
	data: graphql`
		fragment CustomFieldDate_data on CustomFieldDate {
			...CustomField_data
			date
		}
	`,
});
