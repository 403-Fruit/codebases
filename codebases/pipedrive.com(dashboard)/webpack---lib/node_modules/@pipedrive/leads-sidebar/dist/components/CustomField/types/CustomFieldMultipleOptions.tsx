import React from 'react';
import { createFragmentContainer, graphql } from '@pipedrive/relay';

import { CustomField } from '../CustomField';
import { DisabledMultipleOptionsField } from '../../DisabledField/DisabledMultipleOptionsField';
import type { FormValue } from '../../../types/types';

import type { CustomFieldMultipleOptions_data } from './__generated__/CustomFieldMultipleOptions_data.graphql';

export type CustomFieldMultipleOptionsInput = {
	readonly id: string;
	readonly options: Array<string> | null;
};

type Props = {
	readonly data: CustomFieldMultipleOptions_data;
	readonly onUpdate: (input: { CustomFieldMultipleOptions: CustomFieldMultipleOptionsInput }) => Promise<boolean>;
};

const CustomFieldMultipleOptionsWithoutData: React.FC<Props> = ({ data, onUpdate }) => {
	function handleOnUpdate(formValues: { [fieldId: string]: FormValue }) {
		const [fieldID, options] = Object.entries(formValues)[0];
		if (!Array.isArray(options)) {
			return Promise.resolve(false);
		}
		return onUpdate({
			CustomFieldMultipleOptions: {
				id: fieldID,
				// eslint-disable-next-line @typescript-eslint/ban-ts-comment
				// @ts-ignore
				options: options?.map((option) => option.id) ?? null,
			},
		});
	}

	const selectedOptions =
		data.selectedOptions?.map((option, i) => ({
			id: option.id,
			label: option.label ?? '',
			value: '',
		})) ?? [];

	const allAvailableOptions = data.availableOptions?.map((option, i) => ({
		id: option.id,
		label: option.label ?? '',
		value: '',
	}));

	return (
		<CustomField
			icon="ac-checkbox"
			type="set"
			value={selectedOptions}
			disabledValue={<DisabledMultipleOptionsField options={selectedOptions} />}
			data={data}
			options={allAvailableOptions}
			onUpdate={handleOnUpdate}
		/>
	);
};

export const CustomFieldMultipleOptions = createFragmentContainer(CustomFieldMultipleOptionsWithoutData, {
	data: graphql`
		fragment CustomFieldMultipleOptions_data on CustomFieldMultipleOptions {
			...CustomField_data
			selectedOptions: options {
				id
				label
			}
			availableOptions {
				id
				label
			}
		}
	`,
});
