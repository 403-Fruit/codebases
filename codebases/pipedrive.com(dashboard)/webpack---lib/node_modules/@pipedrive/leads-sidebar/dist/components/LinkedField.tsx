import React from 'react';
import styled from 'styled-components';
import { WithEditButton } from '@pipedrive/form-fields';

import { DisabledField } from './DisabledField/DisabledField';
import { EditField, EditFieldProps } from './EditField';
import { LinkedFieldTitle } from './LinkedFieldTitle';

const LinkWrapper = styled.div`
	display: flex;
	align-items: center;
	justify-content: space-between;
	padding-right: 16px;
`;

type Props = {
	readonly text: string;
	readonly pathUrl: string;
	readonly fieldKey: string;
	readonly isDeleted: boolean;
} & Pick<EditFieldProps, 'fieldType' | 'fieldKey' | 'placeholder' | 'onUpdate' | 'currencies' | 'settings'>;

export const LinkedField: React.FC<Props> = (props) => {
	const { text, fieldKey, isDeleted, ...editProps } = props;

	const [isEditFieldNameActive, setIsEditFieldNameActive] = React.useState(false);
	const toggleEdit = () => setIsEditFieldNameActive(!isEditFieldNameActive);

	if (isEditFieldNameActive) {
		return (
			<EditField
				fieldKey={fieldKey}
				isLinked={true}
				initValue={text}
				isActive={isEditFieldNameActive}
				setActive={() => () => true}
				onCancelClick={() => setIsEditFieldNameActive(false)}
				onSaveClick={() => setIsEditFieldNameActive(false)}
				{...editProps}
			/>
		);
	}

	if (isDeleted) {
		return (
			<DisabledField label={fieldKey} type={fieldKey} isDeleted={isDeleted}>
				{text}
			</DisabledField>
		);
	}

	return (
		<WithEditButton onClick={toggleEdit}>
			<LinkWrapper>
				<LinkedFieldTitle title={text} pathUrl={props.pathUrl} isDeleted={props.isDeleted} />
			</LinkWrapper>
		</WithEditButton>
	);
};
