import sanitizeHtml from '@pipedrive/sanitize-html';
import { LinkHandlerPlugin, ReactPdWysiwyg } from '@pipedrive/pd-wysiwyg';
import React, { useRef } from 'react';
import { colors, fonts } from '@pipedrive/convention-ui-css/dist/js/variables';
import styled from 'styled-components';

import { Toolbar } from './Toolbar';
import { ActionButtons } from './ActionButtons';
import * as S from './NoteEditor.styles';

type Props = {
	readonly content: string | null;
	readonly errorMessage: string | null;
	readonly autoFocus: boolean;
	readonly isLoading: boolean;
	readonly onSave: (sanitizedNote: string) => void;
	readonly onCancel?: () => void;
	readonly displayBorder?: boolean;
	readonly setShowWysiwyg?: (showWysiwyg: boolean) => void;
};

const FieldError = styled.div`
	font-size: ${fonts.fontSizeS};
	color: ${colors.red};
	position: absolute;
`;

export const NoteEditor: React.FC<Props> = ({
	content,
	errorMessage,
	autoFocus,
	onSave,
	isLoading,
	onCancel,
	displayBorder,
	setShowWysiwyg,
}) => {
	const wysiwygRef = useRef<ReactPdWysiwyg>(null);

	const handleSave = async () => {
		const sanitizedNote = sanitizeHtml(wysiwygRef.current?.getParsedContent?.().trim() ?? '', {
			loose: true,
		});
		await onSave(sanitizedNote);
		setShowWysiwyg?.(false);
	};

	const onCancelClick = () => {
		onCancel?.();
		setShowWysiwyg?.(false);
	};

	const hasErrorMessage = errorMessage !== null;

	return (
		<>
			<S.Wrapper error={hasErrorMessage} displayBorder={displayBorder}>
				<S.Wysiwyg
					autoFocus={autoFocus}
					content={content ?? ''}
					minHeight={0}
					ref={wysiwygRef}
					tabIndex={0}
					plugins={[LinkHandlerPlugin]}
					toolbar={
						<Toolbar>
							<ActionButtons isLoading={isLoading} onCancel={onCancelClick} onSave={handleSave} />
						</Toolbar>
					}
					data-testid="NoteEditorContentArea"
				/>
			</S.Wrapper>
			{hasErrorMessage && <FieldError>{errorMessage}</FieldError>}
		</>
	);
};
