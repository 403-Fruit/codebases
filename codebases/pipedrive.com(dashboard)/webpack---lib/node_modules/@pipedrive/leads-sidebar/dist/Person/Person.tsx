import React from 'react';
import { useTranslator } from '@pipedrive/react-utils';
import { createFragmentContainer, graphql } from '@pipedrive/relay';

import { SidebarField } from '../components/SidebarField';
import { CustomFieldRenderer } from '../components/CustomField/CustomFieldRenderer';
import type { CompoundField, Currency } from '../types/types';
import { EditableCustomFieldsContextProvider } from '../components/CustomField/EditableCustomFieldsContext';

import type { Person_me } from './__generated__/Person_me.graphql';
import type { Person_person } from './__generated__/Person_person.graphql';
import type { Person_organization } from './__generated__/Person_organization.graphql';
import type { Person_leadSmartBcc } from './__generated__/Person_leadSmartBcc.graphql';

type Props = {
	readonly person: Person_person | null;
	readonly organization: Person_organization | null;
	readonly currencies: Currency[];
	readonly me: Person_me | null;
	readonly leadSmartBcc: Person_leadSmartBcc | null;
	readonly enableEditableCustomFields?: boolean;
	readonly showAllCustomFields: boolean;
	readonly onUpdate: (personInfo: PersonInfo) => Promise<boolean>;
	readonly onCustomFieldUpdate?: () => void;
};

export type PersonInfo = {
	phone?: CompoundField;
	email?: CompoundField[];
	personName?: string;
};

const PersonWithoutData: React.FC<Props> = (props) => {
	const { person, organization, currencies, me, leadSmartBcc, enableEditableCustomFields = false } = props;

	const translator = useTranslator();

	if (person === null) {
		return null;
	}

	const isLinked = person.isLinkedToLead;
	const isDeleted = person.isDeleted ?? false;

	// we don't officially support multiple emails or phones yet
	const firstEmail = person.emails?.[0];
	const firstPhone = person.phones?.[0];

	const handleOnUpdate = (personInfo: PersonInfo) => {
		return props.onUpdate(personInfo);
	};

	const editableCustomFields = enableEditableCustomFields && isLinked; // only linked person can have editable fields

	const settings = {
		person_id: parseInt(person.relatedPersonId, 10),
		...(organization?.relatedOrganizationId && {
			org_id: parseInt(organization.relatedOrganizationId, 10),
		}),
	};

	const getEmailValue = () => {
		if (firstEmail && firstEmail.email && firstEmail.label) {
			return {
				value: firstEmail.email,
				label: firstEmail.label,
			};
		}
	};

	const getPhoneValue = () => {
		if (firstPhone && firstPhone.phone && firstPhone.label) {
			return {
				value: firstPhone.phone,
				label: firstPhone.label,
			};
		}
	};

	return (
		<>
			<SidebarField
				icon="person"
				value={person.name}
				fieldKey="personName"
				placeholder={translator.gettext('Name')}
				onUpdate={handleOnUpdate}
				isLinked={isLinked}
				isDeleted={isDeleted}
				linkUrl={`/person/${person.relatedPersonId}`}
				currencies={currencies}
			/>

			<SidebarField
				icon="ac-email"
				value={getEmailValue()}
				stringValue={firstEmail?.email ?? ''}
				label={firstEmail?.label ?? ''}
				fieldType="email"
				fieldKey="email"
				placeholder={translator.gettext('Email')}
				onUpdate={handleOnUpdate}
				isDeleted={isDeleted}
				currencies={currencies}
				single={true}
				ccEmail={leadSmartBcc?.leadSpecificEmail ?? ''}
			/>

			<SidebarField
				icon="ac-call"
				value={getPhoneValue()}
				stringValue={firstPhone?.phone ?? ''}
				label={firstPhone?.label ?? ''}
				fieldType="phone"
				fieldKey="phone"
				placeholder={translator.gettext('Phone')}
				onUpdate={handleOnUpdate}
				isDeleted={isDeleted}
				currencies={currencies}
				single={true}
				settings={settings}
			/>

			<EditableCustomFieldsContextProvider
				currencies={currencies}
				enableEditableCustomFields={editableCustomFields}
				isDeleted={isDeleted}
				settings={settings}
			>
				{person.customFields?.map((customField) => (
					<CustomFieldRenderer
						key={customField?.id}
						language={me?.language ?? null}
						customField={customField}
						customFieldInfo={customField}
						showCustomField={props.showAllCustomFields}
						enableEditableCustomFields={editableCustomFields}
						onUpdate={props.onCustomFieldUpdate}
					/>
				))}
			</EditableCustomFieldsContextProvider>
		</>
	);
};

export const Person = createFragmentContainer(PersonWithoutData, {
	person: graphql`
		fragment Person_person on Person {
			relatedPersonId: id(opaque: false)
			isLinkedToLead
			isDeleted
			name
			emails(first: 1) {
				email
				label
			}
			phones(first: 1) {
				phone
				label
			}
			customFields {
				id
				...CustomFieldRenderer_customField
				...CustomFieldRenderer_customFieldInfo
			}
		}
	`,
	organization: graphql`
		fragment Person_organization on Organization {
			relatedOrganizationId: id(opaque: false)
		}
	`,
	me: graphql`
		fragment Person_me on User {
			language {
				...CustomFieldRenderer_language
			}
		}
	`,
	leadSmartBcc: graphql`
		fragment Person_leadSmartBcc on LeadSmartBcc {
			leadSpecificEmail
		}
	`,
});
