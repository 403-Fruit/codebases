import React from 'react';
import { useTranslator } from '@pipedrive/react-utils';
import { createFragmentContainer, graphql } from '@pipedrive/relay';

import { SidebarField } from '../components/SidebarField';
import { CustomFieldRenderer } from '../components/CustomField/CustomFieldRenderer';
import { Currency, PopoverPlacement } from '../types/types';
import { EditableCustomFieldsContextProvider } from '../components/CustomField/EditableCustomFieldsContext';

import type { Organization_me } from './__generated__/Organization_me.graphql';
import type { Organization_organization } from './__generated__/Organization_organization.graphql';
import type { Organization_person } from './__generated__/Organization_person.graphql';

interface Props {
	readonly organization: Organization_organization | null;
	readonly person: Organization_person | null;
	readonly currencies: Currency[];
	readonly me: Organization_me | null;
	readonly enableEditableCustomFields?: boolean;
	readonly showAllCustomFields: boolean;
	readonly onUpdate: (organizationInfo: OrganizationInfo) => Promise<boolean>;
	readonly onCustomFieldUpdate?: () => void;
	readonly popoverPlacement?: PopoverPlacement;
}

export type OrganizationInfo = {
	organizationName?: string;
	address?: string;
};

const OrganizationWithoutData: React.FC<Props> = (props) => {
	const { organization, person, currencies, me, enableEditableCustomFields = false, popoverPlacement } = props;

	const translator = useTranslator();

	if (organization === null) {
		return null;
	}

	const isLinked = organization.isLinkedToLead;
	const isDeleted = organization.isDeleted ?? false;

	const handleOnUpdate = (organizationInfo: OrganizationInfo) => {
		return props.onUpdate(organizationInfo);
	};

	const editableCustomFields = enableEditableCustomFields && isLinked; // only linked person can have editable fields

	const settings = {
		org_id: parseInt(organization.relatedOrganizationId, 10),
		...(person?.relatedPersonId && {
			person_id: parseInt(person.relatedPersonId, 10),
		}),
	};

	return (
		<>
			<SidebarField
				icon="organization"
				value={organization.name}
				fieldKey="organizationName"
				placeholder={translator.gettext('Name')}
				onUpdate={handleOnUpdate}
				isLinked={isLinked}
				isDeleted={isDeleted}
				linkUrl={`/organization/${organization.relatedOrganizationId}`}
				currencies={currencies}
			/>

			<SidebarField
				icon="address"
				value={organization.address ? { description: organization.address } : null}
				stringValue={organization.address ?? ''}
				fieldKey="address"
				fieldType="address"
				placeholder={translator.gettext('Address')}
				onUpdate={handleOnUpdate}
				isDeleted={isDeleted}
				currencies={currencies}
				placement={popoverPlacement}
			/>

			<EditableCustomFieldsContextProvider
				currencies={currencies}
				enableEditableCustomFields={editableCustomFields}
				isDeleted={isDeleted}
				settings={settings}
			>
				{organization.customFields?.map((customField) => (
					<CustomFieldRenderer
						customField={customField}
						customFieldInfo={customField}
						key={customField?.id}
						language={me?.language ?? null}
						showCustomField={props.showAllCustomFields}
						enableEditableCustomFields={editableCustomFields}
						onUpdate={props.onCustomFieldUpdate}
					/>
				))}
			</EditableCustomFieldsContextProvider>
		</>
	);
};

export const Organization = createFragmentContainer(OrganizationWithoutData, {
	organization: graphql`
		fragment Organization_organization on Organization {
			relatedOrganizationId: id(opaque: false)
			isLinkedToLead
			isDeleted
			name
			address
			customFields {
				id
				...CustomFieldRenderer_customField
				...CustomFieldRenderer_customFieldInfo
			}
		}
	`,
	person: graphql`
		fragment Organization_person on Person {
			relatedPersonId: id(opaque: false)
		}
	`,
	me: graphql`
		fragment Organization_me on User {
			language {
				...CustomFieldRenderer_language
			}
		}
	`,
});
