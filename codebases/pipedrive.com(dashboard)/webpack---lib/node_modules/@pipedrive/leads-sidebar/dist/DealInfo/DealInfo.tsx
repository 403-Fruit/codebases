import { useTranslator } from '@pipedrive/react-utils';
import React, { useContext } from 'react';
import { createFragmentContainer, graphql } from '@pipedrive/relay';
import { FormFieldsContext } from '@pipedrive/form-fields';

import { CustomFieldRenderer } from '../components/CustomField/CustomFieldRenderer';
import { SidebarField } from '../components/SidebarField';
import { Currency, FormValue, PopoverPlacement } from '../types/types';
import { EditableCustomFieldsContextProvider } from '../components/CustomField/EditableCustomFieldsContext';

import type { DealInfo_dealInfo } from './__generated__/DealInfo_dealInfo.graphql';
import type { DealInfo_organization } from './__generated__/DealInfo_organization.graphql';
import type { DealInfo_person } from './__generated__/DealInfo_person.graphql';
import type { DealInfo_me } from './__generated__/DealInfo_me.graphql';

interface Props {
	readonly onUpdate: (dealValue: DealValue) => Promise<boolean>;
	readonly onCustomFieldUpdate?: () => void;
	readonly dealInfo: DealInfo_dealInfo;
	readonly organization: DealInfo_organization | null;
	readonly person: DealInfo_person | null;
	readonly currencies: Currency[];
	readonly me: DealInfo_me | null;
	readonly enableEditableCustomFields?: boolean;
	readonly showAllCustomFields: boolean;
	readonly popoverPlacement?: PopoverPlacement;
}

export type DealValue = {
	currency: string;
	value: number;
};

const DealInfoWithoutData: React.FC<Props> = (props) => {
	const { formatter } = useContext(FormFieldsContext);
	const {
		onUpdate,
		dealInfo,
		organization,
		person,
		currencies,
		me,
		enableEditableCustomFields = false,
		popoverPlacement,
	} = props;
	const translator = useTranslator();
	const { value, customFields } = dealInfo;

	const onChangeWithFormattedValue = (lead: { [key: string]: FormValue }) => {
		if (lead.dealValue === null) {
			return onUpdate({ currency: '', value: 0 });
		}
		if (typeof lead.dealValue === 'object' && lead.dealValue !== null && 'value' in lead.dealValue) {
			const formattedValue = formatter?.unformat(String(lead.dealValue.value)) ?? lead.dealValue.value;
			return onUpdate({ currency: lead.dealValue.label, value: Number(formattedValue) });
		}
		return Promise.resolve(true);
	};

	const settings = {
		...(organization?.relatedOrganizationId && {
			org_id: parseInt(organization.relatedOrganizationId, 10),
		}),
		...(person?.relatedPersonId && {
			person_id: parseInt(person.relatedPersonId, 10),
		}),
	};

	return (
		<>
			<SidebarField
				icon="monetary"
				value={
					value == null
						? undefined
						: {
								label: value.currency.code,
								value: value.amount,
						  }
				}
				fieldKey="dealValue"
				fieldType="monetary"
				placeholder={translator.gettext('Value')}
				onUpdate={onChangeWithFormattedValue}
				currencies={currencies}
				isDeleted={false}
				placement={popoverPlacement}
			/>

			<EditableCustomFieldsContextProvider
				currencies={currencies}
				enableEditableCustomFields={enableEditableCustomFields}
				settings={settings}
			>
				{customFields?.map((customField) => (
					<CustomFieldRenderer
						key={customField?.id}
						language={me?.language ?? null}
						customField={customField}
						customFieldInfo={customField}
						showCustomField={props.showAllCustomFields}
						enableEditableCustomFields={enableEditableCustomFields}
						onUpdate={props.onCustomFieldUpdate}
					/>
				))}
			</EditableCustomFieldsContextProvider>
		</>
	);
};

export const DealInfo = createFragmentContainer(DealInfoWithoutData, {
	dealInfo: graphql`
		fragment DealInfo_dealInfo on DealInfo {
			value {
				currency {
					code
				}
				amount
			}
			customFields {
				id
				...CustomFieldRenderer_customField
				...CustomFieldRenderer_customFieldInfo
			}
		}
	`,
	organization: graphql`
		fragment DealInfo_organization on Organization {
			relatedOrganizationId: id(opaque: false)
		}
	`,
	person: graphql`
		fragment DealInfo_person on Person {
			relatedPersonId: id(opaque: false)
		}
	`,
	me: graphql`
		fragment DealInfo_me on User {
			language {
				...CustomFieldRenderer_language
			}
		}
	`,
});
