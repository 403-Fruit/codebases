"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fromGlobalId = fromGlobalId;
exports.toGlobalId = toGlobalId;
exports.isTypeOf = isTypeOf;
exports.default = globalIdField;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _graphql = require("graphql");

var _js = require("@adeira/js");

var _Encoder = require("./Encoder");

var SYMBOL_GLOBAL_ID = Symbol.for('graphql_global_id');

function fromGlobalId(opaqueID) {
  var decodedGlobalID = (0, _Encoder.decode)(opaqueID);
  var delimiterPos = decodedGlobalID.indexOf(':');

  if (delimiterPos === -1) {
    throw new Error("ID '".concat(opaqueID, "' is not valid opaque value."));
  }

  return decodedGlobalID.substring(delimiterPos + 1);
}

function toGlobalId(type, id) {
  return (0, _Encoder.encode)("".concat(type, ":").concat(id));
}

function isTypeOf(type, opaqueID) {
  if (typeof opaqueID !== 'string') {
    return false;
  }

  var decodedGlobalID = (0, _Encoder.decode)(opaqueID);
  var delimiterPos = decodedGlobalID.indexOf(':');

  if (delimiterPos === -1) {
    throw new Error("ID '".concat(opaqueID, "' is not valid opaque value."));
  }

  var unmaskedType = decodedGlobalID.substring(0, delimiterPos);
  return unmaskedType === type;
}
/**
 * Creates the configuration for an id field on a node, using `toGlobalId` to
 * construct the ID from the provided typename. The type-specific ID is fetched
 * by calling idFetcher on the object.
 */


function globalIdField(idFetcher, // Unmasked ID fetcher is optional and it will allow you to overwrite how
// does public ID actually look like. It's because opaque ID may be quite
// complex internally but unmasked ID can be still simply represented.
// Please not that unmasked ID should not be used as a globally unique
// identifier (use original opaque ID instead).
unmaskedIdFetcher) {
  return (0, _defineProperty2.default)({
    description: 'The globally unique ID of an object. You can unmask this ID to get ' + 'original value but please note that this unmasked ID is not globally ' + 'unique anymore and therefore it cannot be used as a cache key.',
    // ID should be always non-null. This is an intentional exception to our eslint rule.
    // eslint-disable-next-line adeira/only-nullable-fields
    type: new _graphql.GraphQLNonNull(_graphql.GraphQLID),
    args: {
      opaque: {
        type: _graphql.GraphQLBoolean,
        defaultValue: true
      }
    },
    resolve: function resolve(obj, args, context, info) {
      var id = idFetcher(obj, context, info); // We cannot return null because of `GraphQLNonNull` and it is not OK
      // to return opaque identifier containing `null` values because it
      // indicates failure but it's not visible from outside (and it
      // generates duplicate false keys). So we have to throw here.

      !(id !== undefined) ? process.env.NODE_ENV !== "production" ? (0, _js.invariant)(false, 'Global ID cannot be undefined.') : (0, _js.invariant)(false) : void 0;
      !(id !== null) ? process.env.NODE_ENV !== "production" ? (0, _js.invariant)(false, 'Global ID cannot be null.') : (0, _js.invariant)(false) : void 0;

      if (args.opaque === true) {
        // this should always be the default in our system
        return toGlobalId(info.parentType.name, id);
      }

      return unmaskedIdFetcher ? unmaskedIdFetcher(obj, context, info) : id;
    }
  }, SYMBOL_GLOBAL_ID, true);
}