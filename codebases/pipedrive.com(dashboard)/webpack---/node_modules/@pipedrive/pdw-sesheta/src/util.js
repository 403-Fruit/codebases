'use strict';

var CryptoJS = require('crypto-js/core'),
	Base64 = require('crypto-js/enc-base64'),
	Utf8 = require('crypto-js/enc-utf8'),
	hmacSHA256 = require('crypto-js/hmac-sha256'),
	md5 = require('crypto-js/md5'),
	Util = {};

// common

Util.object = function(obj) {
	return !!obj && Util.isObject(obj) ? obj : {};
};

Util.isObject = function(obj) {
	return Object.prototype.toString.call(obj) === '[object Object]';
};

Util.objectKeys = function(object) {
	var keys = [];

	for (var key in object) {
		/* istanbul ignore else */
		if (object.hasOwnProperty(key)) {
			keys.push(key);
		}
	}

	return keys;
};

Util.queryString = function(obj) {
	var components = [],
		keys = Util.objectKeys(obj).sort();

	keys.forEach(function(key) {
		components.push(encodeURIComponent(key) + '=' + encodeURIComponent(obj[key]));
	});

	return components.join('&');
};

// base64

Util.base64Encode = function(str) {
	return Base64.stringify(Utf8.parse(str));
};

Util.base64Escape = function(str) {
	return str.replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '');
};

// crypto

Util.md5 = function(str) {
	return md5(str).toString(Base64);
};

Util.hmacSHA256 = function(data, b64key) {
	return hmacSHA256(data, Base64.parse(b64key)).toString(Base64);
};

Util.randomUUID = function() {
	var rnd = CryptoJS.lib.WordArray.random(16);

	rnd.words[1] = (rnd.words[1] & 0xffff0fff) | 0x00004000; // eslint-disable-line no-bitwise
	rnd.words[2] = (rnd.words[2] & 0x3fffffff) | 0x80000000; // eslint-disable-line no-bitwise

	var hex = rnd.toString();

	return hex.substring(0, 8) + '-' +
		hex.substring(8, 12) + '-' +
		hex.substring(12, 16) + '-' +
		hex.substring(16, 20) + '-' +
		hex.substring(20, 32);
};

module.exports = Util;
