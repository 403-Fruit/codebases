'use strict';

var Util = require('./util');

function Api(config) {
	this.id_ = config.id;
	this.key_ = config.key;
	this.host_ = config.host;
}

Api.prototype.postEvents = function(collection, beacon, callback) {
	var request = {
		method: 'POST',
		path: '/e',
		query: {},
		body: collection.getContent(),
		beacon: beacon === true
	};

	this.signAndSendRequest_(request, callback);
};

Api.prototype.signAndSendRequest_ = function(request, callback) {
	this.sendRequest_(this.signRequest_(request), callback);
};

Api.prototype.sendRequest_ = function(request, callback) {
	var self = this,
		method = request.method,
		url = self.host_ + request.path + '?' + Util.queryString(request.query),
		body = request.body;

	if (request.beacon === true && !!navigator.sendBeacon && navigator.sendBeacon(url, body)) {
		return callback();
	}

	var xhr = new XMLHttpRequest();

	xhr.open(method, url, true);
	xhr.withCredentials = false;
	xhr.setRequestHeader('content-type', 'text/plain');

	xhr.onreadystatechange = function() {
		if (xhr.readyState === 4) {
			var status = xhr.status,
				category = parseInt(status / 100, 10);

			if (category === 2) {
				return callback();
			} else {
				return callback(new Error('Request error (status=' + status + ')'));
			}
		}
	};

	xhr.send(body);
};

Api.prototype.signRequest_ = function(request) {
	delete request.query.s;

	// client id
	request.query.c = this.id_;

	// signature
	request.query.s = Util.base64Escape(
		Util.hmacSHA256(
			this.stringToSign_(request),
			this.key_
		)
	);

	return request;
};

Api.prototype.stringToSign_ = function(request) {
	return [
		request.method,
		request.path,
		Util.queryString(request.query),
		Util.md5(request.body)
	].join('\n');
};

module.exports = Api;
