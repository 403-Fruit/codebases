'use strict';

var Util = require('./util'),

	ID_REGEX = /^[0-9a-f]{8}-[0-9a-f]{4}-[4][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i,

	/* eslint no-useless-escape: "off"*/
	NAME_REGEX = /^[a-z0-9._\-]+$/i;

/* eslint complexity:"off" */
function Event(config) {
	config = Util.object(config);

	var id = typeof config.id === 'undefined' ? Util.randomUUID() : config.id,
		name = config.name,
		time = typeof config.time === 'undefined' ? Date.now() : config.time,
		data = typeof config.data === 'undefined' ? {} : config.data;

	if (typeof id !== 'string' || !ID_REGEX.test(id)) {
		throw new Error('Invalid id, expected a string matching ' + ID_REGEX.toString() +
			' (id=' + String(id) + ')');
	}

	if (typeof name !== 'string' || !NAME_REGEX.test(name)) {
		throw new Error('Invalid name, expected a string matching ' + NAME_REGEX.toString() +
			' (name=' + String(name) + ')');
	}

	if (typeof time !== 'number') {
		throw new Error('Invalid time, expected an integer (time=' + String(time) + ')');
	}

	if (!Util.isObject(data)) {
		throw new Error('Invalid data, expected an object');
	}

	try {
		data = Util.base64Encode(JSON.stringify(data));
	} catch (e) {
		throw new Error('Unable to serialize data (reason=' + e.message + ')');
	}

	this.content_ = JSON.stringify({
		id: id,
		name: name,
		time: time,
		data: data
	});
}

Event.prototype.getContent = function() {
	return this.content_;
};

Event.prototype.getSize = function() {
	return this.content_.length;
};

module.exports = Event;
