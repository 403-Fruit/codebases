'use strict';

var Client = require('./src/client');

/**
 * @class Sesheta
 *
 * @param {object} config            configuration object
 * @param {string} config.id         client id
 * @param {string} config.key        client key
 * @param {string} config.host       (optional) service host (protocol://hostname[:port])
 * @param {number} config.batchSize  (optional) max batch size (bytes), defaults to 32768 (32kb)
 * @param {number} config.bufferTime (optional) max buffering time (ms), defaults to 2000 (2s)
 *
 * @throws {Error} when given an invalid configuration object
 */
function Sesheta(config) {
	if (!(this instanceof Sesheta)) {
		return new Sesheta(config);
	}

	this.client_ = new Client(config);
}

/**
 * Enqueues an event to be uploaded at a later time
 *
 * @param {object}   event      event object
 * @param {string}   event.id   (optional) UUIDv4, defaults to random uuid
 * @param {string}   event.name event name (/^[a-z0-9._\-]+$/i)
 * @param {number}   event.time (optional) event time, defaults to Date.now()
 * @param {object}   event.data (optional) user defined payload, defaults to {}
 * @param {function} callback   (optional) called once the event has been processed
 */
Sesheta.prototype.addEvent = function(event, callback) {
	return this.client_.addEvent(event, callback);
};

/**
 * Flushes all buffered events
 *
 * @param {function} callback (optional) called once all outstanding events have been processed
 */
Sesheta.prototype.flush = function(callback) {
	this.client_.flush(callback);
};

/**
 * Discards all buffered events
 */
Sesheta.prototype.reset = function() {
	this.client_.reset();
};

/**
 * @typedef {object} Sesheta~Stats
 *
 * @property {number} rejected number of events rejected due to invalid input
 * @property {number} accepted number of accepted events
 * @property {number} buffered number of buffered events
 * @property {number} inflight number of in-flight events
 * @property {number} uploaded number of uploaded events
 * @property {number} dropped  number of events dropped due to upload failure
 * @property {number} evicted  number of events evicted after calling reset
 */
/**
 * Gets runtime statistics
 *
 * @return {Sesheta~Stats} runtime statistics
 */
Sesheta.prototype.getStats = function() {
	return this.client_.getStats();
};

module.exports = Sesheta;
