import React, { useContext } from 'react';

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

var LogLevel;

(function (LogLevel) {
  LogLevel["Debug"] = "debug";
  LogLevel["Info"] = "info";
  LogLevel["Warn"] = "warn";
  LogLevel["Error"] = "error";
})(LogLevel || (LogLevel = {}));

var logger = (function (logger) {
  var facility = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'unknown-facility';

  if (!logger) {
    return null;
  }

  var loggerInstance = logger(facility);

  var log = function log(next) {
    return function (action) {
      try {
        if (action && action.error) {
          var meta = action.meta || action.error;
          var message = meta.message || 'Unknown Error';
          var level = action.meta && action.meta.level ? action.meta.level : LogLevel.Error;

          var errorData = _objectSpread2(_objectSpread2({}, _typeof(meta) === 'object' && !Array.isArray(meta) ? meta : {
            meta: meta
          }), {}, {
            actionType: action.type
          });

          loggerInstance.remote(level, message, errorData, facility);
        }

        return next(action);
      } catch (err) {
        loggerInstance.remote('error', 'RM: Caught an exception on action dispatch!', {
          caughtErrorMessage: err.message,
          caughtErrorStack: err.stack,
          triggeredAction: action
        }, facility);
        throw err;
      }
    };
  };

  return function () {
    return log;
  };
});

var pdMetrics = (function (pdMetrics) {
  var view = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

  if (!pdMetrics) {
    return null;
  }

  var track = function track(next) {
    return function (action) {
      if (pdMetrics && pdMetrics.trackUsage && action && action.pdMetrics) {
        var _action$pdMetrics = action.pdMetrics,
            _action$pdMetrics$com = _action$pdMetrics.component,
            component = _action$pdMetrics$com === void 0 ? 'unknown-component' : _action$pdMetrics$com,
            _action$pdMetrics$eve = _action$pdMetrics.eventAction,
            eventAction = _action$pdMetrics$eve === void 0 ? 'unknown-action' : _action$pdMetrics$eve,
            _action$pdMetrics$eve2 = _action$pdMetrics.eventData,
            eventData = _action$pdMetrics$eve2 === void 0 ? {} : _action$pdMetrics$eve2;
        pdMetrics.trackUsage(view, component, eventAction, eventData);
      }

      return next(action);
    };
  };

  return function () {
    return track;
  };
});

var ErrorBoundary = /*#__PURE__*/function (_React$Component) {
  _inherits(ErrorBoundary, _React$Component);

  var _super = _createSuper(ErrorBoundary);

  function ErrorBoundary(props) {
    var _this;

    _classCallCheck(this, ErrorBoundary);

    _this = _super.call(this, props);
    _this.state = {
      hasError: false
    };
    return _this;
  }

  _createClass(ErrorBoundary, [{
    key: "componentDidCatch",
    value: function componentDidCatch(error, info) {
      var _this$props = this.props,
          logger = _this$props.logger,
          _this$props$loggingDa = _this$props.loggingData,
          _this$props$loggingDa2 = _this$props$loggingDa.message,
          message = _this$props$loggingDa2 === void 0 ? error.message : _this$props$loggingDa2,
          facility = _this$props$loggingDa.facility,
          _this$props$loggingDa3 = _this$props$loggingDa.level,
          level = _this$props$loggingDa3 === void 0 ? 'error' : _this$props$loggingDa3;
      this.setState({
        hasError: true
      });

      if (!logger) {
        return;
      }

      return logger.remote(level, message, _objectSpread2({
        errorMessage: error.message,
        stack: error.stack
      }, info), facility);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          children = _this$props2.children,
          error = _this$props2.error;
      var hasError = this.state.hasError;

      if (hasError) {
        return error;
      }

      return children;
    }
  }]);

  return ErrorBoundary;
}(React.Component);

_defineProperty(ErrorBoundary, "defaultProps", {
  logger: null,
  loggingData: {
    message: 'Unknown Error',
    level: 'error',
    facility: 'unknown-facility'
  }
});

var TranslatorContext = /*#__PURE__*/React.createContext({
  languageCode: 'en',
  gettext: function gettext(str, replace) {
    return str;
  },
  dgettext: function dgettext(domain, str, replace) {
    return str;
  },
  dcgettext: function dcgettext(domain, str, category, replace) {
    return str;
  },
  ngettext: function ngettext(singularString, pluralString, val, replace) {
    return singularString;
  },
  dngettext: function dngettext(domain, singularString, pluralString, val, replace) {
    return singularString;
  },
  dcngettext: function dcngettext(domain, singularString, pluralString, val, category, replace) {
    return singularString;
  },
  pgettext: function pgettext(context, str, replace) {
    return str;
  },
  dpgettext: function dpgettext(domain, context, str, replace) {
    return str;
  },
  npgettext: function npgettext(context, singularString, pluralString, val, replace) {
    return singularString;
  },
  dnpgettext: function dnpgettext(domain, context, singularString, pluralString, val, replace) {
    return singularString;
  },
  dcnpgettext: function dcnpgettext(domain, context, singularString, pluralString, val, replace) {
    return singularString;
  },
  sprintf: function sprintf() {
    return '';
  }
});
var useTranslator = function useTranslator() {
  return useContext(TranslatorContext);
};
var withTranslator = function withTranslator(WrappedComp) {
  var ContextConsumer = /*#__PURE__*/function (_React$PureComponent) {
    _inherits(ContextConsumer, _React$PureComponent);

    var _super = _createSuper(ContextConsumer);

    function ContextConsumer() {
      _classCallCheck(this, ContextConsumer);

      return _super.apply(this, arguments);
    }

    _createClass(ContextConsumer, [{
      key: "render",
      value: function render() {
        var _this = this;

        return /*#__PURE__*/React.createElement(TranslatorContext.Consumer, null, function (translator) {
          return /*#__PURE__*/React.createElement(WrappedComp, _extends({}, _this.props, _this.state, {
            t: translator // left here for backward compatibility
            ,
            translator: translator
          }));
        });
      }
    }]);

    return ContextConsumer;
  }(React.PureComponent);

  _defineProperty(ContextConsumer, "displayName", void 0);

  _defineProperty(ContextConsumer, "WrappedComp", void 0);

  ContextConsumer.displayName = WrappedComp.displayName || WrappedComp.name;
  ContextConsumer.WrappedComp = WrappedComp;
  return ContextConsumer;
};

export { ErrorBoundary, TranslatorContext, logger as getLoggerMiddleware, pdMetrics as getPdMetricsMiddleware, useTranslator, withTranslator };
//# sourceMappingURL=react-utils.esm.js.map
