"use strict";
/* eslint-disable no-console */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadFuseConfiguration = void 0;
const loadFuseConfiguration = (isTest) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    if (isTest) {
        try {
            // see if the mock server is running first
            yield window.fetch('http://localhost:15099', {
                credentials: 'same-origin',
            });
            const registration = yield navigator.serviceWorker.register('/fuse-service-worker.js', {
                updateViaCache: 'none',
                scope: '/',
            });
            yield registration.update();
            (_a = registration.active) === null || _a === void 0 ? void 0 : _a.postMessage('report-urls');
            registration.addEventListener('updatefound', () => {
                window.location.reload();
            });
        }
        catch (err) {
            const registrations = yield navigator.serviceWorker.getRegistrations();
            const registration = registrations.find((reg) => { var _a; return (_a = reg.active) === null || _a === void 0 ? void 0 : _a.scriptURL.endsWith('/fuse-service-worker.js'); });
            if (registration) {
                yield registration.unregister();
            }
        }
        try {
            const { data } = (yield (yield window.fetch('http://localhost:15000', {
                credentials: 'same-origin',
            })).json());
            console.group('Services running from local development (fuse) server:');
            Object.entries(data).forEach(([key, value]) => {
                console.log(`${key} running on port ${value._port}`);
            });
            console.groupEnd();
            return data;
        }
        catch (_b) {
            console.info('Your local development (fuse) server is not running.');
            return { webapp: {} };
        }
    }
    else {
        return { webapp: {} };
    }
});
exports.loadFuseConfiguration = loadFuseConfiguration;
