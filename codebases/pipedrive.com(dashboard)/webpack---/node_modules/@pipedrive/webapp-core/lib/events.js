const Backbone = require('backbone');
const _ = require('lodash');
const eventMapping = {};
const eventHandler = {};

const evMappingHelpers = {
	addEvent: function(event) {
		if (event in eventMapping) {
			eventMapping[event]++;
		} else {
			eventMapping[event] = 1;
		}
	},

	subtractEvent: function(event) {
		if (event in eventMapping && eventMapping[event] > 1) {
			eventMapping[event]--;
		} else {
			delete eventMapping[event];
		}
	},

	eventMappingFinder: function(event) {
		const eventGroups = event.split('.');
		const callbacks = [];

		/**
		 * This needs a comment just in case:
		 * Finds all the wildcard combinations of 'custom.event.1234.action'
		 * mask: 0000  custom.event.1234.action
		 * mask: 0001  custom.event.1234.*
		 * mask: 0010  custom.event.*.action
		 * ...
		 * mask: 1111  *.*.*.*
		 */
		for (let i = 0; i <= 15; i++) {
			const wildcards = (`0000${parseInt(i, 10).toString(2)}`).slice(-4).split('');
			const mask = [];

			for (let bit = 0; bit < 4; bit++) {
				mask[bit] = wildcards[bit] === '1' ? '*' : eventGroups[bit];
			}

			if (mask.join('.') in eventMapping) {
				callbacks.push(mask.join('.'));
			}
		}

		return callbacks;
	},
};

const getBinder = function(doOnce, event, handler, thisScope) {
	// Enable only events that are following set format xx.xx.xx.xx
	if (event.split('.').length < 3) {
		return;
	}

	evMappingHelpers.addEvent(event);

	const binder = doOnce ? eventHandler.once : eventHandler.on;

	binder.call(eventHandler, event, handler, thisScope);
};

_.assignIn(eventHandler, Backbone.Events);

module.exports = _.assignIn({}, Backbone.Events, {
	bind: function(event, handler, thisScope) {
		getBinder(false, event, handler, thisScope);
	},

	bindOnce: function(event, handler, thisScope) {
		const origHandler = handler;

		handler = function(...args) {
			evMappingHelpers.subtractEvent(event);

			if (!eventMapping[event]) {
				delete eventHandler._events[event];
			}

			origHandler.apply(thisScope, args);
		};

		getBinder(true, event, handler, thisScope);
	},

	unbind: function(event, handler, thisScope) {
		let toUnbind = false;

		_.forEach(eventHandler._events[event], (evItem) => {
			const handlerMatch = evItem.callback === handler || !handler;
			const scopeMatch = evItem.context === thisScope || !thisScope;

			if (handlerMatch && scopeMatch) {
				toUnbind = true;
				evMappingHelpers.subtractEvent(event);
			}
		});

		if (toUnbind) {
			eventHandler.off(event, handler, thisScope);

			if (!eventMapping[event]) {
				delete eventHandler._events[event];
			}
		}
	},

	fire: function(eventName, ...args) {
		const eventMap = evMappingHelpers.eventMappingFinder(eventName);

		_.forEach(eventMap, (e) => {
			const eventArgs = _.clone(args);

			eventArgs.unshift(e);

			eventHandler.trigger.apply(eventHandler, eventArgs);
		});
	},
});
