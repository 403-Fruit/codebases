const Jed = require('jed');

function TranslatorClient(options = {}) {
	this.options = options;
	this.jed = new Jed(this.options);
}

/**
 * Set configuration object & re-initialize Jed
 * @param {Object} options Configuration with translations
 */
TranslatorClient.prototype.setOptions = function(options) {
	if (typeof options !== 'object') {
		return;
	}

	this.options = options;
	this.jed = new Jed(this.options);
};

/**
 * Get configuration options object
 * @return {Object} Object that is used to create this instance of Translator Client
 */
TranslatorClient.prototype.getOptions = function() {
	return this.options;
};

/**
 * Get language code from the configuration object in CrowdIn format (aa_BB)
 * @return {String} Language code of used translations
 */
TranslatorClient.prototype.getLanguage = function() {
	const options = this.options || {};
	const localeData = options.locale_data || {};
	const messages = localeData.messages || {};
	const data = messages[''] || {};

	return data.lang && typeof data.lang === 'string' ? data.lang : null;
};

/**
 * Get language code from the configuration object in Pipedrive format (aa-BB)
 * @return {String} Language code of used translations
 */
TranslatorClient.prototype.getPdLanguage = function() {
	const lang = this.getLanguage();

	return lang ? lang.replace('_', '-') : lang;
};

/**
 * Get Jed library instance that is wrapped into Translator Client
 * @return {Object} Instance of Jed library
 */
TranslatorClient.prototype.getJed = function() {
	return this.jed;
};

/**
 * Run the translation function with straight call-through or via sprintf
 */
TranslatorClient.prototype.translate = function(func, replacePos, ...args) {
	const replace = args[replacePos];

	if (typeof replace === 'undefined') {
		return this.jed[func].apply(this.jed, args);
	}

	return this.sprintf(this.jed[func].apply(this.jed, args), replace);
};

/**
 * Pass through methods to Jed library
 */
TranslatorClient.prototype.gettext = function(...args) {
	return this.translate('gettext', 1, ...args);
};
TranslatorClient.prototype.dgettext = function(...args) {
	return this.translate('dgettext', 2, ...args);
};
TranslatorClient.prototype.dcgettext = function(...args) {
	return this.translate('dcgettext', 3, ...args);
};
TranslatorClient.prototype.ngettext = function(...args) {
	return this.translate('ngettext', 3, ...args);
};
TranslatorClient.prototype.dngettext = function(...args) {
	return this.translate('dngettext', 4, ...args);
};
TranslatorClient.prototype.dcngettext = function(...args) {
	return this.translate('dcngettext', 5, ...args);
};
TranslatorClient.prototype.pgettext = function(...args) {
	return this.translate('pgettext', 2, ...args);
};
TranslatorClient.prototype.dpgettext = function(...args) {
	return this.translate('dpgettext', 3, ...args);
};
TranslatorClient.prototype.npgettext = function(...args) {
	return this.translate('npgettext', 4, ...args);
};
TranslatorClient.prototype.dnpgettext = function(...args) {
	return this.translate('dnpgettext', 5, ...args);
};
TranslatorClient.prototype.dcnpgettext = function(...args) {
	return this.translate('dcnpgettext', 5, ...args);
};
TranslatorClient.prototype.sprintf = function(...args) {
	try {
		return this.jed.sprintf.apply(this.jed, args);
	} catch (err) {
		if (typeof this.options.onError === 'function') {
			this.options.onError(err, args);
		}

		return args[0];
	}
};

module.exports = TranslatorClient;
