"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
function buildArgs(argsObj) {
    const args = [];
    for (const argName in argsObj) {
        if (argsObj.hasOwnProperty(argName)) {
            const name = argsObj[argName];
            if (typeof name !== 'undefined') {
                args.push(`${argName}: ${name}`);
            }
        }
    }
    return args.join(', ');
}
// eslint-disable-next-line complexity
function buildOperands(argsObj) {
    const args = [];
    for (const argName in argsObj) {
        if (argsObj.hasOwnProperty(argName)) {
            const name = argsObj[argName];
            let argument;
            switch (typeof name) {
                case 'string':
                    argument = `"${name}"`;
                    break;
                case 'object':
                    argument = JSON.stringify(name);
                    break;
                default:
                    argument = name;
            }
            if (typeof name !== 'undefined') {
                args.push(`${argName}: ${argument}`);
            }
        }
    }
    return args.join(', ');
}
function createGqlQuery(obj) {
    const shape = [];
    for (const [key, val] of Object.entries(obj)) {
        let queryKey = key;
        let queryValue = val;
        if (val && val.__args) {
            const args = buildArgs(val.__args);
            const { __args, __field, type } = val, value = __rest(val, ["__args", "__field", "type"]);
            queryKey = `${key}: ${val.__field}(${args})`;
            queryValue = value;
        }
        if (val && val.__operands) {
            const args = buildOperands(val.__operands);
            const { __operands, type } = val, value = __rest(val, ["__operands", "type"]);
            queryKey = `${key}(conditions: {${args}})`;
            queryValue = value;
        }
        shape.push(lodash_1.isObject(queryValue) ? `${queryKey} { ${createGqlQuery(queryValue)} }` : key);
    }
    return shape.join(' ');
}
const parseOperands = (inputs) => {
    return inputs.reduce((acc, item) => {
        const operands = item.defaultValue ? { [item.name]: item.defaultValue } : {};
        return Object.assign(Object.assign({}, acc), operands);
    }, {});
};
const buildQueryObject = (arr) => {
    // eslint-disable-next-line complexity
    const reducer = (acc, item) => {
        if (item.filter) {
            if (item.operands) {
                const value = item.fields ? Object.assign(Object.assign({}, acc), item.fields) : acc;
                return {
                    [item.filter]: Object.assign(Object.assign({}, value), { type: item.type, __operands: parseOperands(item.operands) }),
                };
            }
            return {
                [item.filter]: acc,
            };
        }
        const alias = item.alias || item.field;
        if (alias) {
            const field = {
                [alias]: Object.assign(Object.assign({}, item.fields), { type: item.type, __args: item.args, __field: item.field }),
            };
            return Object.assign(Object.assign({}, acc), field);
        }
        if (typeof item === 'string') {
            return {
                [item]: acc,
            };
        }
        return Object.assign(Object.assign({}, acc), item);
    };
    return arr.reduceRight(reducer, {});
};
class QueryBuilder {
    constructor(type, args) {
        this.type = type;
        this.queryData = [];
        this.name = args ? `query (${buildArgs(args)})` : '';
        this.queryObject = {
            [this.name]: {
                [type]: {},
            },
        };
    }
    add(item) {
        if (Array.isArray(item)) {
            this.queryData.push(...item);
        }
        else {
            this.queryData.push(item);
        }
        return this;
    }
    build() {
        this.queryObject[this.name][this.type] = buildQueryObject(this.queryData);
        return createGqlQuery(this.queryObject);
    }
}
exports.default = QueryBuilder;
