"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const moment_1 = __importDefault(require("moment"));
const constants_1 = require("./constants");
exports.dateFormat = 'YYYY-MM-DD';
exports.gqlDateFormat = 'yyyy-MM-dd';
const periods = {
    today: () => {
        return {
            startDate: moment_1.default(),
            endDate: moment_1.default(),
        };
    },
    yesterday: () => {
        return {
            startDate: moment_1.default().subtract(1, 'days'),
            endDate: moment_1.default().subtract(1, 'days'),
        };
    },
    week: () => {
        return {
            startDate: moment_1.default().startOf('week'),
            endDate: moment_1.default().endOf('week'),
        };
    },
    lastWeek: () => {
        return {
            startDate: moment_1.default().subtract(7, 'days').startOf('week'),
            endDate: moment_1.default().subtract(7, 'days').endOf('week'),
        };
    },
    month: () => {
        return {
            startDate: moment_1.default().startOf('month'),
            endDate: moment_1.default().endOf('month'),
        };
    },
    lastMonth: () => {
        return {
            startDate: moment_1.default().subtract(1, 'months').startOf('month'),
            endDate: moment_1.default().subtract(1, 'months').endOf('month'),
        };
    },
    quarter: () => {
        return {
            startDate: moment_1.default().startOf('quarter'),
            endDate: moment_1.default().endOf('quarter'),
        };
    },
    lastQuarter: () => {
        return {
            startDate: moment_1.default().subtract(1, 'quarters').startOf('quarter'),
            endDate: moment_1.default().subtract(1, 'quarters').endOf('quarter'),
        };
    },
    year: () => {
        return {
            startDate: moment_1.default().startOf('year'),
            endDate: moment_1.default().endOf('year'),
        };
    },
    lastYear: () => {
        return {
            startDate: moment_1.default().subtract(1, 'year').startOf('year'),
            endDate: moment_1.default().subtract(1, 'year').endOf('year'),
        };
    },
};
exports.getTimePeriodDates = (period, saving = false) => {
    if (period === 'current') {
        return null;
    }
    const dates = periods[period]();
    return [
        {
            name: constants_1.OperandType.FROM,
            defaultValue: saving ? null : dates.startDate.locale('en').format(exports.dateFormat),
        },
        {
            name: constants_1.OperandType.TO,
            defaultValue: saving ? null : dates.endDate.locale('en').format(exports.dateFormat),
        },
        {
            name: constants_1.OperandType.FORMAT,
            defaultValue: exports.gqlDateFormat,
        },
    ];
};
