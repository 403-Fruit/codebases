(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("jquery"), require("lodash"));
	else if(typeof define === 'function' && define.amd)
		define(["jquery", "lodash"], factory);
	else {
		var a = typeof exports === 'object' ? factory(require("jquery"), require("lodash")) : factory(root["jquery"], root["lodash"]);
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_2__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require) {
		var $ = __webpack_require__(1),
			 _ = __webpack_require__(2);

		__webpack_require__(3);

		var	local,
			SingleSnackbar,
			// Default options
			DEFAULTS = {
				text: '',
				showAction: false,
				actionText: '',
				duration: 'short',
				preventOverride: false,
				customClass: '',
				showCloseButton: false,
				activityIndicator: false
			},
			DURATIONS = {
				'short': 4000,
				'medium': 8000,
				'long': 16000
			},

		/**
		 * This instance handles creating new snackbar and showing/hiding it.
		 */
		SnackbarsHandler = {
			previous: null,
			snackbar: null,
			unblockCb: null,
			timeout: null,
			blockTimeout: null,
			options: null,

			/**
			* This method creates new instance of Snack with given options and appends it to body to show it.
			* If no options given, will use default options.
			*
			* @param {Object} opts      Initial options
			* @example
			* snackbar.show({
			*	text: _.gettext('Message sent'),
			*	onClose: _.bind(this.onSnackbarClose, this),
			*	showAction: true,
			*	actionText: _.gettext('Undo')
			* })
			*/
			show: function (opts) {
				var options = _.assignIn({}, DEFAULTS, opts);
				if (this.snackbar) {
					if (options.preventOverride) {
						return;
					}

					// If snackbar is blocked by 2sec timer wait with new call;
					if (this.snackbar.blocked) {
						this.unblockCb = _.bind(this.show, this, opts);
						return;
					}

					local.handleSecondSnackbar.call(this);
				}

				this.snackbar = new SingleSnackbar(options);

				local.setUnblockTimeout.call(this);

				if (options.duration && DURATIONS.hasOwnProperty(options.duration)) {
					local.setTimeout.call(this, DURATIONS[options.duration]);
					if (options.showCloseButton || options.showAction) {
						local.handleSnackbarMousemove.call(this);
					}
				}

				local.bindOnSnackbarClose.call(this);

				$('body').append(this.snackbar.$el);

				this.snackbar.show();
			},

			close: function() {
				this.snackbar.hide();
				local.clearTimeout.call(this);
			}
		};

		// Private methods
		local = {

			/**
			* if new snackbar is shown, will start timeout for 2 secs, to block new snackbar appearing, to avoid flashing snackbars.
			* if timeout ends, will fire unblock callback if it exists, and shows next snackbar that was in queue.
			*/
			setUnblockTimeout: function() {
				this.unblockCb = null;
				this.blockTimeout = setTimeout(function () {
					this.snackbar.blocked = false;
					if (_.isFunction(this.unblockCb)) {
						this.unblockCb();
					}
				}.bind(this), 2000);
			},

			// clears all pending timeouts
			clearTimeout: function() {
				clearTimeout(this.timeout);
				clearTimeout(this.blockTimeout);
			},

			// sets timeout for hiding snackbar if timeout option is passed
			setTimeout: function(timeout) {
				this.timeout = setTimeout(_.bind(this.snackbar.hide, this.snackbar), timeout);
			},

			// if hovering on snackbar, will clear all timeouts and prvents snackbar to hide. If moved away from snackbar hides after 1 sec
			handleSnackbarMousemove: function() {
				this.snackbar.$el.on('mouseover', _.bind(local.clearTimeout, this));
				this.snackbar.$el.on('mouseout', _.bind(local.setTimeout, this, 1000));
			},

			// binds on snackbar transitioned event. If snackbar hides, removes its element
			bindOnSnackbarClose: function() {
				this.snackbar.$el.on('transitionend', function (ev) {
					var originalEvent = ev.originalEvent,
						element = ev.currentTarget,
						snackbarHidden = originalEvent.propertyName === 'bottom' && element.style.bottom === '-100px';

					if (snackbarHidden) {
						$(element).remove();
						if (this.snackbar.$el[0] === element) {
							this.snackbar = null;
							local.clearTimeout.call(this);
						}
					}
				}.bind(this));
			},

			// if snackbar already exists and new snackbar.show is called, will handle showing next snackbar
			handleSecondSnackbar: function() {
				this.previous = this.snackbar;
				this.previous.hide();
				local.clearTimeout.call(this);
				this.previous = null;
			}
		};

		/**
		* This class creates Snackbar element with given options and binds events to it
		* If no options given, will use default options.
		*
		* @param {Object} opts      Initial options
		*/
		SingleSnackbar = function(options) {
			this.options = options;
			this.blocked = true;

			this.$el = $('<div class="snackbar-container"' + this.options.customClass + '><div class="snack-content"><p>' + this.options.text + '</p><div class="actions"></div></div></div>');

			if (this.options.activityIndicator) {
				this.showSpinner();
			}

			if (this.options.showAction) {
				this.showActionButton();
			}

			if (this.options.showCloseButton) {
				this.showCloseButton();
			}
		};

		_.assignIn(SingleSnackbar.prototype, {
			// if options showAction is true, builds action button, appends it to snack element and bind events to it.
			showActionButton: function() {
				var $actionButton = $('<div class="action">' + this.options.actionText + '</div>');
				$actionButton.on('click', function () {
					if (_.isFunction(this.options.onActionClick)) {
						this.options.onActionClick();
					}
				}.bind(this));
				this.$el.find('.actions').append($actionButton);
			},

			// if options activityIndicator is true, creates spinner element and appends it to snack element, to show spinner.
			showSpinner: function() {
				var $spinnerElement = $('<div class="spinner"></div>');
				this.$el.find('.snack-content').prepend($spinnerElement);
				this.$el.addClass('activitySpinner');
			},

			// if options showCloseButton is true, creates close button, appends it to snack element and binds events
			showCloseButton: function() {
				var $closeButton = $('<span class="close"></span>');
				$closeButton.on('click', _.bind(this.hide, this));
				this.$el.find('.actions').append($closeButton);
				this.$el.addClass('closable');
			},

			// hides snackbar and calls onClose callback if it it specified
			hide: function() {
				this.$el.css('opacity', 0);
				this.$el.css('bottom', '-100px');
				if (_.isFunction(this.options.onClose)) {
					this.options.onClose();
				}
			},

			// shows snackbar
			show: function() {
				this.$el.animate({
					bottom: 0,
					opacity: 1
				}, 100);
			}
		});

		return SnackbarsHandler;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 1 */
/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_1__;

/***/ }),
/* 2 */
/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_2__;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(4);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(8)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../../node_modules/css-loader/index.js!../../node_modules/sass-loader/index.js!./snackbars.scss", function() {
				var newContent = require("!!../../node_modules/css-loader/index.js!../../node_modules/sass-loader/index.js!./snackbars.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(5)();
	// imports


	// module
	exports.push([module.id, ".snackbar-container {\n  -webkit-transition: bottom 0.4s, opacity 0.4s;\n  -moz-transition: bottom 0.4s, opacity 0.4s;\n  -ms-transition: bottom 0.4s, opacity 0.4s;\n  -o-transition: bottom 0.4s, opacity 0.4s;\n  transition: bottom 0.4s, opacity 0.4s;\n  -webkit-transform: ease;\n  -moz-transform: ease;\n  -ms-transform: ease;\n  -o-transform: ease;\n  transform: ease;\n  -webkit-transform: translateZ(0);\n  -moz-transform: translateZ(0);\n  -ms-transform: translateZ(0);\n  -o-transform: translateZ(0);\n  transform: translateZ(0);\n  box-sizing: border-box;\n  font-size: 14px;\n  min-height: 48px;\n  background-color: #3d4145;\n  position: fixed;\n  min-width: 288px;\n  max-width: 568px;\n  margin: 24px;\n  bottom: -100px;\n  opacity: 0;\n  color: white;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.24);\n  border-radius: 4px;\n  line-height: 20px;\n  padding: 0px 24px;\n  left: 0;\n  top: auto;\n  z-index: 9999; }\n  .snackbar-container.closable .snack-content .action {\n    margin-right: 44px; }\n  .snackbar-container.closable .snack-content p {\n    padding-right: 44px; }\n  .snackbar-container .actions {\n    display: table;\n    float: right;\n    position: relative; }\n  .snackbar-container.activitySpinner .snack-content p {\n    padding-left: 40px; }\n  .snackbar-container .snack-content {\n    width: 100%;\n    display: table;\n    padding: 14px 0px; }\n    .snackbar-container .snack-content .spinner {\n      width: 24px;\n      height: 24px;\n      background: url(" + __webpack_require__(6) + ") no-repeat;\n      position: absolute;\n      top: 12px; }\n    .snackbar-container .snack-content .action {\n      background: inherit;\n      display: inline-block;\n      font-size: inherit;\n      font-weight: 600;\n      text-transform: uppercase;\n      color: #fac443;\n      margin-left: 48px;\n      min-width: min-content;\n      cursor: pointer; }\n      .snackbar-container .snack-content .action:hover {\n        opacity: 0.84; }\n    .snackbar-container .snack-content p {\n      display: table-cell;\n      font-size: 14px;\n      line-height: 20px;\n      color: #fff;\n      vertical-align: middle;\n      word-break: break-word; }\n    .snackbar-container .snack-content .close {\n      width: 20px;\n      height: 20px;\n      position: absolute;\n      right: 0px;\n      background: url(" + __webpack_require__(7) + ") no-repeat; }\n      .snackbar-container .snack-content .close:hover {\n        opacity: 0.84; }\n    .snackbar-container .snack-content .spinner {\n      animation-name: ckw;\n      animation-duration: 1s;\n      animation-iteration-count: infinite;\n      transform-origin: 50% 50%;\n      -webkit-animation: spin 1s infinite linear;\n      -moz-animation: spin 1s infinite linear;\n      -ms-animation: spin 1s infinite linear;\n      -o-animation: spin 1s infinite linear;\n      animation: spin 1s infinite linear; }\n\n@-webkit-keyframes spin {\n  0% {\n    -webkit-transform: rotate(0deg); }\n  100% {\n    -webkit-transform: rotate(360deg); } }\n\n@-moz-keyframes spin {\n  0% {\n    -moz-transform: rotate(0deg); }\n  100% {\n    -moz-transform: rotate(360deg); } }\n\n@-o-keyframes spin {\n  0% {\n    -o-transform: rotate(0deg); }\n  100% {\n    -o-transform: rotate(360deg); } }\n\n@keyframes spin {\n  0% {\n    transform: rotate(0deg); }\n  100% {\n    transform: rotate(360deg); } }\n    .snackbar-container .snack-content .close {\n      cursor: pointer; }\n      .snackbar-container .snack-content .close.icon-cross:before {\n        color: #fff;\n        line-height: 20px; }\n", ""]);

	// exports


/***/ }),
/* 5 */
/***/ (function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];

		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};

		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ }),
/* 6 */
/***/ (function(module, exports) {

	module.exports = "\"data:image/svg+xml;charset=utf8,%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cpath d='M0 0h24v24H0z'/%3E%3Cpath d='M12 3c-4.97 0-9 4.03-9 9s4.03 9 9 9c.552 0 1-.448 1-1s-.448-1-1-1c-3.866 0-7-3.134-7-7s3.134-7 7-7 7 3.134 7 7c0 .552.448 1 1 1s1-.448 1-1c0-4.97-4.03-9-9-9z' fill='%23fff'/%3E%3C/g%3E%3C/svg%3E\""

/***/ }),
/* 7 */
/***/ (function(module, exports) {

	module.exports = "\"data:image/svg+xml;charset=utf8,%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z' fill='%23fff' fill-rule='evenodd'/%3E%3C/svg%3E\""

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(self.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];

	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}

		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();

		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";

		var styles = listToStyles(list);
		addStylesToDom(styles, options);

		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}

	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}

	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}

	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}

	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}

	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}

	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}

	function addStyle(obj, options) {
		var styleElement, update, remove;

		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}

		update(obj);

		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}

	var replaceText = (function () {
		var textStore = [];

		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();

	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;

		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}

	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;

		if(media) {
			styleElement.setAttribute("media", media)
		}

		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}

	function updateLink(linkElement, obj) {
		var css = obj.css;
		var sourceMap = obj.sourceMap;

		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}

		var blob = new Blob([css], { type: "text/css" });

		var oldSrc = linkElement.href;

		linkElement.href = URL.createObjectURL(blob);

		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ })
/******/ ])
});
;