"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/camelcase */
const fetch_1 = require("@pipedrive/fetch");
const browser_1 = require("./browser");
const localLog = {
    info: 'info',
    notice: 'log',
    warning: 'warn',
    error: 'error',
    debug: 'log',
};
/* eslint-disable no-bitwise */
const stringToHashInt = (string) => {
    let hash = 0;
    for (let i = 0; i < string.length; i++) {
        hash = string.charCodeAt(i) + ((hash << 5) - hash);
    }
    return hash;
};
const intToRGB = (integer) => {
    let hex = ((integer >> 24) & 0xFF).toString(16) +
        ((integer >> 16) & 0xFF).toString(16) +
        ((integer >> 8) & 0xFF).toString(16) +
        (integer & 0xFF).toString(16);
    hex += '000000';
    return hex.substring(0, 6);
};
/* eslint-enable no-bitwise */
const invertColor = (hex) => {
    // invert color components
    const r = (255 - parseInt(hex.slice(0, 2), 16)).toString(16);
    const g = (255 - parseInt(hex.slice(2, 4), 16)).toString(16);
    const b = (255 - parseInt(hex.slice(4, 6), 16)).toString(16);
    // pad each with zeros and return
    return `${r.padStart(2, '0')}${g.padStart(2, '0')}${b.padStart(2, '0')}`;
};
const getScriptUrls = () => {
    const scripts = document.getElementsByTagName('script');
    return Array.prototype.map.call(scripts, (script) => script.src).filter((script) => !!script);
};
const addNavigatorData = (data) => {
    Object.assign(data, {
        browser: browser_1.getBrowser(),
        browser_version: browser_1.getBrowserVersion(),
        language: navigator.language,
        platform: navigator.platform,
        userAgent: navigator.userAgent,
        url: location.href,
        scriptUrls: getScriptUrls().join('\n'),
    });
};
class Logger {
    constructor(module, subModule, baseData = {}) {
        this.module = module;
        this.subModule = subModule;
        this.baseData = baseData;
        this.moduleName = [module, subModule].filter(m => !!m).join(':');
        this.textColor = intToRGB(stringToHashInt(this.moduleName));
        this.backgroundColor = invertColor(this.textColor);
        if (subModule) {
            Object.assign(this.baseData, { subModule });
        }
    }
    logFunction(func, ...args) {
        let allowedModules;
        try {
            allowedModules = window.localStorage && JSON.parse(window.localStorage.getItem('log'));
        }
        catch (error) {
            allowedModules = [];
        }
        if (func !== 'error' && (!Array.isArray(allowedModules) || !allowedModules.includes(this.module))) {
            return;
        }
        window.console && window.console[func](`%c ${this.moduleName} `, `background: #${this.backgroundColor}; color: #${this.textColor}`, ...args);
    }
    log(...args) {
        this.logFunction('log', ...args);
    }
    log2(...args) {
        this.log(...args);
    }
    info(...args) {
        this.logFunction('info', ...args);
    }
    warn(...args) {
        this.logFunction('warn', ...args);
    }
    error(...args) {
        this.logFunction('error', ...args);
    }
    remote(level, message, data = {}, facility) {
        const payload = {
            facility: facility || this.module,
            message,
            data: Object.assign(Object.assign({}, data), this.baseData),
        };
        this[localLog[level]](payload);
        fetch_1.post(`/api/v1/logs/${level}`, payload, { cache: 'no-cache' }).catch((error) => {
            // eslint-disable-next-line @typescript-eslint/no-use-before-define
            selfLogger.warn('log.remote failed', error);
        });
    }
    logError(error, message, level = 'error', extraData = {}, facility) {
        var _a, _b;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const data = {};
        if (error instanceof ErrorEvent) {
            Object.assign(data, {
                error_message: (_a = error.error) === null || _a === void 0 ? void 0 : _a.message,
                file: error.filename,
                line: error.lineno,
                col: error.colno,
                stack: (_b = error.error) === null || _b === void 0 ? void 0 : _b.stack,
            });
        }
        else if (error instanceof Error) {
            Object.assign(data, {
                error_message: error.message,
                stack: error.stack,
            });
        }
        else {
            Object.assign(data, {
                error_message: error,
            });
        }
        addNavigatorData(data);
        Object.assign(data, extraData);
        this.remote(level, message || data.error_message, data, facility);
    }
}
const selfLogger = new Logger('logger');
exports.default = Logger;
