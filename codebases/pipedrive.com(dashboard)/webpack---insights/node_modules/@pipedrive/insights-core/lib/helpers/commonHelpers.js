"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBackgroundFilterType = exports.getTimezoneName = exports.getListFields = exports.getSegmentByFilterToUse = exports.getMeasureByStatsFieldKey = exports.getLabelFieldKey = void 0;
const types_1 = require("../types");
const constants_1 = require("../constants");
const dealsHelpers_1 = require("./dealsHelpers");
const activitiesHelpers_1 = require("./activitiesHelpers");
const mailsHelpers_1 = require("./mailsHelpers");
const private_1 = require("./private");
exports.getLabelFieldKey = (fieldKey) => {
    const labelSuffix = 'Label';
    return `${fieldKey}${labelSuffix}`;
};
exports.getMeasureByStatsFieldKey = (dataType, measureBy) => {
    switch (dataType) {
        case types_1.DataType.DEALS:
            return dealsHelpers_1.getMeasureByFilterType(measureBy);
        case types_1.DataType.ACTIVITIES:
            return activitiesHelpers_1.getMeasureByStatsFieldKey(measureBy);
        case types_1.DataType.MAILS:
            return mailsHelpers_1.getMeasureByStatsFieldKey();
        default:
            throw Error(`Could not find stats field key for dataType ${dataType}`);
    }
};
const getDefaultSegmentByFilter = (dataType) => {
    let defaultSegmentByFilter = constants_1.deals.DEFAULT_PIE_CHART_SEGMENT_BY;
    switch (dataType) {
        case types_1.DataType.ACTIVITIES:
            return (defaultSegmentByFilter = constants_1.activities.DEFAULT_PIE_CHART_SEGMENT_BY);
        default:
            return defaultSegmentByFilter;
    }
};
exports.getSegmentByFilterToUse = (chartType, dataType, segmentByFilterFromReport) => {
    const isPieChart = chartType === types_1.ChartType.PIE;
    const hasSelectedSegmentFilter = segmentByFilterFromReport !== 'none';
    const defaultSegmentBy = getDefaultSegmentByFilter(dataType);
    /* eslint-disable-next-line no-undefined */
    const customSegmentByFilter = isPieChart ? defaultSegmentBy : undefined;
    return hasSelectedSegmentFilter ? segmentByFilterFromReport : customSegmentByFilter;
};
exports.getListFields = (fields) => {
    return private_1.getFieldsObjectForQueryBuilder([...fields]);
};
exports.getTimezoneName = () => {
    return Intl.DateTimeFormat().resolvedOptions().timeZone;
};
exports.getBackgroundFilterType = (reportType) => {
    if (reportType === types_1.ReportType.DEALS_FUNNEL_CONVERSION) {
        return {
            filter: 'stageId',
            type: 'stage',
            operand: types_1.OperandType.IN,
        };
    }
    return null;
};
