"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTimePeriodDates = exports.gqlDateFormat = exports.dateFormat = exports.RollingPeriod = exports.RelativePeriod = exports.RelativeDate = void 0;
const moment_1 = __importDefault(require("moment"));
const types_1 = require("./types");
var RelativeDate;
(function (RelativeDate) {
    RelativeDate["YESTERDAY"] = "yesterday";
    RelativeDate["TODAY"] = "today";
    RelativeDate["TOMORROW"] = "tomorrow";
})(RelativeDate = exports.RelativeDate || (exports.RelativeDate = {}));
var RelativePeriod;
(function (RelativePeriod) {
    RelativePeriod["WEEK"] = "week";
    RelativePeriod["LAST_WEEK"] = "lastWeek";
    RelativePeriod["LAST_TWO_WEEKS"] = "lastTwoWeeks";
    RelativePeriod["MONTH"] = "month";
    RelativePeriod["LAST_MONTH"] = "lastMonth";
    RelativePeriod["QUARTER"] = "quarter";
    RelativePeriod["LAST_QUARTER"] = "lastQuarter";
    RelativePeriod["YEAR"] = "year";
    RelativePeriod["LAST_YEAR"] = "lastYear";
    RelativePeriod["NEXT_YEAR"] = "nextYear";
    RelativePeriod["NEXT_MONTH"] = "nextMonth";
    RelativePeriod["NEXT_WEEK"] = "nextWeek";
})(RelativePeriod = exports.RelativePeriod || (exports.RelativePeriod = {}));
var RollingPeriod;
(function (RollingPeriod) {
    RollingPeriod["PAST_7_DAYS"] = "pastSevenDays";
    RollingPeriod["PAST_2_WEEKS"] = "pastTwoWeeks";
    RollingPeriod["NEXT_7_DAYS"] = "nextSevenDays";
    RollingPeriod["NEXT_2_WEEKS"] = "nextTwoWeeks";
    RollingPeriod["PAST_1_MONTH"] = "pastOneMonth";
    RollingPeriod["PAST_3_MONTHS"] = "pastThreeMonths";
    RollingPeriod["PAST_6_MONTHS"] = "pastSixMonths";
    RollingPeriod["PAST_12_MONTHS"] = "pastTwelveMonths";
    RollingPeriod["NEXT_MONTH"] = "nextRollingMonth";
    RollingPeriod["NEXT_3_MONTHS"] = "nextThreeMonths";
    RollingPeriod["NEXT_6_MONTHS"] = "nextSixMonths";
    RollingPeriod["NEXT_12_MONTHS"] = "nextTwelveMonths";
})(RollingPeriod = exports.RollingPeriod || (exports.RollingPeriod = {}));
exports.dateFormat = 'YYYY-MM-DD';
exports.gqlDateFormat = 'yyyy-MM-dd';
const getCurrentIntervalPeriod = (today, timeLimit) => {
    return {
        startDate: today.clone().startOf(timeLimit),
        endDate: today.clone().endOf(timeLimit),
    };
};
const getPreviousIntervalPeriod = (today, duration, timeLimit) => {
    return {
        startDate: today.clone().subtract(1, duration).startOf(timeLimit),
        endDate: today.clone().subtract(1, duration).endOf(timeLimit),
    };
};
const getNextIntervalPeriod = (today, duration, timeLimit) => {
    return {
        startDate: today.clone().add(1, duration).startOf(timeLimit),
        endDate: today.clone().add(1, duration).endOf(timeLimit),
    };
};
const getFutureMonthPeriod = (today, numberOfMonths) => {
    return {
        startDate: today.clone(),
        endDate: today.clone().add(numberOfMonths, 'months'),
    };
};
const getPastMonthPeriod = (today, numberOfMonths) => {
    return {
        startDate: today.clone().subtract(numberOfMonths, 'months'),
        endDate: today.clone(),
    };
};
const getFutureWeekPeriod = (today, numberOfWeeks) => {
    return {
        startDate: today.clone(),
        endDate: today.clone().add(numberOfWeeks, 'weeks'),
    };
};
const getPastWeekPeriod = (today, numberOfWeeks) => {
    return {
        startDate: today.clone().subtract(numberOfWeeks, 'weeks'),
        endDate: today.clone(),
    };
};
const periods = {
    [RelativeDate.TODAY]: (today = moment_1.default()) => {
        return {
            startDate: today.clone(),
            endDate: today.clone(),
        };
    },
    [RelativeDate.YESTERDAY]: (today = moment_1.default()) => {
        return {
            startDate: today.clone().subtract(1, 'days'),
            endDate: today.clone().subtract(1, 'days'),
        };
    },
    [RelativeDate.TOMORROW]: (today = moment_1.default()) => {
        return {
            startDate: today.clone().add(1, 'days'),
            endDate: today.clone().add(1, 'days'),
        };
    },
    [RelativePeriod.LAST_TWO_WEEKS]: (today = moment_1.default()) => {
        return {
            startDate: today.clone().subtract(14, 'days').startOf('week'),
            endDate: today.clone().subtract(7, 'days').endOf('week'),
        };
    },
    [RelativePeriod.WEEK]: (today = moment_1.default()) => getCurrentIntervalPeriod(today, 'week'),
    [RelativePeriod.LAST_WEEK]: (today = moment_1.default()) => getPreviousIntervalPeriod(today, 'weeks', 'week'),
    [RelativePeriod.MONTH]: (today = moment_1.default()) => getCurrentIntervalPeriod(today, 'month'),
    [RelativePeriod.LAST_MONTH]: (today = moment_1.default()) => getPreviousIntervalPeriod(today, 'months', 'month'),
    [RelativePeriod.QUARTER]: (today = moment_1.default()) => getCurrentIntervalPeriod(today, 'quarter'),
    [RelativePeriod.LAST_QUARTER]: (today = moment_1.default()) => getPreviousIntervalPeriod(today, 'quarters', 'quarter'),
    [RelativePeriod.YEAR]: (today = moment_1.default()) => getCurrentIntervalPeriod(today, 'year'),
    [RelativePeriod.LAST_YEAR]: (today = moment_1.default()) => getPreviousIntervalPeriod(today, 'year', 'year'),
    [RelativePeriod.NEXT_YEAR]: (today = moment_1.default()) => getNextIntervalPeriod(today, 'year', 'year'),
    [RelativePeriod.NEXT_MONTH]: (today = moment_1.default()) => getNextIntervalPeriod(today, 'months', 'month'),
    [RelativePeriod.NEXT_WEEK]: (today = moment_1.default()) => getNextIntervalPeriod(today, 'weeks', 'week'),
    [RollingPeriod.PAST_7_DAYS]: (today = moment_1.default()) => getPastWeekPeriod(today, 1),
    [RollingPeriod.PAST_2_WEEKS]: (today = moment_1.default()) => getPastWeekPeriod(today, 2),
    [RollingPeriod.NEXT_7_DAYS]: (today = moment_1.default()) => getFutureWeekPeriod(today, 1),
    [RollingPeriod.NEXT_2_WEEKS]: (today = moment_1.default()) => getFutureWeekPeriod(today, 2),
    [RollingPeriod.NEXT_MONTH]: (today = moment_1.default()) => getFutureMonthPeriod(today, 1),
    [RollingPeriod.NEXT_3_MONTHS]: (today = moment_1.default()) => getFutureMonthPeriod(today, 3),
    [RollingPeriod.NEXT_6_MONTHS]: (today = moment_1.default()) => getFutureMonthPeriod(today, 6),
    [RollingPeriod.NEXT_12_MONTHS]: (today = moment_1.default()) => getFutureMonthPeriod(today, 12),
    [RollingPeriod.PAST_1_MONTH]: (today = moment_1.default()) => getPastMonthPeriod(today, 1),
    [RollingPeriod.PAST_3_MONTHS]: (today = moment_1.default()) => getPastMonthPeriod(today, 3),
    [RollingPeriod.PAST_6_MONTHS]: (today = moment_1.default()) => getPastMonthPeriod(today, 6),
    [RollingPeriod.PAST_12_MONTHS]: (today = moment_1.default()) => getPastMonthPeriod(today, 12),
};
exports.getTimePeriodDates = (period, saving = false, today) => {
    if (period === 'current') {
        return null;
    }
    const dates = periods[period](today);
    return [
        {
            name: types_1.OperandType.FROM,
            defaultValue: saving ? null : dates.startDate.locale('en').format(exports.dateFormat),
        },
        {
            name: types_1.OperandType.TO,
            defaultValue: saving ? null : dates.endDate.locale('en').format(exports.dateFormat),
        },
        {
            name: types_1.OperandType.FORMAT,
            defaultValue: exports.gqlDateFormat,
        },
    ];
};
