"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const unifiedQueryBuilderHelpers_1 = require("./unifiedQueryBuilderHelpers");
const unifiedTypes_1 = require("../../types/unifiedTypes");
class UnifiedQueryFormatter {
    formatRootQuery(rootQueryParameters, timeZone) {
        if (!rootQueryParameters) {
            return '';
        }
        const { rootQueryField } = rootQueryParameters;
        const rootQueryArguments = this.getFormattedRootArguments(rootQueryParameters, timeZone);
        return `${rootQueryField}${rootQueryArguments}`;
    }
    formatReportQuery(reportQueryParameters) {
        if (!reportQueryParameters) {
            return '';
        }
        const { reportStatisticsFields, reportArguments } = reportQueryParameters;
        const formattedReportArguments = this.getFormattedReportArguments(reportArguments);
        const formattedReportStatisticsFields = this.getFormattedReportStatisticsFields(reportStatisticsFields);
        return `report${formattedReportArguments} {
			data {
				${formattedReportStatisticsFields}
			}
			${this.getFormattedPaginationMeta()}
		}`;
    }
    formatListQuery(listQueryParameters) {
        if (!listQueryParameters) {
            return '';
        }
        const { listFields, listArguments } = listQueryParameters;
        const groupedFields = this.getGroupedListFields(listFields);
        const { defaultFields, customFields } = groupedFields;
        const formattedCustomFields = this.getFormattedCustomFields(customFields);
        const formattedListArguments = this.getFormattedListArguments(listArguments);
        return `list${formattedListArguments} {
			data {
				${defaultFields}
				${formattedCustomFields}
			}
			${this.getFormattedPaginationMeta()}
		}`;
    }
    formatExportListQuery(exportListQueryParameters) {
        if (!exportListQueryParameters) {
            return '';
        }
        const formattedListArguments = this.getFormattedExportListArguments(exportListQueryParameters);
        return `exportList${formattedListArguments} { id totalItems }`;
    }
    formatFieldsQuery(fieldsQueryParams) {
        if (!fieldsQueryParams.length) {
            return '';
        }
        const fieldsOptions = [];
        if (fieldsQueryParams.includes(unifiedTypes_1.UnifiedApiFieldsField.FILTER)) {
            fieldsOptions.push(`filter {...fieldFields...filterFieldFields }`);
        }
        if (fieldsQueryParams.includes(unifiedTypes_1.UnifiedApiFieldsField.MEASURE_BY)) {
            fieldsOptions.push(`measureBy {...fieldFields }`);
        }
        if (fieldsQueryParams.includes(unifiedTypes_1.UnifiedApiFieldsField.GROUP_BY)) {
            fieldsOptions.push(`groupBy {...fieldFields ...groupByFieldFields }`);
        }
        if (fieldsQueryParams.includes(unifiedTypes_1.UnifiedApiFieldsField.SEGMENT_BY)) {
            fieldsOptions.push(`groupBy {...fieldFields }`);
        }
        return `fields { ${fieldsOptions} }`;
    }
    getFormattedRootArguments(rootQueryParameters, timeZone) {
        const { filters, groupBy, segmentBy, measureBy, currency, weighted } = rootQueryParameters;
        const formattedTimeZone = this.formatTimeZone(timeZone);
        const formattedArguments = [formattedTimeZone];
        if (filters === null || filters === void 0 ? void 0 : filters.length) {
            formattedArguments.push(this.formatFilters(filters));
        }
        if (groupBy) {
            formattedArguments.push(this.formatGroupBy(groupBy));
        }
        if (segmentBy) {
            formattedArguments.push(this.formatSegmentBy(segmentBy));
        }
        if (measureBy) {
            formattedArguments.push(this.formatMeasureBy(measureBy));
        }
        if (currency) {
            formattedArguments.push(this.formatCurrency(currency));
        }
        if (weighted) {
            formattedArguments.push(this.formatWeighted(weighted));
        }
        return `(${formattedArguments.join(', ')})`;
    }
    formatFilters(filters) {
        if (!filters.length) {
            return '';
        }
        const formatSingleFilter = (filter) => Object.keys(filter).map((key) => `${key}: ${JSON.stringify(filter[key])}`);
        const formattedFilters = filters.map((filter) => `{${formatSingleFilter(filter)}}`);
        return `filter: [${formattedFilters}]`;
    }
    formatGroupBy(groupBy) {
        if (!groupBy.field) {
            return '';
        }
        const { field, settings } = groupBy;
        const formattedField = `field: "${field}"`;
        const groupingOptions = [formattedField];
        if (settings === null || settings === void 0 ? void 0 : settings.date) {
            const { interval } = settings.date;
            const formattedInterval = interval ? `interval: ${interval}` : '';
            groupingOptions.push(`settings: { date: { ${formattedInterval} } }`);
        }
        return `groupBy: { ${groupingOptions.join(', ')} }`;
    }
    formatSegmentBy(segmentBy) {
        if (!segmentBy.field) {
            return '';
        }
        const { field, size } = segmentBy;
        const formattedField = `field: "${field}"`;
        const segmentOptions = [formattedField];
        if (size) {
            segmentOptions.push(`size: ${size}`);
        }
        return `segmentBy: { ${segmentOptions.join(', ')} }`;
    }
    formatMeasureBy(measureBy) {
        if (!measureBy) {
            return '';
        }
        return `measureBy: "${measureBy}"`;
    }
    formatTimeZone(timeZone) {
        if (!timeZone) {
            return '';
        }
        return `timeZone: "${timeZone}"`;
    }
    formatCurrency(currency) {
        if (!currency) {
            return '';
        }
        return `currency: "${currency}"`;
    }
    formatWeighted(weighted) {
        return `weighted: ${!!weighted}`;
    }
    getFormattedReportArguments(reportArguments) {
        if (!reportArguments) {
            return '';
        }
        const { pagination, sort } = reportArguments;
        const reportOptions = [];
        if (pagination) {
            reportOptions.push(this.formatPagination(pagination));
        }
        if (sort) {
            reportOptions.push(this.formatReportSorting(sort));
        }
        return `(${reportOptions.join(', ')})`;
    }
    getFormattedPaginationMeta() {
        return `meta { currentPage totalPages hasNextPage }`;
    }
    getFormattedReportStatisticsFields(statisticsFields) {
        const group = `group { id, label, field, isOther }`;
        const segment = `segment { id, label, field, isOther }`;
        return [...statisticsFields, group, segment];
    }
    getSortingOptions(options) {
        const sortingOptions = [];
        const { field, order } = options;
        if (field) {
            sortingOptions.push(`field: "${field}"`);
        }
        if (order) {
            sortingOptions.push(`order: ${order}`);
        }
        return sortingOptions;
    }
    formatReportSorting(sort) {
        if (!sort) {
            return '';
        }
        const { groupBy, segmentBy } = sort;
        const sortingOptions = [];
        if (groupBy) {
            const groupByOptions = this.getSortingOptions(groupBy);
            sortingOptions.push(`groupBy: { ${groupByOptions.join(', ')} }`);
        }
        if (segmentBy) {
            const segmentByOptions = this.getSortingOptions(segmentBy);
            sortingOptions.push(`segmentBy: { ${segmentByOptions.join(', ')} }`);
        }
        return `sort: { ${sortingOptions.join(', ')} }`;
    }
    formatSorting(sort) {
        if (!sort) {
            return '';
        }
        const sortingOptions = this.getSortingOptions(sort);
        return `sort: { ${sortingOptions.join(', ')} }`;
    }
    getGroupedListFields(listFields) {
        const allFields = Object.keys(listFields);
        return allFields.reduce((fields, field) => {
            if (unifiedQueryBuilderHelpers_1.isCustomField(field)) {
                fields.customFields.push(field);
            }
            else {
                fields.defaultFields.push(field);
            }
            return fields;
        }, { defaultFields: [], customFields: [] });
    }
    getFormattedCustomFields(fields) {
        if (!fields.length) {
            return '';
        }
        const formattedCustomFields = fields.map((field) => JSON.stringify(field));
        return `customFields(ids: [${formattedCustomFields}]) {...customFieldFields }`;
    }
    getFormattedListArguments(listArguments) {
        if (!listArguments) {
            return '';
        }
        const { pagination, sort } = listArguments;
        const listOptions = [];
        if (pagination) {
            listOptions.push(this.formatPagination(pagination));
        }
        if (sort) {
            listOptions.push(this.formatSorting(sort));
        }
        return `(${listOptions.join(', ')})`;
    }
    getListFields(listFields) {
        return Object.keys(listFields);
    }
    getFormattedListFields(listFields) {
        return this.getListFields(listFields).map((item) => JSON.stringify(item));
    }
    getFormattedExportListArguments(exportListQueryParameters) {
        if (!exportListQueryParameters) {
            return '';
        }
        const { format, fields } = exportListQueryParameters;
        const exportListOptions = [];
        if (format) {
            exportListOptions.push(`format: "${format}"`);
        }
        if (fields) {
            exportListOptions.push(`fields: [${this.getFormattedListFields(fields)}]`);
        }
        return `(${exportListOptions.join(', ')})`;
    }
    formatPagination(pagination) {
        if (!pagination) {
            return '';
        }
        const { size, page } = pagination;
        const paginationOptions = [];
        if (size) {
            paginationOptions.push(`size: ${pagination.size}`);
        }
        /**
         * As pagination starts from 0, it's
         * important to only check null or undefined
         */
        if (!lodash_1.isNil(page)) {
            paginationOptions.push(`page: ${pagination.page}`);
        }
        return `pagination: { ${paginationOptions.join(', ')} }`;
    }
}
exports.default = UnifiedQueryFormatter;
