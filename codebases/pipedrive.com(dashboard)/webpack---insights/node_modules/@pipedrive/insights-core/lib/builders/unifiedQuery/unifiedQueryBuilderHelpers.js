"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFilters = exports.getSegmentBy = exports.getGroupBy = exports.hasCustomFields = exports.isCustomField = void 0;
const lodash_1 = require("lodash");
exports.isCustomField = (fieldId) => !!(fieldId === null || fieldId === void 0 ? void 0 : fieldId.match(/^[0-9a-f]{40}$/));
exports.hasCustomFields = (fields) => Object.keys(fields).some((field) => exports.isCustomField(field));
exports.getGroupBy = ({ interval, groupBy }) => {
    if (!groupBy) {
        return null;
    }
    return Object.assign({ field: groupBy }, (interval && {
        settings: {
            date: { interval },
        },
    }));
};
exports.getSegmentBy = ({ segmentBy, segmentSize }) => {
    if (!segmentBy) {
        return null;
    }
    return Object.assign({ field: segmentBy }, (segmentSize && { size: segmentSize }));
};
const isOperandValuePresent = (value) => {
    /**
     * Operand value can also be boolean, so it's
     * important to only check null or undefined
     */
    return !lodash_1.isNil(value);
};
const getFilterOperands = (filter) => {
    return filter.operands.reduce((operands, operand) => {
        const hasOperandValue = isOperandValuePresent(operand.defaultValue);
        /**
         * Format should be excluded from operands as
         * Unified API filters do not support 'format' field
         */
        if (hasOperandValue && operand.name !== 'format') {
            operands[operand.name] = operand.defaultValue;
        }
        return operands;
    }, {});
};
exports.getFilters = (filters) => {
    return filters === null || filters === void 0 ? void 0 : filters.map((filter) => {
        const operands = getFilterOperands(filter);
        return Object.assign({ field: filter.filter }, operands);
    });
};
