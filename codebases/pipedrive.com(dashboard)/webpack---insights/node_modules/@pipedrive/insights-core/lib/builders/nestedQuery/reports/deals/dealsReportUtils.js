"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getReportArguments = exports.getGroupByWithTimeInterval = void 0;
const types_1 = require("../../../../types");
const constants_1 = require("../../../../constants");
exports.getGroupByWithTimeInterval = ({ interval, filter, timeInterval, }) => {
    if (interval && filter) {
        return {
            filter,
            operands: timeInterval,
        };
    }
    return filter;
};
exports.getReportArguments = ({ defaultCurrency, isWeightedValue, isMeasureByCustomField, measureByFilter, reportType, timeZone, isCumulative, }) => {
    const args = {};
    if (constants_1.deals.REPORTS_REQUIRING_PAGE_AND_SORT_ARGS.includes(reportType)) {
        args.sort = '{ by: $sortBy, order: $sortOrder }';
        args.page = '{ lastPage: $lastPage, size: $chartDataSize, segmentSize: $segmentSize }';
    }
    if (constants_1.deals.REPORTS_REQUIRING_CONVERTTO.includes(reportType)) {
        args.convertTo = `"${defaultCurrency}"`;
    }
    if (timeZone) {
        args.timeZone = `"${timeZone}"`;
    }
    if (isWeightedValue) {
        args.weighted = true;
    }
    if (isMeasureByCustomField ||
        [types_1.Deals.MeasureByType.PRODUCTS_AMOUNT, types_1.Deals.MeasureByType.PRODUCTS_SUM]
            .includes(measureByFilter)) {
        args.field = measureByFilter;
    }
    if (constants_1.deals.REPORTS_REQUIRING_IS_CUMULATIVE_ARG.includes(reportType)) {
        args.isCumulative = isCumulative;
    }
    return args;
};
