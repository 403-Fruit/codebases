"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const graphql = __importStar(require("graphql"));
const helpers_1 = require("../../helpers");
const unifiedQueryFormatter_1 = __importDefault(require("./unifiedQueryFormatter"));
class UnifiedQueryBuilder {
    constructor(dataType, timeZone) {
        this.timeZone = helpers_1.getTimezoneName();
        this.fragments = [];
        this.queryFormatter = new unifiedQueryFormatter_1.default();
        this.dataType = dataType;
        this.timeZone = timeZone;
    }
    addRootQuery(rootQueryParameters) {
        const { rootQueryField } = rootQueryParameters;
        if (!rootQueryField) {
            throw Error('Parameter "rootQueryField" is required');
        }
        this.rootQueryParameters = rootQueryParameters;
        return this;
    }
    addReportQuery(reportQueryParameters) {
        const { reportStatisticsFields } = reportQueryParameters;
        if (!(reportStatisticsFields === null || reportStatisticsFields === void 0 ? void 0 : reportStatisticsFields.length)) {
            throw Error('At least one report field is required');
        }
        this.reportQueryParameters = reportQueryParameters;
        return this;
    }
    addListQuery(listQueryParameters) {
        this.listQueryParameters = listQueryParameters;
        if (!(listQueryParameters === null || listQueryParameters === void 0 ? void 0 : listQueryParameters.listFields)) {
            throw Error('At least one list field is required');
        }
        return this;
    }
    addExportListQuery(exportListQueryParameters) {
        this.exportListQueryParameters = exportListQueryParameters;
        return this;
    }
    addFieldQuery(fieldQueryParams) {
        this.fieldsQueryParameters = fieldQueryParams;
        return this;
    }
    addFragment(fragment) {
        this.fragments.push(fragment);
        return this;
    }
    build() {
        let rootQuery;
        const subQueries = [];
        if (this.rootQueryParameters) {
            rootQuery = this.queryFormatter.formatRootQuery(this.rootQueryParameters, this.timeZone);
        }
        if (this.reportQueryParameters) {
            const formattedReportQuery = this.queryFormatter.formatReportQuery(this.reportQueryParameters);
            subQueries.push(formattedReportQuery);
        }
        if (this.listQueryParameters) {
            const formattedListQuery = this.queryFormatter.formatListQuery(this.listQueryParameters);
            subQueries.push(formattedListQuery);
        }
        if (this.exportListQueryParameters) {
            const formattedExportListQuery = this.queryFormatter.formatExportListQuery(this.exportListQueryParameters);
            subQueries.push(formattedExportListQuery);
        }
        if (this.fieldsQueryParameters) {
            const formattedFieldsQuery = this.queryFormatter.formatFieldsQuery(this.fieldsQueryParameters);
            subQueries.push(formattedFieldsQuery);
        }
        if (!rootQuery) {
            throw Error('Root query field is required');
        }
        if (!subQueries.length) {
            throw Error('At least one sub-query is required');
        }
        const query = `query {
			${this.dataType} {
				${rootQuery} {
					${subQueries.join(' ')}
				}
			}
		}
		${this.fragments.join(' ')}`;
        try {
            const ast = graphql.parse(query);
            return graphql.print(ast);
        }
        catch (error) {
            throw Error(`Query from query builder is invalid: ${error.message}`);
        }
    }
}
exports.default = UnifiedQueryBuilder;
