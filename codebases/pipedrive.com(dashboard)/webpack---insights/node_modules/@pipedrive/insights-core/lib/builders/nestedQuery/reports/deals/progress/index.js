"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("../../../../../types");
const constants_1 = require("../../../../../constants");
const dealsReportUtils_1 = require("../dealsReportUtils");
const dealsHelpers_1 = require("../../../../../helpers/dealsHelpers");
const getProgressQueries = ({ groupBy, timeInterval, segmentByFilter, args, }) => {
    // dealStageLogAddTime is handled with input not groupBy and therefore acts differently from rest of the grouping
    // in FE it is shown as regular groupby but not in the API
    const DEAL_STAGE_LOG_DATE = 'dealStageLogAddTime';
    const groupByIsDealStageLogDate = groupBy.filter === DEAL_STAGE_LOG_DATE;
    const progressFields = ['stageId', ...constants_1.deals.STATS_FIELDS];
    const queries = [];
    let progressArgs = args;
    if (groupBy.filter) {
        if (groupByIsDealStageLogDate) {
            progressFields.push(DEAL_STAGE_LOG_DATE);
            progressArgs = Object.assign({ overTime: timeInterval[0].defaultValue }, args);
        }
        else {
            progressFields.push(groupBy.filter);
        }
    }
    if (segmentByFilter) {
        progressFields.push(segmentByFilter);
    }
    const progressStats = dealsHelpers_1.prepareForQueryBuilder(progressFields);
    const groupingsHandledByBE = [DEAL_STAGE_LOG_DATE, constants_1.deals.DEFAULT_PROGRESS_GROUPING_HANDLED_BY_API];
    const progress = {
        field: types_1.ReportType.DEALS_PROGRESS,
        args: progressArgs,
        fields: {
            data: progressStats,
            meta: dealsHelpers_1.prepareForQueryBuilder(constants_1.deals.METADATA_FIELDS),
        },
    };
    const shouldAddSegment = segmentByFilter && groupBy.filter === constants_1.deals.DEFAULT_PROGRESS_GROUPING_HANDLED_BY_API;
    const shouldAddGroupBy = groupBy.filter && !groupingsHandledByBE.includes(groupBy.filter);
    if (shouldAddSegment) {
        queries.push(types_1.Deals.QueryFilterField.GROUP_BY, segmentByFilter);
    }
    if (shouldAddGroupBy) {
        queries.push(types_1.Deals.QueryFilterField.GROUP_BY, dealsReportUtils_1.getGroupByWithTimeInterval(groupBy));
    }
    queries.push(progress);
    return queries;
};
exports.default = getProgressQueries;
