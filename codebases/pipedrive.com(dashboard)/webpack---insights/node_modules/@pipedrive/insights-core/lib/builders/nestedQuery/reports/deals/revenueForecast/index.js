"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("../../../../../types");
const constants_1 = require("../../../../../constants");
const dealsReportUtils_1 = require("../dealsReportUtils");
const dealsHelpers_1 = require("../../../../../helpers/dealsHelpers");
const getRevenueForecastQueries = ({ interval, groupByFilter, timeInterval, segmentByFilter, dataFields, chartType, args, }) => {
    const shouldAddGroupByFilterToQuery = !constants_1.deals.CHART_TYPES_WITHOUT_GROUP_BY.includes(chartType);
    const shouldAddSegmentByFilterToQuery = !constants_1.deals.CHART_TYPES_WITHOUT_SEGMENT_BY.includes(chartType);
    const queries = [];
    if (shouldAddGroupByFilterToQuery) {
        const groupBy = dealsReportUtils_1.getGroupByWithTimeInterval({
            interval,
            filter: groupByFilter,
            timeInterval,
        });
        queries.push(types_1.Deals.QueryFilterField.GROUP_BY, groupBy);
    }
    if (shouldAddSegmentByFilterToQuery) {
        queries.push(types_1.Deals.QueryFilterField.GROUP_BY, segmentByFilter);
    }
    queries.push({
        field: types_1.Deals.QueryReportTypeField.REVENUE_FORECAST,
        args,
        fields: {
            data: dataFields,
            meta: dealsHelpers_1.prepareForQueryBuilder(constants_1.deals.METADATA_FIELDS),
        },
    });
    return queries;
};
exports.default = getRevenueForecastQueries;
