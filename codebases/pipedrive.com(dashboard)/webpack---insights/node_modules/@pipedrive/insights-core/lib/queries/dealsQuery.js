"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const nestedQueryBuilder_1 = __importDefault(require("../builders/nestedQuery/nestedQueryBuilder"));
const nestedQueryBuilderUtils_1 = require("../builders/nestedQuery/nestedQueryBuilderUtils");
const types_1 = require("../types");
const dealsReportUtils_1 = require("../builders/nestedQuery/reports/deals/dealsReportUtils");
const reports = __importStar(require("../builders/nestedQuery/reports/deals"));
const helpers_1 = require("../helpers");
const unifiedApiConstants_1 = require("../constants/unifiedApiConstants");
const unifiedDealsQuery_1 = require("./unifiedQueries/unifiedDealsQuery");
const dealsHelpers_1 = require("../helpers/dealsHelpers");
const queryFilterInTheBackground = (appliedFilters, reportType, value) => {
    const additionalFilter = dealsHelpers_1.createFilterForSpecialReportTypes(reportType, value);
    if (!additionalFilter) {
        return appliedFilters;
    }
    const modifiedFilters = [...appliedFilters];
    const additionalFilterIndex = appliedFilters.findIndex((appliedFilter) => appliedFilter.filter === additionalFilter.filter);
    if (additionalFilterIndex >= 0) {
        modifiedFilters.splice(additionalFilterIndex, 1);
        modifiedFilters.push(additionalFilter);
    }
    else {
        modifiedFilters.push(additionalFilter);
    }
    return modifiedFilters;
};
const getFilterQueries = (filters, reportType, value) => {
    const filterQueries = [];
    const filtersToQuery = value ? queryFilterInTheBackground(filters, reportType, value) : filters;
    filtersToQuery.forEach((filter) => {
        filterQueries.push(types_1.Deals.QueryFilterField.FILTER, filter);
    });
    return filterQueries;
};
const getListQueryArgs = (timeZone) => {
    const args = {
        from: '$from',
        size: '$size',
    };
    if (timeZone) {
        args.timeZone = `"${timeZone}"`;
    }
    return args;
};
const getExportListQueryArgs = (timeZone) => {
    const args = {
        format: '$format',
        fields: '$fields',
    };
    if (timeZone) {
        args.timeZone = `"${timeZone}"`;
    }
    return args;
};
// eslint-disable-next-line complexity
const generateDealsQuery = ({ fields, shouldQueryList, shouldQueryExportList, shouldQueryChartData, reportType, chartType, interval, groupByFilter, timeInterval, segmentByFilter, measureByFilter, stats, filterByFilter, 
// deal specific fields
defaultCurrency, isWeightedValue, isMeasureByCustomField, setGroupByFilter, multiSelectFilter, timeZone, isCumulative, 
/**
 * `unifiedParams` is used only for the unified query builder,
 * once all report types are supported by the Unified API,
 * we can pass the props difectly and remove all other props above
 */
unifiedParams, getPipelineStages, }) => {
    if (unifiedApiConstants_1.REPORTS_MIGRATED_TO_UNIFIED_API.includes(reportType) && !lodash_1.isEmpty(unifiedParams)) {
        return unifiedDealsQuery_1.generateUnifiedDealsQuery(Object.assign({}, unifiedParams));
    }
    const queryVariables = nestedQueryBuilderUtils_1.getQueryVariables({
        shouldQueryList,
        shouldQueryExportList,
        shouldQueryChartData,
        reportType,
    });
    const queryBuilder = new nestedQueryBuilder_1.default(types_1.DataType.DEALS, queryVariables);
    const additionalFilterValue = dealsHelpers_1.getBackgroundFilterValue({
        reportType,
        filterByFilter,
        multiSelectFilter,
        getPipelineStages,
    });
    const queryFilters = {
        [types_1.ReportType.DEALS_DURATION]: () => getFilterQueries(filterByFilter, reportType),
        [types_1.ReportType.DEALS_RECURRING_REVENUE_MOVEMENT]: () => getFilterQueries(filterByFilter, reportType),
        [types_1.ReportType.DEALS_RECURRING_REVENUE]: () => getFilterQueries(filterByFilter, reportType),
        [types_1.ReportType.DEALS_STATS]: () => getFilterQueries(filterByFilter, reportType),
        [types_1.ReportType.DEALS_REVENUE_FORECAST]: () => getFilterQueries(filterByFilter, reportType),
        [types_1.ReportType.DEALS_PROGRESS]: () => getFilterQueries(filterByFilter, reportType),
        [types_1.ReportType.DEALS_CONVERSION_OVERALL]: () => getFilterQueries(filterByFilter, reportType),
        [types_1.ReportType.DEALS_FUNNEL_CONVERSION]: () => getFilterQueries(filterByFilter, reportType, additionalFilterValue),
    };
    queryBuilder.add(queryFilters[reportType]());
    timeZone = timeZone || helpers_1.getTimezoneName();
    if (shouldQueryList) {
        queryBuilder.add({
            field: types_1.Deals.QueryReportTypeField.LIST,
            args: getListQueryArgs(timeZone),
            fields,
        });
    }
    if (shouldQueryExportList) {
        queryBuilder.add({
            field: types_1.Deals.QueryReportTypeField.EXPORT_LIST,
            args: getExportListQueryArgs(timeZone),
            fields,
        });
    }
    if (shouldQueryChartData) {
        const reportArguments = dealsReportUtils_1.getReportArguments({
            defaultCurrency,
            isWeightedValue,
            isMeasureByCustomField,
            measureByFilter,
            reportType,
            timeZone,
            isCumulative,
        });
        const groupBy = {
            interval,
            filter: groupByFilter,
            timeInterval,
        };
        const reportQueries = {
            [types_1.ReportType.DEALS_CONVERSION_OVERALL]: () => reports.getOverallConversionQueries({
                groupByFilter: groupBy,
                args: reportArguments,
                chartType,
            }),
            [types_1.ReportType.DEALS_FUNNEL_CONVERSION]: () => reports.getFunnelConversionQuery(reportArguments, multiSelectFilter),
            [types_1.ReportType.DEALS_PROGRESS]: () => reports.getProgressQueries({
                groupBy,
                timeInterval,
                segmentByFilter,
                args: reportArguments,
            }),
            [types_1.ReportType.DEALS_REVENUE_FORECAST]: () => reports.getRevenueForecastQueries({
                interval,
                groupByFilter,
                timeInterval,
                segmentByFilter,
                dataFields: stats,
                args: reportArguments,
                chartType,
            }),
            [types_1.ReportType.DEALS_STATS]: () => reports.getStatsQueries({
                interval,
                groupByFilter,
                timeInterval,
                segmentByFilter,
                stats,
                chartType,
                setGroupByFilter,
                args: reportArguments,
            }),
            [types_1.ReportType.DEALS_RECURRING_REVENUE]: () => reports.getRevenueQuery(interval, reportArguments),
            [types_1.ReportType.DEALS_RECURRING_REVENUE_MOVEMENT]: () => reports.getRevenueMovementQuery(interval, reportArguments),
            [types_1.ReportType.DEALS_DURATION]: () => reports.getDurationQueries(groupBy, segmentByFilter, reportArguments),
        };
        const report = reportQueries[reportType];
        if (report) {
            queryBuilder.add(report());
        }
    }
    return queryBuilder.build();
};
exports.default = generateDealsQuery;
