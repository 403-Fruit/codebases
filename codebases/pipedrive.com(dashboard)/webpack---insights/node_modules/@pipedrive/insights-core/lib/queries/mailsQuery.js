"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const types_1 = require("../types");
const mailsConstants_1 = require("../constants/mailsConstants");
const private_1 = require("../helpers/private");
const flatQueryBuilder_1 = __importDefault(require("../builders/flatQuery/flatQueryBuilder"));
/**
 * @param {object} fields requested fields in format { fieldName: true, anotherFieldName: true }
 * @param {boolean} shouldQueryList whether table data should be fetched
 * @param {boolean} shouldQueryChartData
 * @param {string} reportType
 * @param {string} chartType
 * @param interval
 * @param {string} groupByFilter field name to group by
 * @param {string} segmentByFilter field name to segment by (secondary groupBy)
 * @param {string} measureByFilter field name by which to create the report
 * @param {object} stats similar to fields object for report specific fields
 * @param {array} filterByFilter applied filters in format [[
                {
                    filter: 'field_name',
                    operands: [
                        {
                            defaultValue: 1,
                            name: 'isExactly',
                        },
                    ],
                },
            ], ...]
 * @return string graphql query
 */
const generateMailsQuery = ({ fields, shouldQueryList, shouldQueryChartData, reportType, interval, groupByFilter, segmentByFilter, measureByFilter, stats, filterByFilter, chartType, timeZone, }) => {
    const intervalToUse = lodash_1.isString(interval) ? interval : '';
    const queryBuilder = new flatQueryBuilder_1.default(types_1.DataType.MAILS, mailsConstants_1.ENUM_FIELDS);
    const reportTypeToUse = reportType === types_1.ReportType.MAILS_STATS ? 'stats' : reportType;
    const listFieldsWithLabelFields = fields
        ? private_1.getFieldsWithLabelFields(Object.keys(fields), mailsConstants_1.FIELDS_WITH_LABELS)
        : [];
    const statsFieldsWithLabelFields = stats
        ? private_1.getFieldsWithLabelFields(Object.keys(stats), mailsConstants_1.FIELDS_WITH_LABELS)
        : [];
    const query = queryBuilder
        .setShouldQueryList(shouldQueryList)
        .setShouldQueryChart(shouldQueryChartData)
        .setFilters(filterByFilter)
        .setMeasureBy(measureByFilter)
        .setTimeZone(timeZone);
    if (!mailsConstants_1.CHART_TYPES_WITHOUT_GROUP_BY.includes(chartType)) {
        query.setGroupBy(groupByFilter, intervalToUse);
    }
    if (!mailsConstants_1.CHART_TYPES_WITHOUT_SEGMENT_BY.includes(chartType)) {
        query.setSegmentBy(segmentByFilter);
    }
    return query.build(reportTypeToUse, listFieldsWithLabelFields, statsFieldsWithLabelFields);
};
exports.default = generateMailsQuery;
