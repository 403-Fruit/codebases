var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as url from "url";
import { BadCredentialsError, ChallengeRequiredError, HttpRequestError, StatusCode, UnauthorizedError, UserIsCredentialsExpiredError, UserIsDisabledError, UserIsLockedError, } from "../../errors";
import ApiBaseProvider from "../BaseProvider/ApiBaseProvider";
export class ApiSignInProvider extends ApiBaseProvider {
    constructor(cieServiceUrl) {
        super(cieServiceUrl);
        this.cieServiceUrl = cieServiceUrl;
    }
    signIn(props) {
        return __awaiter(this, void 0, void 0, function* () {
            const signInUrl = url.parse(`${this.cieServiceUrl}/login`);
            const formattedUrl = url.format(signInUrl);
            const response = yield fetch(formattedUrl, {
                body: JSON.stringify({
                    captchaResponse: props.captchaResponse,
                    password: props.password,
                    tid: props.tid,
                    username: props.username,
                }),
                credentials: "include",
                headers: {
                    Accept: "application/vnd.bestbuy+json",
                },
                method: "post",
            });
            let json;
            try {
                json = yield response.json();
            }
            catch (error) {
                return Promise.reject(new HttpRequestError(formattedUrl, error));
            }
            if (response.status !== StatusCode.OK) {
                switch (response.status) {
                    case StatusCode.Unauthorized:
                        switch (json.message) {
                            case "BAD_CREDENTIALS":
                                return Promise.reject(new BadCredentialsError(formattedUrl, json.message));
                            case "USER_IS_LOCKED":
                                return Promise.reject(new UserIsLockedError(formattedUrl, json.message));
                            case "USER_IS_DISABLED":
                                return Promise.reject(new UserIsDisabledError(formattedUrl, json.message));
                            case "USER_IS_CREDENTIALSEXPIRED":
                                return Promise.reject(new UserIsCredentialsExpiredError(formattedUrl, json.message));
                            case "CHALLENGE_REQUIRED":
                                return Promise.reject(new ChallengeRequiredError(formattedUrl, json.message));
                            default:
                                return Promise.reject(new UnauthorizedError(formattedUrl, json.message));
                        }
                    default:
                        return this.handleError(response.status, formattedUrl);
                }
            }
            return {
                accessToken: json.accessToken,
                customerId: json.customerId,
                redirectUrl: json.redirectUrl,
            };
        });
    }
}
export default ApiSignInProvider;
//# sourceMappingURL=ApiSignInProvider.js.map