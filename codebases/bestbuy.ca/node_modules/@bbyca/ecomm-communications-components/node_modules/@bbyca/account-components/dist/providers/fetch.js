var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { ConnectionError, InternalServerError, StatusCode } from "../errors";
export const myFetch = (input, init) => __awaiter(void 0, void 0, void 0, function* () {
    const url = typeof input === "string" ? input : input.url;
    let response;
    try {
        response = yield fetch(input, init);
    }
    catch (error) {
        const connectionError = new ConnectionError(url, `Error connecting to ${url}`, error);
        return Promise.reject(connectionError);
    }
    if (response.status === StatusCode.InternalServerError) {
        const internalServerError = new InternalServerError(url, "InternalServerError");
        return Promise.reject(internalServerError);
    }
    return response;
});
export default myFetch;
//# sourceMappingURL=fetch.js.map