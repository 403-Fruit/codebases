var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as url from "url";
import { ApiCsrfTokenProvider } from "..";
import { HttpRequestError, StatusCode, } from "../../errors";
import { cieUtilities } from "../../utils/cieUtilities";
import ContextId from "../../utils/ContextIdEnum";
import ApiBaseProvider from "../BaseProvider/ApiBaseProvider";
export class ApiSessionTidProvider extends ApiBaseProvider {
    constructor(cieServiceUrl) {
        super(cieServiceUrl);
        this.getSessionTid = (data, locale, contextId = ContextId.GLOBAL) => __awaiter(this, void 0, void 0, function* () {
            const customHeaders = {
                "Accept-Language": locale,
            };
            const sessionTidUrl = url.parse(`${this.apiUrl}/tid?redirectUrl=${data.redirectUrl}&contextId=${contextId}`);
            const formattedUrl = url.format(sessionTidUrl);
            const headers = yield this.generateHttpHeaders(customHeaders);
            const response = yield fetch(formattedUrl, {
                body: JSON.stringify({
                    captchaResponse: data.captchaResponse,
                }),
                credentials: "include",
                headers,
                method: "post",
            });
            let json;
            try {
                json = yield response.json();
            }
            catch (error) {
                Promise.reject(new HttpRequestError(formattedUrl, error));
            }
            if (response.status !== StatusCode.OK) {
                return this.handleError(response.status, formattedUrl);
            }
            const sessionTidResponse = {
                tid: json.tid,
            };
            return sessionTidResponse;
        });
        this.generateHttpHeaders = (customHeaders = {}) => __awaiter(this, void 0, void 0, function* () {
            const headers = Object.assign(Object.assign({}, customHeaders), { "Accept": "application/vnd.bestbuy+json", "Content-Type": "application/vnd.bestbuy+json" });
            yield this.addCsrfToken(headers);
            return headers;
        });
        this.addCsrfToken = (headers) => __awaiter(this, void 0, void 0, function* () {
            let csrfToken = cieUtilities.getCsrfToken();
            const csrfTokenProvider = new ApiCsrfTokenProvider(this.cieServiceUrl);
            if (!csrfToken) {
                yield csrfTokenProvider.getCsrfToken();
                csrfToken = cieUtilities.getCsrfToken();
            }
            if (csrfToken) {
                headers["X-TX"] = csrfToken;
            }
        });
        this.cieServiceUrl = cieServiceUrl;
    }
}
//# sourceMappingURL=ApiSessionTidProvider.js.map