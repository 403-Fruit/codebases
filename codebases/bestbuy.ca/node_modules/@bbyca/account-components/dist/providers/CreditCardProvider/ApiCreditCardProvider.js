var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as url from "url";
import { HttpRequestError, StatusCode, UnsupportedOperationError, } from "../../errors";
import ApiBaseProvider from "../BaseProvider/ApiBaseProvider";
import fetch from "../fetch";
export class ApiCreditCardProvider extends ApiBaseProvider {
    constructor(accountApiUrl, accountApiVersion = null) {
        super(accountApiUrl, accountApiVersion);
        this.accountApiVersion = accountApiVersion;
    }
    getCreditCards(props) {
        const _super = Object.create(null, {
            handleError: { get: () => super.handleError }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const getCreditCardsUrl = url.parse(`${this.apiUrl}/customers/${props.customerId}/creditcards`);
            const formattedUrl = url.format(getCreditCardsUrl);
            const response = yield fetch(formattedUrl, {
                credentials: "include",
                headers: {
                    Accept: "application/json",
                    Authorization: `bearer ${props.accessToken}`,
                },
                method: "get",
            });
            let json;
            try {
                json = yield response.json();
            }
            catch (error) {
                return Promise.reject(new HttpRequestError(formattedUrl, error.message, error));
            }
            if (response.status === StatusCode.OK) {
                const creditcards = json.creditCards;
                const defaultCreditCardId = json.defaultCreditCardId;
                creditcards.forEach((creditCard) => creditCard.isDefaultCreditCard = creditCard.id === defaultCreditCardId);
                return creditcards;
            }
            else {
                return _super.handleError.call(this, response.status, formattedUrl, json.error);
            }
        });
    }
    addCreditCard(props, isPaymentWebappEnabled = false) {
        const _super = Object.create(null, {
            handleError: { get: () => super.handleError }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const addCreditCardsUrl = url.parse(`${this.apiUrl}/customers/${props.customerId}/creditcards`);
            const formattedUrl = url.format(addCreditCardsUrl);
            const addCreditCardPayload = isPaymentWebappEnabled ? {
                isDefaultCard: props.isDefaultCreditCard,
                paymentId: props.paymentId,
            }
                :
                    {
                        billingAddress: props.billingAddress || undefined,
                        cardType: props.type,
                        encryptedCardNumber: props.number,
                        expirationMonth: props.expirationMonth,
                        expirationYear: props.expirationYear,
                        isDefaultCard: props.isDefaultCreditCard,
                        last4Digits: props.last4Digits,
                    };
            const response = yield fetch(formattedUrl, {
                body: JSON.stringify(addCreditCardPayload),
                credentials: "include",
                headers: {
                    "Accept": "application/vnd.bestbuy+json",
                    "Authorization": `bearer ${props.accessToken}`,
                    "Content-Type": "application/vnd.bestbuy+json",
                },
                method: "post",
            });
            if (response.status !== StatusCode.OK) {
                // TODO: if status === validation failed return that error else following
                return _super.handleError.call(this, response.status, formattedUrl);
            }
        });
    }
    editCreditCard(props) {
        const _super = Object.create(null, {
            handleError: { get: () => super.handleError }
        });
        return __awaiter(this, void 0, void 0, function* () {
            if (this.apiVersion == null || this.apiVersion < 2) {
                throw new UnsupportedOperationError(`Unsupported action for API Version: ${this.apiVersion}`);
            }
            const editCreditCardsUrl = url.parse(`${this.apiUrl}/customers/${props.customerId}/creditcards/${props.id}`);
            const formattedUrl = url.format(editCreditCardsUrl);
            const response = yield fetch(formattedUrl, {
                body: JSON.stringify({
                    billingAddress: props.billingAddress,
                    cardType: props.type,
                    expirationMonth: props.expirationMonth,
                    expirationYear: props.expirationYear,
                    isDefaultCard: props.isDefaultCreditCard,
                    last4Digits: props.last4Digits,
                }),
                credentials: "include",
                headers: {
                    "Accept": "application/vnd.bestbuy+json",
                    "Authorization": `bearer ${props.accessToken}`,
                    "Content-Type": "application/vnd.bestbuy+json",
                },
                method: "put",
            });
            if (response.status !== StatusCode.OK) {
                // TODO: if status === validation failed return that error else following
                return _super.handleError.call(this, response.status, formattedUrl);
            }
        });
    }
    deleteCreditCard(props) {
        const _super = Object.create(null, {
            handleError: { get: () => super.handleError }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const deleteCreditCardsUrl = url.parse(`${this.apiUrl}/customers/${props.customerId}/creditcards/${props.id}`);
            const formattedUrl = url.format(deleteCreditCardsUrl);
            const response = yield fetch(formattedUrl, {
                credentials: "include",
                headers: {
                    Accept: "application/vnd.bestbuy+json",
                    Authorization: `bearer ${props.accessToken}`,
                },
                method: "delete",
            });
            if (response.status !== StatusCode.OK) {
                // TODO: if status === validation failed return that error else following
                return _super.handleError.call(this, response.status, formattedUrl);
            }
        });
    }
}
export default ApiCreditCardProvider;
//# sourceMappingURL=ApiCreditCardProvider.js.map