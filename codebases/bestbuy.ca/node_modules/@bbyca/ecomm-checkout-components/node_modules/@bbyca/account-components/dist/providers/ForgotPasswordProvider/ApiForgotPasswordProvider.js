var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as url from "url";
import { ContextId } from "../..";
import { StatusCode } from "../../errors";
import ApiBaseProvider from "../BaseProvider/ApiBaseProvider";
export class ApiForgotPasswordProvider extends ApiBaseProvider {
    constructor(cieServiceUrl) {
        super(cieServiceUrl);
        this.cieServiceUrl = cieServiceUrl;
    }
    forgotPassword(props, contextId) {
        const _super = Object.create(null, {
            handleError: { get: () => super.handleError }
        });
        return __awaiter(this, void 0, void 0, function* () {
            contextId = !contextId ? ContextId.GLOBAL : contextId;
            const forgotPasswordUrl = url.parse(`${this.cieServiceUrl}/forgot-password?contextId=${contextId}`);
            const formattedUrl = url.format(forgotPasswordUrl);
            const response = yield fetch(formattedUrl, {
                body: JSON.stringify({
                    captchaResponse: props.captchaResponse,
                    email: props.email,
                    locale: props.locale,
                    orderNumber: props.orderNumber || null,
                    redirectUrl: props.redirectUrl,
                }),
                credentials: "include",
                headers: {
                    "Content-Type": "application/json",
                },
                method: "post",
            });
            if (response.status !== StatusCode.OK) {
                return _super.handleError.call(this, response.status, formattedUrl);
            }
        });
    }
}
export default ApiForgotPasswordProvider;
//# sourceMappingURL=ApiForgotPasswordProvider.js.map