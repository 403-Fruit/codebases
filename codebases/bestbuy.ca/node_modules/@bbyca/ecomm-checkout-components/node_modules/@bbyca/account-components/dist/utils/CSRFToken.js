var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { ApiCsrfTokenProvider } from "../";
import { cieUtilities } from "./cieUtilities";
export const addCsrfToken = (headers, cieServiceUrl) => __awaiter(void 0, void 0, void 0, function* () {
    let csrfToken = cieUtilities.getCsrfToken();
    const csrfTokenProvider = new ApiCsrfTokenProvider(cieServiceUrl);
    if (!csrfToken) {
        yield csrfTokenProvider.getCsrfToken();
        csrfToken = cieUtilities.getCsrfToken();
    }
    if (csrfToken) {
        headers["X-TX"] = csrfToken;
    }
});
//# sourceMappingURL=CSRFToken.js.map