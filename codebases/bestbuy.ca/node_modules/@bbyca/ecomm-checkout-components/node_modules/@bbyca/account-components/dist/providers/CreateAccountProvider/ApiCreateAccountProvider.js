var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as url from "url";
import { ApiCsrfTokenProvider } from "../";
import { ContextId } from "../..";
import { HttpRequestError, PasswordBasicCriteriaFailedError, PasswordBlacklistedError, ResourceAlreadyExistsError, StatusCode, } from "../../errors";
import { cieUtilities } from "../../utils/cieUtilities";
import ApiBaseProvider from "../BaseProvider/ApiBaseProvider";
import fetch from "../fetch";
export class ApiCreateAccountProvider extends ApiBaseProvider {
    constructor(cieServiceUrl, apiVerion = null, contextId = ContextId.GLOBAL) {
        super(cieServiceUrl, apiVerion);
        this.apiVerion = apiVerion;
        this.ACCEPTED_STATUSES = [StatusCode.OK, StatusCode.MultiStatus];
        this.generateHttpHeaders = (customHeaders = {}) => __awaiter(this, void 0, void 0, function* () {
            const headers = Object.assign(Object.assign({}, customHeaders), { "Accept": "application/vnd.bestbuy+json", "Content-Type": "application/vnd.bestbuy+json" });
            yield this.addCsrfToken(headers);
            return headers;
        });
        this.addCsrfToken = (headers) => __awaiter(this, void 0, void 0, function* () {
            let csrfToken = cieUtilities.getCsrfToken();
            const csrfTokenProvider = new ApiCsrfTokenProvider(this.cieServiceUrl);
            if (!csrfToken) {
                yield csrfTokenProvider.getCsrfToken();
                csrfToken = cieUtilities.getCsrfToken();
            }
            if (csrfToken) {
                headers["X-TX"] = csrfToken;
            }
        });
        this.cieServiceUrl = cieServiceUrl;
        this.contextId = contextId;
    }
    createAccount(props) {
        const _super = Object.create(null, {
            handleError: { get: () => super.handleError }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const createAccountUrl = url.parse(`${this.apiUrl}/accounts?contextId=${this.contextId}`);
            const formattedUrl = url.format(createAccountUrl);
            const headers = yield this.generateHttpHeaders();
            const response = yield fetch(formattedUrl, {
                body: JSON.stringify(props),
                credentials: "include",
                headers,
                method: "post",
            });
            let json;
            try {
                json = yield response.json();
            }
            catch (error) {
                Promise.reject(new HttpRequestError(formattedUrl, error));
            }
            if (this.ACCEPTED_STATUSES.indexOf(response.status) < 0) {
                switch (json.message) {
                    case "ALREADY_EXISTS":
                        return Promise.reject(new ResourceAlreadyExistsError(formattedUrl, json.message));
                    case "PASSWORD_BASIC_CRITERIA_FAILED":
                        return Promise.reject(new PasswordBasicCriteriaFailedError(formattedUrl, json.message));
                    case "PASSWORD_BLACKLISTED":
                        return Promise.reject(new PasswordBlacklistedError(formattedUrl, json.message));
                    default:
                        return _super.handleError.call(this, response.status, formattedUrl);
                }
            }
            else {
                const createAccountResponse = {
                    firstName: json.firstName,
                    id: json.id,
                    redirectUrl: json.redirectUrl,
                    statusCode: response.status,
                };
                return createAccountResponse;
            }
        });
    }
}
export default ApiCreateAccountProvider;
//# sourceMappingURL=ApiCreateAccountProvider.js.map