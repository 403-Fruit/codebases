var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as url from "url";
import { ApiCsrfTokenProvider } from "..";
import { HttpRequestError, StatusCode } from "../../errors";
import { cieUtilities } from "../../utils/cieUtilities";
import ApiBaseProvider from "../BaseProvider/ApiBaseProvider";
import fetch from "../fetch";
export class ApiSignOutProvider extends ApiBaseProvider {
    constructor(cieServiceUrl) {
        super(cieServiceUrl);
    }
    signOut() {
        return __awaiter(this, void 0, void 0, function* () {
            const accessToken = cieUtilities.getAccessToken();
            let csrfToken = cieUtilities.getCsrfToken();
            if (!csrfToken) {
                const apiCsrfTokenProvider = new ApiCsrfTokenProvider(this.apiUrl);
                apiCsrfTokenProvider.getCsrfToken(); // ApiCsrfTokenProvider adds a csrf token to cookies
                csrfToken = cieUtilities.getCsrfToken(); // retrieves from cookies
            }
            const signoutUrl = url.parse(`${this.apiUrl}/signout`);
            const formattedUrl = url.format(signoutUrl);
            const response = yield fetch(formattedUrl, {
                credentials: "include",
                // tslint:disable-next-line:object-literal-shorthand
                headers: {
                    "Accept": "application/vnd.bestbuy+json",
                    "Authorization": `bearer ${accessToken || ""}`,
                    "ContentType": "application/json",
                    "X-TX": `${csrfToken}`,
                },
                method: "post",
            });
            if (response.status !== StatusCode.OK) {
                const json = yield response.json();
                return Promise.reject(new HttpRequestError(formattedUrl, json.error));
            }
        });
    }
}
export default ApiSignOutProvider;
//# sourceMappingURL=ApiSignOutProvider.js.map