var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as React from "react";
import { AccountCustomEventEnums, AuthenticationState, cieUtilities, ScreenBreakpointEnum } from "../..";
import FlyoutMenu from "../FlyoutMenu";
import { SignInNav } from "./SignInNav";
const hiddenSignInLabelForAnalytics = (screenBreakpoint) => {
    let hiddenSignInLabel;
    if (screenBreakpoint && screenBreakpoint === ScreenBreakpointEnum.extraSmall) {
        hiddenSignInLabel = "Icon; Anonymous";
    }
    return hiddenSignInLabel;
};
export const SignInOutNav = ({ accountDashboardUrl, cieServiceUrl, locale, toggleFlyoutOverlay, screenBreakpoint, redirectUrl, onSignOutSuccess, }) => {
    const customerCookie = cieUtilities.getCustomerIdCookie();
    const [userFirstName, setUserFirstName] = React.useState(!!customerCookie && !!customerCookie.firstName ? customerCookie.firstName : "");
    const [isUserSignedIn, setIsUserSignedIn] = React.useState(false);
    const [isUserRecognized, setIsUserRecognized] = React.useState(false);
    const handleOnSignOutSuccess = React.useCallback(() => __awaiter(void 0, void 0, void 0, function* () {
        if (onSignOutSuccess) {
            yield onSignOutSuccess();
        }
        if (toggleFlyoutOverlay) {
            toggleFlyoutOverlay(false);
        }
        const isRecognized = !!cieUtilities.getCustomerIdCookie()
            && (cieUtilities.getCustomerIdCookie() || {}).authenticationState !== AuthenticationState.UNAUTHENTICATED;
        const isSignedIn = cieUtilities.isUserSignedIn();
        setIsUserRecognized(isRecognized);
        setIsUserSignedIn(isSignedIn);
    }), [onSignOutSuccess, toggleFlyoutOverlay]);
    const handleUpdateCustomerFirstName = React.useCallback(() => {
        const updatedCustomerCookie = cieUtilities.getCustomerIdCookie();
        setUserFirstName(!!updatedCustomerCookie && !!updatedCustomerCookie.firstName ? updatedCustomerCookie.firstName : "");
    }, [userFirstName]);
    React.useEffect(() => {
        if (typeof window !== "undefined") {
            window.addEventListener(AccountCustomEventEnums.ACCOUNT_PERSONAL_DETAILS_EDIT_NAME, handleUpdateCustomerFirstName);
        }
        const isRecognized = !!cieUtilities.getCustomerIdCookie()
            && (cieUtilities.getCustomerIdCookie() || {}).authenticationState !== AuthenticationState.UNAUTHENTICATED;
        const isSignedIn = cieUtilities.isUserSignedIn();
        setIsUserRecognized(isRecognized);
        setIsUserSignedIn(isSignedIn);
        return () => {
            if (typeof window !== "undefined") {
                window.removeEventListener(AccountCustomEventEnums.ACCOUNT_PERSONAL_DETAILS_EDIT_NAME, handleUpdateCustomerFirstName);
            }
        };
    }, []);
    if (isUserRecognized || isUserSignedIn) {
        return (React.createElement(FlyoutMenu, { accountDashboardUrl: accountDashboardUrl, cieServiceUrl: cieServiceUrl, locale: locale, firstName: userFirstName, toggleFlyoutOverlay: toggleFlyoutOverlay, onSignOutSuccess: handleOnSignOutSuccess, screenBreakpoint: screenBreakpoint }));
    }
    return (React.createElement(SignInNav, { locale: locale, cieServiceUrl: cieServiceUrl, redirectUrl: redirectUrl, hiddenAnalyticsLabel: hiddenSignInLabelForAnalytics(screenBreakpoint) }));
};
export default SignInOutNav;
//# sourceMappingURL=index.js.map