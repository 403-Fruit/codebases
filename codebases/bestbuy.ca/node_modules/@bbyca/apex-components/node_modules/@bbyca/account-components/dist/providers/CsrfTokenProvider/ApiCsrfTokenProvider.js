var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as url from "url";
import { HttpRequestError, StatusCode } from "../../errors";
import { ApiBaseProvider } from "../BaseProvider/ApiBaseProvider";
import fetch from "../fetch";
export class ApiCsrfTokenProvider extends ApiBaseProvider {
    constructor(cieServiceUrl) {
        super(cieServiceUrl);
    }
    getCsrfToken() {
        return __awaiter(this, void 0, void 0, function* () {
            const getCsrfTokenUrl = url.parse(`${this.apiUrl}/refresh`);
            const formattedUrl = url.format(getCsrfTokenUrl);
            const response = yield fetch(formattedUrl, {
                credentials: "include",
                method: "get",
            });
            if (response.status !== StatusCode.OK) {
                const json = yield response.json();
                return Promise.reject(new HttpRequestError(formattedUrl, json.error));
            }
        });
    }
}
export default ApiCsrfTokenProvider;
//# sourceMappingURL=ApiCsrfTokenProvider.js.map