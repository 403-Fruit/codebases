var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as url from "url";
import { HttpRequestError, StatusCode, } from "../../errors";
import ApiBaseProvider from "../BaseProvider/ApiBaseProvider";
import accountFetch from "../fetch";
export class ApiCustomerInfoProvider extends ApiBaseProvider {
    constructor(accountApiUrl) {
        super(accountApiUrl);
    }
    getCustomerInfo(props) {
        const _super = Object.create(null, {
            handleError: { get: () => super.handleError }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const getCustomerInfoUrl = url.parse(`${this.apiUrl}/customer`);
            const formattedUrl = url.format(getCustomerInfoUrl);
            const response = yield accountFetch(formattedUrl, {
                credentials: "include",
                headers: {
                    Accept: "application/json",
                    Authorization: `bearer ${props.accessToken}`,
                },
                method: "get",
            });
            let json;
            try {
                json = yield response.json();
            }
            catch (error) {
                return Promise.reject(new HttpRequestError(formattedUrl, error.message, error));
            }
            if (response.status === StatusCode.OK) {
                const customerInfo = {
                    accountCreatedDate: json.accountCreatedDate,
                    defaultLanguage: json.defaultLanguage,
                    email: json.email,
                    firstName: json.firstName,
                    id: json.id,
                    lastName: json.lastName,
                    passwordDateLastChanged: json.passwordDateLastChanged,
                    zipCode: json.zipCode,
                };
                return customerInfo;
            }
            else {
                return _super.handleError.call(this, response.status, formattedUrl, json.error);
            }
        });
    }
    updateCustomerPasswordInfo(props) {
        const _super = Object.create(null, {
            handleError: { get: () => super.handleError }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const updateCustomerInfoUrl = url.parse(`${this.apiUrl}/customers/${props.customerId}/password`);
            const formattedUrl = url.format(updateCustomerInfoUrl);
            const response = yield accountFetch(formattedUrl, {
                body: JSON.stringify({
                    currentPassword: props.currentPassword,
                    locale: props.locale,
                    password: props.password,
                }),
                credentials: "include",
                headers: {
                    "Accept": "application/vnd.bestbuy+json",
                    "Authorization": `bearer ${props.accessToken}`,
                    "Content-Type": "application/vnd.bestbuy+json",
                },
                method: "put",
            });
            let json;
            try {
                json = yield response.json();
            }
            catch (error) {
                return Promise.reject(new HttpRequestError(formattedUrl, error.message, error));
            }
            if (response.status === StatusCode.OK) {
                const updateCustomerPasswordResponse = {
                    passwordDateLastChanged: json.passwordDateLastChanged,
                };
                return updateCustomerPasswordResponse;
            }
            else {
                if (json.error_list) {
                    return _super.handleError.call(this, response.status, formattedUrl, json.error, json.error_list);
                }
                return _super.handleError.call(this, response.status, formattedUrl, json.error);
            }
        });
    }
    updateCustomerInfo(props) {
        const _super = Object.create(null, {
            handleError: { get: () => super.handleError }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const updateCustomerInfoUrl = url.parse(`${this.apiUrl}/customers/${props.customerId}`);
            const formattedUrl = url.format(updateCustomerInfoUrl);
            const response = yield accountFetch(formattedUrl, {
                body: JSON.stringify({
                    defaultLanguage: props.defaultLanguage,
                    email: props.email,
                    firstName: props.firstName,
                    lastName: props.lastName,
                    locale: props.locale,
                    password: props.password,
                    zipCode: props.zipCode,
                }),
                credentials: "include",
                headers: {
                    "Accept": "application/vnd.bestbuy+json",
                    "Authorization": `bearer ${props.accessToken}`,
                    "Content-Type": "application/vnd.bestbuy+json",
                },
                method: "put",
            });
            let json;
            try {
                json = yield response.json();
            }
            catch (error) {
                return Promise.reject(new HttpRequestError(formattedUrl, error.message, error));
            }
            if (response.status === StatusCode.OK) {
                const customerInfo = {
                    defaultLanguage: json.defaultLanguage,
                    email: json.email,
                    firstName: json.firstName,
                    id: json.id,
                    lastName: json.lastName,
                    zipCode: json.zipCode,
                };
                return customerInfo;
            }
            else {
                if (json.error_list) {
                    return _super.handleError.call(this, response.status, formattedUrl, json.error, json.error_list);
                }
                return _super.handleError.call(this, response.status, formattedUrl, json.error);
            }
        });
    }
}
export default ApiCustomerInfoProvider;
//# sourceMappingURL=ApiCustomerInfoProvider.js.map