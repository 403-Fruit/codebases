var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as React from "react";
import ApiSignoutProvider from "../../../providers/SignOutProvider/ApiSignOutProvider";
import SignOutSvg from "./icon/SignOutSvg";
import { en, fr } from "./messages";
import * as styles from "./style.css";
export const SignOutNav = ({ locale, cieServiceUrl, className, onSignOutSuccess, hideIcon, }) => {
    const messages = locale.startsWith("fr") ? fr : en;
    const onSignOutNavClick = React.useCallback(() => {
        const onSignoutClick = () => __awaiter(void 0, void 0, void 0, function* () {
            const apiSignoutProvider = new ApiSignoutProvider(cieServiceUrl);
            yield apiSignoutProvider.signOut();
            if (onSignOutSuccess) {
                onSignOutSuccess();
            }
        });
        onSignoutClick();
    }, [onSignOutSuccess]);
    return (React.createElement("a", { className: `${styles.SignInOutNavLink} ${styles.signOut} ${className ? className : ""}`, "data-automation": "sign-out-link", onClick: onSignOutNavClick },
        !hideIcon && React.createElement(SignOutSvg, { className: styles.accountIcon }),
        React.createElement("span", { className: styles.accountLabel, "data-automation": "sign-out-text" }, messages.signOutNav)));
};
export default SignOutNav;
//# sourceMappingURL=index.js.map