var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { BadRequestError, ForbiddenError, HttpRequestError, InternalServerError, PasswordEditFormError, ResourceAlreadyExistsError, StatusCode, UnauthorizedError, UnprocessableEntityError, } from "../../errors";
export class ApiBaseProvider {
    constructor(apiUrl, apiVersion = null) {
        this.apiUrl = apiUrl;
        this.apiVersion = apiVersion;
        this.apiUrl = apiUrl.endsWith("/") ? apiUrl.slice(0, -1) : apiUrl;
        this.apiUrl += apiVersion !== null && apiVersion > 1 ?
            `/v${String(apiVersion)}` : "";
    }
    handleError(statusCode, uri, errorMessage, errorList) {
        return __awaiter(this, void 0, void 0, function* () {
            switch (statusCode) {
                case StatusCode.BadRequest:
                    if (errorList && errorList.indexOf("INVALID_PASSWORD") > -1) {
                        if (!!errorList[1]) {
                            return Promise.reject(new PasswordEditFormError(uri, errorMessage, undefined, errorList[1]));
                        }
                        return Promise.reject(new PasswordEditFormError(uri, errorMessage));
                    }
                    return Promise.reject(new BadRequestError(uri, errorMessage));
                case StatusCode.UnprocessableEntity:
                    if (errorMessage === "already_exists") {
                        return Promise.reject(new ResourceAlreadyExistsError(uri, errorMessage));
                    }
                    return Promise.reject(new UnprocessableEntityError(uri, errorMessage));
                case StatusCode.Unauthorized:
                    return Promise.reject(new UnauthorizedError(uri, errorMessage));
                case StatusCode.Forbidden:
                    return Promise.reject(new ForbiddenError(uri, errorMessage));
                case StatusCode.InternalServerError:
                    return Promise.reject(new InternalServerError(uri, errorMessage));
                default:
                    return Promise.reject(new HttpRequestError(uri, errorMessage));
            }
        });
    }
}
export default ApiBaseProvider;
//# sourceMappingURL=ApiBaseProvider.js.map