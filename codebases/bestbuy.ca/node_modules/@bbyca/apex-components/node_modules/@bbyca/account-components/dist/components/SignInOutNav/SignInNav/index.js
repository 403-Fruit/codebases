import { LoadingSkeleton } from "@bbyca/bbyca-components";
import * as React from "react";
import { cieUtilities } from "../../..";
import * as accountMenuStyles from "../../AccountMenu/style.css";
import SignInSvg from "./icon/SignInSvg";
import { en, fr } from "./messages";
import * as styles from "./style.css";
const renderSignInText = (messages, hiddenAnalyticsLabel = "") => {
    return (React.createElement(React.Fragment, null,
        !!hiddenAnalyticsLabel && React.createElement("span", { className: styles.analyticsLabel },
            " ",
            hiddenAnalyticsLabel,
            " "),
        React.createElement("span", { className: `${styles.accountLabel} ${accountMenuStyles.accountLabel}`, "data-automation": "sign-in-text" }, messages.signInNav)));
};
const renderSignInSkeleton = () => (React.createElement("div", { className: styles.signInSkeletonContainer },
    React.createElement("div", { className: styles.skeletonMaskCircle }),
    React.createElement("div", { className: styles.skeletonMaskRect }),
    React.createElement(LoadingSkeleton.Line, { className: styles.signInSkeletonLoading })));
export const SignInNav = ({ hiddenAnalyticsLabel, redirectUrl, cieServiceUrl, locale, }) => {
    const [shouldDisplay, setShouldDisplay] = React.useState(false);
    const [signInUrl, setSignInUrl] = React.useState(cieUtilities.buildSignInUrl(cieServiceUrl, locale, redirectUrl));
    const messages = locale.startsWith("fr") ? fr : en;
    React.useEffect(() => {
        if (!!cieServiceUrl) {
            setShouldDisplay(true);
        }
    }, []);
    if (!cieServiceUrl) {
        return null;
    }
    React.useEffect(() => {
        setSignInUrl(cieUtilities.buildSignInUrl(cieServiceUrl, locale, redirectUrl));
    }, [signInUrl, redirectUrl, cieServiceUrl, locale]);
    if (!shouldDisplay) {
        return renderSignInSkeleton();
    }
    return (React.createElement("a", { className: `${styles.SignInOutNavIcon} ${styles.signIn} ${accountMenuStyles.SignInOutNavIcon} ${accountMenuStyles.signIn}`, "data-automation": "sign-in-link", href: signInUrl },
        React.createElement(SignInSvg, { className: `${styles.accountIcon} ${accountMenuStyles.accountIcon}` }),
        renderSignInText(messages, hiddenAnalyticsLabel)));
};
export default SignInNav;
//# sourceMappingURL=index.js.map