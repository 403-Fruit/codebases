"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var url = require("url");
var errors_1 = require("../../errors");
var fetch_1 = require("../fetch");
var ApiCustomerInfoProvider = /** @class */ (function () {
    function ApiCustomerInfoProvider(accountApiUrl, cusotmerInfoApiVersion) {
        if (cusotmerInfoApiVersion === void 0) { cusotmerInfoApiVersion = null; }
        this.accountApiUrl = accountApiUrl;
        this.accountApiUrl = accountApiUrl.endsWith("/") ? accountApiUrl.slice(0, -1) : accountApiUrl;
        // tslint:disable-next-line:max-line-length
        this.accountApiUrl += cusotmerInfoApiVersion !== null && cusotmerInfoApiVersion > 1 ?
            "/v" + String(cusotmerInfoApiVersion) : "";
    }
    ApiCustomerInfoProvider.prototype.getCustomerInfo = function (props) {
        return __awaiter(this, void 0, void 0, function () {
            var getCustomerInfoUrl, formattedUrl, response, json, error_1, customerInfo;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        getCustomerInfoUrl = url.parse(this.accountApiUrl + "/customer");
                        formattedUrl = url.format(getCustomerInfoUrl);
                        return [4 /*yield*/, fetch_1.default(formattedUrl, {
                                credentials: "include",
                                headers: {
                                    Accept: "application/json",
                                    Authorization: "bearer " + props.accessToken,
                                },
                                method: "get",
                            })];
                    case 1:
                        response = _a.sent();
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, response.json()];
                    case 3:
                        json = _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        error_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(new errors_1.HttpRequestError(formattedUrl, error_1.message, error_1))];
                    case 5:
                        if (response.status === errors_1.StatusCode.OK) {
                            customerInfo = {
                                defaultLanguage: json.defaultLanguage,
                                email: json.email,
                                firstName: json.firstName,
                                id: json.id,
                                lastName: json.lastName,
                                zipCode: json.zipCode,
                            };
                            return [2 /*return*/, customerInfo];
                        }
                        else {
                            switch (response.status) {
                                case errors_1.StatusCode.BadRequest:
                                    return [2 /*return*/, Promise.reject(new errors_1.BadRequestError(formattedUrl, json.error))];
                                case errors_1.StatusCode.Unauthorized:
                                    return [2 /*return*/, Promise.reject(new errors_1.UnauthorizedError(formattedUrl, json.error))];
                                case errors_1.StatusCode.Forbidden:
                                    return [2 /*return*/, Promise.reject(new errors_1.ForbiddenError(formattedUrl, json.error))];
                                default:
                                    return [2 /*return*/, Promise.reject(new errors_1.HttpRequestError(formattedUrl, json.error))];
                            }
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    return ApiCustomerInfoProvider;
}());
exports.ApiCustomerInfoProvider = ApiCustomerInfoProvider;
exports.default = ApiCustomerInfoProvider;
//# sourceMappingURL=ApiCustomerInfoProvider.js.map