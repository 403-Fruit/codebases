// ============================================================
// mixin: spacing
// ============================================================

///
/// Returns the entire spacing declaration for the specified size,
/// including its corresponding directional property.
///
/// If multiple sizes are defined for `inset` spacing, the `$sizes`
/// will be applied similar to the CSS `padding`
/// [shorthand property](https://www.w3schools.com/css/css_padding.asp).
///
/// @param {String} $type - The type of spacing
/// <br/><br/> One of: `inset, stack, inline`
/// @param {Arglist} $sizes - The spacing sizes
/// <br/><br/> One of: `half, 1x, 2x, 3x, 4x, 6x, none`
///
/// @example scss - Inline / Stack Usage
///  .element {
///    @include spacing(inline, half);
///  }
///
/// @example css - CSS Output
///  .element {
///    margin-right: 0.25rem;
///  }
///
/// @example scss - Inset Usage
///  .element {
///    @include spacing(inset, half, 2x);
///  }
///
/// @example css - CSS Output
///  .element {
///    padding: 0.25rem 1rem;
///  }
///

@mixin spacing($type, $sizes...) {
  @if map-has-key($spacing-direction-map, $type) {
    @if map-has-keys($spacing-map, $sizes...) {
      $property: map-get($spacing-direction-map, $type);
      // ============================================================
      // type is `inset`
      // ============================================================
      @if $type == "inset" {
        $values: null;
        @if length($sizes) > 4 {
          @error "Sizes `#{$sizes}` cannot contain more than four arguments";
        } @else {
          @each $size in $sizes {
            $current-value: map-get($spacing-map, $size);
            $values: join($values, $current-value);
          }
          #{$property}: $values;
        }
      } @else {
        // ============================================================
        // $type is `stack` or `inline`
        // ============================================================
        @if length($sizes) > 1 {
          @error "Type `#{$type}` can only contain one argument";
        } @else {
          $value: nth($sizes, 1); // remove the comma from the argList
          #{$property}: map-get($spacing-map, $value);
        }
      }
    } @else {
      @error "Spacing sizes `#{$sizes}` must be in the spacing scale. #{map-list-values($spacing-map)}";
    }
  } @else {
    @error "Spacing type `#{$type}` not found. #{map-list-values($spacing-direction-map)}";
  }
}

///
/// Removes the bottom margin of the element's last child.
///
/// @param {String} $type - The type of spacing.
/// <br/><br/> One of: `inset, stack, inline`
///
/// @link https://css-tricks.com/spacing-the-bottom-of-modules/
///

@mixin spacing-remove-last-child($type) {
  &:last-child,
  & > *:last-child,
  & > *:last-child > *:last-child,
  & > *:last-child > *:last-child > *:last-child {
    @if map-has-key($spacing-direction-map, $type) {
      $property: map-get($spacing-direction-map, $type);
      #{$property}: 0;
    } @else {
      @error "Spacing type `#{$type}` not found. #{map-list-values($spacing-direction-map)}";
    }
  }
}
