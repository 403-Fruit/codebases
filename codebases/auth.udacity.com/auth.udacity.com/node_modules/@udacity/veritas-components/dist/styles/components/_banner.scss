// ============================================================
// components: banner
// ============================================================

$map: $banner-map;

.#{$namespace}-banner {
  padding: rem(16) rem(24);
  position: relative;
  width: 100%;

  @include breakpoint(sm) {
    padding: rem(16) rem(32);
  }

  &__content {
    display: flex;

    .#{$namespace}-icon {
      @include size($vds-icon-size-sm);
      @include spacing(inline, 1x);
      align-self: flex-start;
      flex-basis: $vds-icon-size-sm;
      width: $vds-icon-size-sm;

      @include breakpoint(sm) {
        @include size($vds-icon-size-md);
        flex-basis: $vds-icon-size-md;
        width: $vds-icon-size-md;
      }

      // sass-lint:disable nesting-depth
      svg {
        @include size($vds-icon-size-sm);
        @include breakpoint(sm) {
          @include size($vds-icon-size-md);
        }
      }
    }

    .#{$namespace}-banner--closeable & {
      @include spacing(inline, 4x);
    }
  }

  &__message {
    @include type-style(text-sm);
    align-self: center;
    max-width: 100%;
    width: 100%;

    @include breakpoint(sm) {
      @include type-style(text);
      max-width: 100%;
    }
  }

  &__close-button {
    position: absolute;
    right: rem(8);
    top: rem(12);
    @include breakpoint(sm) {
      right: rem(16);
      top: rem(16);
    }

    .#{$namespace}-banner--embedded & {
      right: rem(8);
      top: rem(12);
      @include breakpoint(sm) {
        right: rem(16);
        top: rem(9);
      }
    }
  }

  // variant styles
  // ============================================================
  @each $variant in map-keys($map) {
    &--#{$variant} {
      background-color: map-deep-get($map, $variant, background-color);
      border-bottom: map-deep-get($map, $variant, border-bottom);
      color: map-deep-get($map, $variant, color);

      .#{$namespace}-banner__content {
        .#{$namespace}-icon {
          @if $variant == "inverse" {
            // only allow  `inverse` banner to change icon color
            color: map-deep-get($map, $variant, icon);
          } @else {
            fill: map-deep-get($map, $variant, icon);
          }
        }
      }

      @if $variant == "default" {
        .#{$namespace}-banner__close-button {
          .#{$namespace}-icon {
            fill: color(white);
          }
        }
      }

      .#{$namespace}-link {
        $link-color: map-deep-get($map, $variant, color);
        color: $link-color;
        text-decoration: underline rgba($link-color, 0.4);

        &:hover,
        &:focus {
          color: rgba($link-color, 0.8);
        }
      }
    }
  }

  // embedded
  // ============================================================
  &--embedded {
    @include border-radius(secondary);
    border-bottom: 0;
    padding: rem(16);
    @include breakpoint(sm) {
      padding: rem(10) rem(16);
    }
  }
}

// RTL support
// ============================================================
@include rtl {
  .#{$namespace}-banner {
    .#{$namespace}-icon {
      @include spacing(inline, none);
      margin-left: $vds-spacing-1x;
    }

    // sass-lint:disable force-element-nesting
    &--closeable .#{$namespace}-banner__content {
      @include spacing(inline, none);
      margin-left: $vds-spacing-4x;
    }

    &__close-button {
      left: rem(8);
      right: unset;
      @include breakpoint(sm) {
        left: rem(16);
        right: unset;
      }

      .#{$namespace}-banner--embedded & {
        left: rem(8);
        right: unset;
        @include breakpoint(sm) {
          left: rem(16);
          right: unset;
        }
      }
    }
  }
}
