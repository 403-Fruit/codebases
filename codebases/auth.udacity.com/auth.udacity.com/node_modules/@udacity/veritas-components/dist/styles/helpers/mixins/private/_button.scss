// ============================================================
// mixin: button
// ============================================================

///
/// Returns the shadow, hover, active, focus and disabled properties for
/// the specified button variant
///
/// @access private
///
/// @param {String} $map - Must be a Sass map of CSS declarations
/// @param {String} $variant - The button variant
/// @param {String} $nested-map - The nested map (variant, shadow, size, icon)
///

@mixin button($map, $nested-map, $variant) {
  $states: (hover, active, focus);

  @include map-print($map, $nested-map, $variant, normal);

  @each $state in $states {
    @if map-has-nested-keys($map, $nested-map, $variant, $state) {
      &:#{$state} {
        @include map-print($map, $nested-map, $variant, $state);
      }
    }
  }

  // sass-lint:disable-block force-attribute-nesting no-qualifying-elements
  &[disabled],
  fieldset[disabled] & {
    @include map-print($map, $nested-map, $variant, disabled);
  }
}

// mixin: button helpers
// -------------------------------------------------------------------

///
/// Returns the icon properties for the specified button variant
///
/// @access private
///
/// @param {String} $variant - The button variant
///

@mixin button-icon($map, $variant) {
  @include map-print($map, icon, $variant);
}

///
/// Returns the size properties for the specified button variant
///
/// @access private
///
/// @param {String} $variant - The button variant
///

@mixin button-size($map, $variant) {
  @include map-print($map, size, $variant);
}

///
/// Returns the padding properties for the specified button variant
///
/// @access private
///
/// @param {String} $variant - The button variant
///

@mixin button-padding($map, $variant) {
  @include map-print($map, padding, $variant);
}

// mixin: button loading animation
// -------------------------------------------------------------------

///
/// Returns the styles for loading state of Button
///
/// @access private
///

@mixin button-loading-animation {
  $delay: 0.1s;

  div {
    @include border-radius(circle);
    @include size(rem(6));
    @include spacing(inline, half);
    animation: pulsate 1s $vds-base-timing 0s infinite both;
    background-color: currentColor;
    display: inline-block;

    &:first-child {
      animation-delay: -$delay;
    }

    &:last-child {
      animation-delay: $delay;
    }
  }

  @keyframes pulsate {
    0%,
    100% {
      opacity: 0.25;
      transform: scale(0.25);
    }

    50% {
      opacity: 1;
      transform: scale(1);
    }
  }
}
