// ============================================================
// mixin: border-radius
// ============================================================

///
/// Returns the border radius of the specified size.
///
/// @param {String} $size [base]- The border radius size
/// <br/><br/> One of: `base` (8px), `secondary` (4px), `circle` (50%), `none` (0px)
///
/// @example scss - Usage - Usage
///  .element {
///    @include border-radius(secondary);
///  }
///
/// @example css - CSS Output
///  .element {
///    border-radius: 0.25rem;
///  }
///

@mixin border-radius($size: base) {
  $map: $border-radius-map;

  @if map-has-key($map, $size) {
    border-radius: map-get($map, $size);
  } @else {
    @error "Border radius `#{$size}` not found. #{map-list-values($map)}";
  }
}

///
/// Provides a concise, one-line method for setting `border-radius` on both the
/// top-left and top-right of a box.
///
/// @param {String} $size [base]- The border radius size
/// <br/><br/> One of: `base` (8px), `secondary` (4px), `none` (0px)
///
/// @example scss - Usage
///   .element {
///     @include border-top-radius(secondary);
///   }
///
/// @example css - CSS Output
///   .element {
///     border-top-left-radius: 4px;
///     border-top-right-radius: 4px;
///   }
///

@mixin border-top-radius($size: base) {
  $map: $border-radius-map;
  $value: map-get($map, $size);

  @if map-has-key($map, $size) {
    border-top-left-radius: $value;
    border-top-right-radius: $value;
  } @else {
    @error "Border radius `#{$size}` not found. #{map-list-values($map)}";
  }
}

///
/// Provides a concise, one-line method for setting `border-radius` on both the
/// top-right and bottom-right of a box.
///
/// @param {String} $size [base]- The border radius size
/// <br/><br/> One of: `base` (8px), `secondary` (4px), `none` (0px)
///
/// @example scss - Usage
///   .element {
///     @include border-right-radius(base);
///   }
///
/// @example css - CSS Output
///   .element {
///     border-bottom-right-radius: 8px;
///     border-top-right-radius: 8px;
///   }
///

@mixin border-right-radius($size: base) {
  $map: $border-radius-map;
  $value: map-get($map, $size);

  @if map-has-key($map, $size) {
    border-bottom-right-radius: $value;
    border-top-right-radius: $value;
  } @else {
    @error "Border radius `#{$size}` not found. #{map-list-values($map)}";
  }
}

///
/// Provides a concise, one-line method for setting `border-radius` on both the
/// bottom-left and bottom-right of a box.
///
/// @param {String} $size [base]- The border radius size
/// <br/><br/> One of: `base` (8px), `secondary` (4px), `none` (0px)
///
/// @example scss - Usage
///   .element {
///     @include border-bottom-radius(base);
///   }
///
/// @example css - CSS Output
///   .element {
///     border-bottom-left-radius: 8px;
///     border-bottom-right-radius: 8px;
///   }
///

@mixin border-bottom-radius($size: base) {
  $map: $border-radius-map;
  $value: map-get($map, $size);

  @if map-has-key($map, $size) {
    border-bottom-left-radius: $value;
    border-bottom-right-radius: $value;
  } @else {
    @error "Border radius `#{$size}` not found. #{map-list-values($map)}";
  }
}

///
/// Provides a concise, one-line method for setting `border-radius` on both the
/// top-left and bottom-left of a box.
///
/// @param {String} $size [base]- The border radius size
/// <br/><br/> One of: `base` (8px), `secondary` (4px), `none` (0px)
///
/// @example scss - Usage
///   .element {
///     @include border-left-radius(base);
///   }
///
/// @example css - CSS Output
///   .element {
///     border-bottom-left-radius: 8px;
///     border-top-left-radius: 8px;
///   }
///

@mixin border-left-radius($size: base) {
  $map: $border-radius-map;
  $value: map-get($map, $size);

  @if map-has-key($map, $size) {
    border-bottom-left-radius: $value;
    border-top-left-radius: $value;
  } @else {
    @error "Border radius `#{$size}` not found. #{map-list-values($map)}";
  }
}
