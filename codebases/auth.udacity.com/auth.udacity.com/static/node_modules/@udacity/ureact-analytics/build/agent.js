'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.createAgent = exports.default = undefined;

var _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
            }
        }
    }
    return target;
};

var _createClass = function() {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();

var _utils = require('./utils');

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var DEFAULT_SRC = 'https://analytics-iframe.udacity.com';

var logger = console ? console : ['log', 'error', 'warn'].reduce(function(obj, m) {
    obj[m] = function() {};
    return obj;
}, {});

var Agent = function() {
    /**
     * Constructor
     * @param {Object} config overrides, e.g. interval, src, threshold
     * @return {Agent} an instance of an analytics agent
     */
    function Agent() {
        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _classCallCheck(this, Agent);

        this.config = _extends({
            interval: 1000,
            src: DEFAULT_SRC,
            threshold: 100
        }, config);

        this.iframe = null;
        this.queue = [];
    }

    /**
     * Initializes the agent, creating an iframe and loading analytics inside it
     * @param  {String}  key (Segment write key)
     * @param  {boolean} useProxy (use segment-proxy: analyticsevents.udacity.com)
     * @return {Promise} resolves initialized agent
     */


    _createClass(Agent, [{
        key: 'init',
        value: function init() {
            var _this = this;

            var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.config.key;
            var useProxy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            this.config.key = key;

            if (!key) {
                throw new Error('No write key specified');
            }

            var interval = this.config.interval;


            return Promise.resolve(this.iframe).then(function(existing) {
                if (existing) {
                    throw new Error('Analytics agent is already initialized');
                } else {
                    _this._push('load', [key]);
                    return _this._createIframe();
                }
            }).then(function(iframe) {
                _this.iframe = iframe;
                // useProxy message is handled in this repo: https://github.com/udacity/analytics-iframe
                // It sets apiHost field on window.analytics._integrations['Segment.io'].options Object
                // to be analyticsevents.udacity.com (segment-proxy).
                if (useProxy) {
                    _this._push('useProxy');
                }

                setInterval(_this.dispatch.bind(_this), interval);
                return _this;
            });
        }

        /**
         * Clock method that dispatches items from the queue
         * @return {void}
         */

    }, {
        key: 'dispatch',
        value: function dispatch() {
            var periodEnd = Date.now() + this.config.interval;

            if (this.queue.length > this.config.threshold) {
                this._flushAll();
            }

            while (this.queue.length > 0 && Date.now() < periodEnd && (0, _utils.isFunction)(this.iframe.contentWindow.postMessage)) {
                var message = this.queue.shift() || {};
                this.iframe.contentWindow.postMessage(JSON.stringify(_extends({
                    type: 'analytics'
                }, message)), this.config.src);
            }
        }

        /**
         * Identify (https://segment.com/docs/sources/website/analytics.js/#identify)
         */

    }, {
        key: 'identify',
        value: function identify() {
            var _this2 = this,
                _arguments = arguments;

            var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                id = _ref.id,
                email = _ref.email;

            var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function() {};

            return this._push('identify', [id, {
                email: email
            }, null]).then(function() {
                return _this2._invoke(callback, _this2, _arguments);
            });
        }

        /**
         * Page (https://segment.com/docs/sources/website/analytics.js/#page)
         */

    }, {
        key: 'page',
        value: function page(category, name) {
            var pageProperties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            var _this3 = this,
                _arguments2 = arguments;

            var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var callback = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : function() {};

            var properties = _extends({
                url: window.location.href,
                title: document.title,
                referrer: document.referrer,
                search: window.location.search,
                path: document.location.href
            }, pageProperties);

            return this._push('page', [category, name, properties, options]).then(function() {
                return _this3._invoke(callback, _this3, _arguments2);
            });
        }

        /**
         * Track (https://segment.com/docs/sources/website/analytics.js/#track)
         */

    }, {
        key: 'track',
        value: function track(eventName, properties) {
            var _this4 = this,
                _arguments3 = arguments;

            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
            var callback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function() {};

            return this._push('track', [eventName, properties, options]).then(function() {
                return _this4._invoke(callback, _this4, _arguments3);
            });
        }
    }, {
        key: '_createIframe',
        value: function _createIframe() {
            var _this5 = this;

            return new Promise(function(resolve, reject) {
                var iframe = document.createElement('iframe');
                iframe.src = _this5.config.src;
                iframe.style.display = 'none';
                iframe.height = 0;
                iframe.width = 0;
                iframe['aria-hidden'] = 'true';

                iframe.onload = function() {
                    resolve(iframe);
                };

                try {
                    document.body.appendChild(iframe);
                } catch (error) {
                    iframe.parentNode.removeChild(iframe);
                    reject(new Error('IFrame failed to load: ' + error.message));
                }
            });
        }
    }, {
        key: '_flushAll',
        value: function _flushAll() {
            logger.warn('Flushing ' + this.queue.length + ' events...');
            this.queue.length = 0;
        }
    }, {
        key: '_push',
        value: function _push(method, args) {
            var _this6 = this;

            return new Promise(function(resolve, reject) {
                if (!method) {
                    reject(new Error('Must supply method'));
                }
                _this6.queue.push({
                    method: method,
                    args: args
                });
                resolve();
            });
        }
    }, {
        key: '_invoke',
        value: function _invoke(callback, context, args) {
            if ((0, _utils.isFunction)(callback)) {
                callback.apply(context, args);
            }
            return args;
        }
    }]);

    return Agent;
}();

function createAgent() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
    }

    return new(Function.prototype.bind.apply(Agent, [null].concat(args)))();
}

exports.default = Agent;
exports.createAgent = createAgent;