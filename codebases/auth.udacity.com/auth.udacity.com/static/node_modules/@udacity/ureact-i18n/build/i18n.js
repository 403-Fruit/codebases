'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.I18n = exports.I18N_CONSTANTS = undefined;

var _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
            }
        }
    }
    return target;
};

var _createClass = function() {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();

var _cookiesJs = require('cookies-js');

var cookies = _interopRequireWildcard(_cookiesJs);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _jwtDecode = require('jwt-decode');

var _jwtDecode2 = _interopRequireDefault(_jwtDecode);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _pseudolocalize = require('./pseudolocalize');

var _pseudolocalize2 = _interopRequireDefault(_pseudolocalize);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};
        if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }
        newObj.default = obj;
        return newObj;
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
        }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

/**
 * Private constants use throughout the module, that won't be exposed to external modules
 * @type {{GEO_API_HEADER: string, GLOBAL_KEY: string, JWT_TOKEN_KEY: string, JWT_TOKEN_KEY_OLD: string, LOCATION_METHOD: {QUERY_PARAM: string, USER_PREFERENCE_API: string, BROWSER_PREFERENCE: string, BERLIOZ: string, DEFAULT: string}, OLD_GLOBAL_KEY: string, USER_PREF_LANG_API: string}}
 */
var I18N_PRIVATE_CONSTANTS = {
    GEO_API_HEADER: 'X-Berlioz-Country',
    GLOBAL_KEY: '@udacity/ureact-i18n__locale',
    GLOBAL_COOKIE_KEY: 'udacity__locale',
    GLOBAL_LOCALE_MAP_KEY: '@udacity/ureact-i18n__locale_map',
    JWT_TOKEN_KEY: '_jwt',
    JWT_TOKEN_KEY_OLD: '_jwt_token',
    LOCATION_METHOD: {
        QUERY_PARAM: '_setLocaleFromQueryParam',
        BROWSER_COOKIE: '_setLocaleFromCookie',
        //USER_PREFERENCE:      '_setLocaleFromUserPreference',      // TODO: enable this when JWT supports preferred_language
        USER_PREFERENCE_API: '_setLocaleFromUserPreferenceApi', // TODO: remove this when JWT supports preferred_language
        BROWSER_PREFERENCE: '_setLocaleFromBrowserPreference',
        GEO_API: '_setLocaleFromGeoAPI',
        DEFAULT: '_setDefaultLocale'
    },
    PSEUDOLOCALIZE_KEY: '__test__',
    USER_PREF_LANG_API: 'https://classroom-content.udacity.com/api/v1/graphql'
};

/**
 * Public constants use throughout the module, and are exposed to external modules
 * @type {{DEFAULT_LOCALE: string, DEFAULT_LOCATION: string, GEO_API: string, LOCALE_MAP: {ar: string, de: string, en-us: string, es: string, id: string, ja: string, ko: string, pt-br: string, zh-cn: string}}}
 */
var I18N_CONSTANTS = exports.I18N_CONSTANTS = {
    DEFAULT_LOCALE: 'en-us',
    DEFAULT_LOCATION: 'US',
    GEO_API: 'https://geode.udacity.com',
    LOCALE_MAP: {
        ar: 'العربية',
        de: 'Deutsch',
        'en-us': 'English',
        es: 'Español',
        id: 'Bahasa Indonesia',
        ja: '日本語',
        ko: '한국어',
        'pt-br': 'Português',
        uz: "O'zbekcha",
        'zh-cn': '中文（简体）'
    }
};

/**
 * Used on the activate method, determines the fixed priority order used to set the locale
 * @type {String[]}
 */
var LOCATION_METHOD_ORDER = [I18N_PRIVATE_CONSTANTS.LOCATION_METHOD.QUERY_PARAM, I18N_PRIVATE_CONSTANTS.LOCATION_METHOD.BROWSER_COOKIE, I18N_PRIVATE_CONSTANTS.LOCATION_METHOD.BROWSER_PREFERENCE, I18N_PRIVATE_CONSTANTS.LOCATION_METHOD.DEFAULT];

var I18n = exports.I18n = function() {
    _createClass(I18n, [{
        key: 'activate',

        /**
         * Handle initialization of the library, setting the locale automatically from a priority order:
         * 1) From 'locale=' query parameter
         * 2) From Cookie key `udacity__locale`
         * 3) From User browser's preference
         * 4) Defaults to 'en-us' when all the above failed, this last method will always resolve the promise.
         * @returns {Promise} Every `setLocale...` method calls `setLocale` at the end thus returning a Promise
         * @public
         */
        value: function activate() {
            var _this = this;

            var orders = LOCATION_METHOD_ORDER;
            if (this.options.refresh) {
                orders = [I18N_PRIVATE_CONSTANTS.LOCATION_METHOD.USER_PREFERENCE_API].concat(LOCATION_METHOD_ORDER);
            }
            /**
             * Iterate over each location method defined,
             * return directly the method promise if it's the first iteration,
             * otherwise "thenefy" the next method so that it creates a promise chain
             */
            return orders.reduce(function(promise, method) {
                return promise.then(_this._tryNextLocaleMethod(method)).catch(function() {
                    return false;
                });
            }, Promise.resolve(false));
        }

        // This is THE translation function that takes a key and translates based on current locale

    }]);

    /**
     *
     * @param {Object} localeFileContext - Context for the locale files (example: require.context('./locales'))
     * @param {Object} options - The options to be used to configure the plugin
     * @param {Object} options.moment - Reference to the `moment` instance of the app to have this plugin set it's locale
     * @param {Object} options.debug - Allow for debug items like pseudolocalization, default: false
     * @param {boolean} options.refresh - force query locale from user preference API
     */
    function I18n(localeFileContext, options) {
        var _this2 = this;

        _classCallCheck(this, I18n);

        this.__ = function(symbol) {
            for (var _len = arguments.length, compileArgs = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                compileArgs[_key - 1] = arguments[_key];
            }

            var localization = _this2._lookup(symbol, _this2.getLocale());

            return shouldRenderHTML(compileArgs) ? renderHTML(localization(compileArgs[0])) : localization(compileArgs[0]);
        };

        this._lookup = _lodash2.default.memoize(function _lookupSymbolResolver(symbol, locale) {
            var localeMap = this._getLocaleMap(locale);

            var result = void 0;
            if (this.options.debug && locale === I18N_PRIVATE_CONSTANTS.PSEUDOLOCALIZE_KEY) {
                result = (0, _pseudolocalize2.default)(symbol);
            } else {
                result = symbol ? localeMap && localeMap[symbol] || symbol : '';
            }

            // TODO: remove this in next release when string replacement is removed
            return result.indexOf('%s') !== -1 ? result : _lodash2.default.template(result);
        }, function _lookupCacheResolver(symbol, locale) {
            return locale + '-' + symbol;
        });

        this._tryNextLocaleMethod = function(nextMethod) {
            return function(lastTrySuccess) {
                return !lastTrySuccess ? _this2[nextMethod]() : lastTrySuccess;
            };
        };

        var defaultOptions = {
            allowPseudo: false
        };
        this.options = _extends({}, defaultOptions, options);
        this._setLocaleMap(localeFileContext);
    }

    /**
     * Return current locale
     * @public
     * @returns {string}
     */


    _createClass(I18n, [{
        key: 'getLocale',
        value: function getLocale() {
            if (!window[I18N_PRIVATE_CONSTANTS.GLOBAL_KEY]) {
                warnDeveloper('UREACT-I18N - MISUSE WARNING: Component might not have been activated properly.\n         Make sure you run i18n.activate() before your DOM renders (check the docs).\n         Default language is ' + I18N_CONSTANTS.DEFAULT_LOCALE);
            }
            return (window[I18N_PRIVATE_CONSTANTS.GLOBAL_KEY] || I18N_CONSTANTS.DEFAULT_LOCALE).toLowerCase();
        }

        /**
         * Return current language for the current locale
         * @public
         * @returns {string}
         */

    }, {
        key: 'getLanguage',
        value: function getLanguage() {
            return I18N_CONSTANTS.LOCALE_MAP[this.getLocale()];
        }

        /**
         * Save the locale in the cookie store and expiration with 5 years
         * @param {string} locale
         * @public
         */

    }, {
        key: 'saveLocaleToCookie',
        value: function saveLocaleToCookie(locale, expires) {
            if (!expires) {
                var date = new Date();
                date.setFullYear(date.getFullYear() + 5);
                expires = date.toUTCString();
            }
            document.cookie = I18N_PRIVATE_CONSTANTS.GLOBAL_COOKIE_KEY + '=' + locale + '; domain=.udacity.com;expires=' + expires + '; path=/;secure;';
        }

        /**
         * Sets the default locale
         * @private
         * @returns {Promise}
         */

    }, {
        key: '_setDefaultLocale',
        value: function _setDefaultLocale() {
            return this._setLocale(I18N_CONSTANTS.DEFAULT_LOCALE);
        }

        /**
         * Sets the locale base on the cookie key
         */

    }, {
        key: '_setLocaleFromCookie',
        value: function _setLocaleFromCookie() {
            return this._setLocale(this._getCookieLocale());
        }

        /**
         * Sets the locale based on the geolocation API
         * @private
         * @returns {Promise}
         */

    }, {
        key: '_setLocaleFromGeoAPI',
        value: function _setLocaleFromGeoAPI() {
            var _this3 = this;

            return this.fetchGeoLocation().then(function(location) {
                return _this3._setLocale(location.countryCode);
            });
        }

        /**
         * Sets locale from the user's browser configuration
         * @private
         * @returns {Promise}
         */

    }, {
        key: '_setLocaleFromBrowserPreference',
        value: function _setLocaleFromBrowserPreference() {
            return this._setLocale(this._getNavigatorLocale());
        }

        /**
         * Sets locale from 'locale=' query param
         * @private
         * @returns {Promise}
         */

    }, {
        key: '_setLocaleFromQueryParam',
        value: function _setLocaleFromQueryParam() {
            return this._setLocale(getParameterByName('locale', this._getCurrentURLParams()));
        }

        /**
         * Sets locale from user account's language preference
         * @private
         * @returns {Promise}
         */

    }, {
        key: '_setLocaleFromUserPreference',
        value: function _setLocaleFromUserPreference() {
            var token = this._getJWT();
            return this._setLocale(token ? (0, _jwtDecode2.default)(token)['l'] : null);
        }

        /**
         * Sets locale by fetching the user account's language preference from the server
         * @private
         * @returns {Promise}
         */

    }, {
        key: '_setLocaleFromUserPreferenceApi',
        value: function _setLocaleFromUserPreferenceApi() {
            var _this4 = this;

            var token = this._getJWT();
            var query = '\n    query UserSettingsQuery {\n      user {\n        preferred_language\n      }\n    }';
            if (!token) {
                return this._setLocale(null);
            }
            return (0, _axios2.default)({
                method: 'POST',
                url: I18N_PRIVATE_CONSTANTS.USER_PREF_LANG_API,
                headers: {
                    Authorization: 'Bearer ' + token
                },
                data: {
                    query: query
                }
            }).then(function(response) {
                var result = void 0;

                if (response.error && response.error.length) {
                    console.error(response.error[0]);
                }

                result = _lodash2.default.get(response, 'data.user.preferred_language') || _lodash2.default.get(response, 'data.data.user.preferred_language');
                return _this4._setLocale(result ? result : null);
            });
        }

        /**
         * Fetch the user geolocation by hitting the https://geode.udacity.com API
         * @public
         * @returns {Promise} which passes the location object along (see https://geode.udacity.com)
         */

    }, {
        key: 'fetchGeoLocation',
        value: function fetchGeoLocation() {
            return _axios2.default.get(I18N_CONSTANTS.GEO_API).then(function(response) {
                return response.data;
            });
        }

        /**
         * Attempts to lookup by locale and then fallback to language
         * It's memoized in order to speedup sequential lookups
         * @type {Function}
         * @param {String} locale - name of locale to look
         * @param {String} symbol - string to search for replacement
         * @returns {Function|String}
         * @private
         */

    }, {
        key: '_setLocale',


        /**
         * Sets locale for usage on both this plugin as well as moment.js
         * @param locale
         * @returns {Promise}
         * @private
         */
        value: function _setLocale(locale) {
            var _this5 = this;

            return new Promise(function(resolve) {
                if (!_lodash2.default.isString(locale) || locale === '') {
                    // We resolve with false to try with another method down the priority list through the `activate()` method
                    // We can't reject cause the error propagates down the promise chain, thus we aren't able to recover
                    // the status of the promise and resolve it with the result of another method (which is another promise)
                    return resolve(false);
                }
                locale = locale.toLowerCase();
                window[I18N_PRIVATE_CONSTANTS.GLOBAL_KEY] = locale;
                // Provide support for date/time localization
                if (_this5.options && _this5.options.moment) {
                    _this5.options.moment.locale(locale);
                }
                return resolve(_this5.getLocale());
            });
        }

        /**
         * Sets the locale map to global singleton
         * @param localeFileContext
         * @private
         */

    }, {
        key: '_setLocaleMap',
        value: function _setLocaleMap(localeFileContext) {
            window[I18N_PRIVATE_CONSTANTS.GLOBAL_LOCALE_MAP_KEY] = mapLocalesFromFiles(localeFileContext, window[I18N_PRIVATE_CONSTANTS.GLOBAL_LOCALE_MAP_KEY]);
        }

        /**
         * Returns the map (from a global singleton) for any given locale
         * @param locale
         * @returns {*}
         * @private
         */

    }, {
        key: '_getLocaleMap',
        value: function _getLocaleMap(locale) {
            return window[I18N_PRIVATE_CONSTANTS.GLOBAL_LOCALE_MAP_KEY][locale] || window[I18N_PRIVATE_CONSTANTS.GLOBAL_LOCALE_MAP_KEY][locale.split('-')[0]];
        }

        /**
         * Helper to get properties from location
         * @returns {*}
         * @private
         */

    }, {
        key: '_getCurrentURLParams',
        value: function _getCurrentURLParams() {
            return window.location.search;
        }

        /**
         * Helper to get properties from navigator
         * Note: IE11/Opera will fallback to navigator.browserLanguage
         * @returns {string}
         * @private
         */

    }, {
        key: '_getNavigatorLocale',
        value: function _getNavigatorLocale() {
            return navigator.language || navigator.userLanguage || navigator.browserLanguage || navigator.userLanguage;
        }

        /**
         * Helper to get properties from cookie.
         * Cookie will store
         * @returns {string}
         * @private
         */

    }, {
        key: '_getCookieLocale',
        value: function _getCookieLocale() {
            var cookies = document.cookie ? document.cookie.split(';') : [];
            // Regard the document from MDN
            // https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie#Read_all_cookies_accessible_from_this_location
            // Note that each key and value may be surrounded by whitespace (space and tab characters):
            var cookie = cookies.filter(function(c) {
                return c.indexOf(I18N_PRIVATE_CONSTANTS.GLOBAL_COOKIE_KEY) > -1;
            })[0];
            if (cookie) {
                var locale = cookie.split('=')[1];
                if (locale && locale.trim() !== '') {
                    return locale.trim();
                }
            }
            return;
        }

        /**
         * Helper function to return user token
         * @returns {string}
         * @private
         */

    }, {
        key: '_getJWT',
        value: function _getJWT() {
            return cookies.get(I18N_PRIVATE_CONSTANTS.JWT_TOKEN_KEY) || cookies.get(I18N_PRIVATE_CONSTANTS.JWT_TOKEN_KEY_OLD);
        }

        /**
         * Helper function to create cascade of promises to automatically set the location based on priority
         * @param nextMethod - setLocale{method} to call next when last try failed
         * @returns {function(*)}
         * @private
         */

    }]);

    return I18n;
}();

function getBasename(key) {
    return _lodash2.default.last(key.split('/')).split('.')[0];
}

function getParameterByName(name, url) {
    if (!url) {
        url = window.location.href;
    }
    name = name.replace(/[\[\]]/g, '\\$&');
    var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
        results = regex.exec(url);
    if (!results) {
        return null;
    }
    if (!results[2]) {
        return '';
    }
    return decodeURIComponent(results[2].replace(/\+/g, ' '));
}

function mapLocalesFromFiles(localeFileContext, oldLocales) {
    var newLocales = void 0;

    // if require.context was used to pass context into the constructor
    if (_lodash2.default.isFunction(localeFileContext)) {
        warnDeveloper('\n      UREACT-I18N - DEPRECATION WARNING: use of \'require.context\' when initializing a new I18n instance is deprecated. See updated usage documentation at: https://github.com/udacity/ureact-i18n#step-1-instantiate-a-new-i18n-object\n    ');

        newLocales = _lodash2.default.chain(localeFileContext.keys()).filter(function(filename) {
            return (/\.js$/.test(filename));
        }).map(function(filename) {
            var name = getBasename(filename).toLowerCase();
            return [name, localeFileContext(filename)];
        }).fromPairs().value();

        // if locale files were individually required
    } else {
        newLocales = localeFileContext;
    }

    // combine oldLocales with newLocales
    return _lodash2.default.reduce(newLocales, function(memo, latestLocales, lang) {
        memo[lang] = _lodash2.default.isUndefined(oldLocales) || _lodash2.default.isUndefined(oldLocales[lang]) ? latestLocales : _extends({}, oldLocales[lang], latestLocales);
        return memo;
    }, oldLocales || {});
}

function renderHTML(string) {
    var Wrapper = function(_React$Component) {
        _inherits(Wrapper, _React$Component);

        function Wrapper() {
            _classCallCheck(this, Wrapper);

            return _possibleConstructorReturn(this, (Wrapper.__proto__ || Object.getPrototypeOf(Wrapper)).apply(this, arguments));
        }

        _createClass(Wrapper, [{
            key: 'render',
            value: function render() {
                return _react2.default.createElement('span', {
                    dangerouslySetInnerHTML: {
                        __html: string
                    }
                });
            }
        }]);

        return Wrapper;
    }(_react2.default.Component);

    return _react2.default.createElement(Wrapper, null);
}

function shouldRenderHTML(compileArgs) {
    var options = compileArgs[compileArgs.length - 1];
    return options && options.renderHTML;
}

function warnDeveloper(msg) {
    if (process.env.NODE_ENV !== 'production') {
        console.warn(msg);
    }
}