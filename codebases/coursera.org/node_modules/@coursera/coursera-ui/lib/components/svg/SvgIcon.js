function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

//
import * as React from 'react';
import PropTypes from 'prop-types';
import generateUUID from "../../utils/generateUUID";
import { StyleSheet, css, color, transition, iconSize } from "../../styles/theme";
import _ from 'underscore'; // Dynamic styles

function getStyles(_ref) {
  var propColor = _ref.propColor,
      hoverColor = _ref.hoverColor,
      size = _ref.size,
      hovered = _ref.hovered;
  return {
    SvgIcon: {
      fill: hovered && hoverColor ? hoverColor : propColor,
      height: size,
      width: size
    }
  };
}

var styles = StyleSheet.create({
  SvgIcon: {
    display: 'inline-block',
    verticalAlign: 'middle',
    color: color.icon,
    transition: transition.easeOut(),
    userSelect: 'none'
  }
});

var SvgIcon =
/*#__PURE__*/
function (_React$Component) {
  _inherits(SvgIcon, _React$Component);

  function SvgIcon(props) {
    var _this;

    _classCallCheck(this, SvgIcon);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SvgIcon).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "defaultProps", void 0);

    _defineProperty(_assertThisInitialized(_this), "handleMouseLeave", function (e) {
      if (!_this.props.disableMouseEvent) {
        _this.setState(function () {
          return {
            hovered: false
          };
        });

        if (_this.props.onMouseLeave) {
          _this.props.onMouseLeave(e);
        }
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleMouseEnter", function (e) {
      if (!_this.props.disableMouseEvent) {
        _this.setState(function () {
          return {
            hovered: true
          };
        });

        if (_this.props.onMouseEnter) {
          _this.props.onMouseEnter(e);
        }
      }
    });

    _this.state = {
      hovered: !!props.hovered,
      uuid: 'default'
    };
    return _this;
  }

  _createClass(SvgIcon, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if ('hovered' in nextProps && !!nextProps.hovered !== !!this.state.hovered) {
        this.setState(function () {
          return {
            hovered: !!nextProps.hovered
          };
        });
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.setState(function () {
        return {
          uuid: generateUUID()
        };
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          colorAlt = _this$props.color,
          hoverColor = _this$props.hoverColor,
          isThemeDark = _this$props.isThemeDark,
          style = _this$props.style,
          children = _this$props.children,
          size = _this$props.size,
          viewBox = _this$props.viewBox,
          htmlAttributes = _this$props.htmlAttributes,
          title = _this$props.title,
          desc = _this$props.desc,
          suppressTitle = _this$props.suppressTitle,
          rest = _objectWithoutProperties(_this$props, ["color", "hoverColor", "isThemeDark", "style", "children", "size", "viewBox", "htmlAttributes", "title", "desc", "suppressTitle"]);

      var _this$state = this.state,
          hovered = _this$state.hovered,
          uuid = _this$state.uuid;
      var iconColor = colorAlt || (isThemeDark ? color.iconThemeDark : color.icon);
      var dynamicStyles = getStyles({
        propColor: iconColor,
        hoverColor: hoverColor || iconColor,
        size: size || iconSize.sm,
        hovered: hovered
      });

      var mergedStyles = _objectSpread({}, dynamicStyles.SvgIcon, style);

      var additionalProps = _(rest).omit('disableMouseEvent', 'hovered');

      var a11yTitleId = title ? "".concat(title.replace(/\s/g, '')).concat(uuid) : uuid;
      var a11yDescId = "".concat(a11yTitleId, "Desc"); // using labelling strategy from https://developer.paciellogroup.com/blog/2013/12/using-aria-enhance-svg-accessibility/

      var labelledBy = "".concat(a11yTitleId, " ").concat(a11yDescId);
      return React.createElement("svg", _extends({}, additionalProps, htmlAttributes, css(styles.SvgIcon), suppressTitle ? {
        'aria-hidden': true,
        'focusable': 'false'
      } : {}, {
        style: mergedStyles,
        onMouseEnter: this.handleMouseEnter,
        onMouseLeave: this.handleMouseLeave,
        viewBox: viewBox,
        role: "img",
        "aria-labelledby": labelledBy,
        xmlns: "http://www.w3.org/2000/svg"
      }), !suppressTitle && title && React.createElement("title", {
        id: a11yTitleId
      }, title), desc && React.createElement("desc", {
        id: a11yDescId
      }, desc), React.Children.map(children, function (child) {
        return child && React.cloneElement(child, {
          role: 'presentation'
        }) || null;
      }));
    }
  }]);

  return SvgIcon;
}(React.Component);

_defineProperty(SvgIcon, "propTypes", {
  // Override the inline-styles of the root element
  style: PropTypes.object,
  // eslint-disable-line react/forbid-prop-types
  // Attributes overwrite.
  htmlAttributes: PropTypes.object,
  // eslint-disable-line react/forbid-prop-types
  // Elements passed into the SVG Icon.
  children: PropTypes.node,
  // Fill color of the svg, default to color.icon.
  color: PropTypes.string,
  isThemeDark: PropTypes.bool,
  // Width and height of the svg, should be equal, so only use size.
  size: PropTypes.number,
  // Accessible title for the icon is shown by browsers as a hover tooltip, defaults are defined in each icon
  title: PropTypes.string,
  // Longer Accessible description for the icon, assistive technologies replace the image with the desc
  desc: PropTypes.string,
  // Allows supressing the title for purely presentational icons
  suppressTitle: PropTypes.bool,
  // Default to color.darkPrimary
  hoverColor: PropTypes.string,
  onMouseEnter: PropTypes.func,
  onMouseLeave: PropTypes.func,
  // Allows you to redefine what the coordinates
  viewBox: PropTypes.string,
  hovered: PropTypes.bool,
  // Sometimes may need to disable mouse event so hovered state can
  // be passed in, e.g. SvgButton
  disableMouseEvent: PropTypes.bool
});

_defineProperty(SvgIcon, "defaultProps", {
  onMouseEnter: function onMouseEnter() {},
  onMouseLeave: function onMouseLeave() {},
  suppressTitle: false,
  color: color.icon,
  isThemeDark: false,
  viewBox: '0 0 24 24',
  size: iconSize.sm,
  // 24
  style: {},
  htmlAttributes: {},
  disableMouseEvent: false
});

export { SvgIcon as default };