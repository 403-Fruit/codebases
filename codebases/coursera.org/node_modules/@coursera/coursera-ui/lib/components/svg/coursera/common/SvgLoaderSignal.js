function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import * as React from 'react';
import PropTypes from 'prop-types';
import { css, StyleSheet, color, spacing } from "../../../../styles/theme";

var _t = function _t(t) {
  return t;
};

var pulsateKeyFrames = {
  '0%': {
    transform: 'scale(.1)',
    opacity: 0
  },
  '40%': {
    opacity: 1
  },
  '100%': {
    transform: 'scale(1)',
    opacity: 0
  }
};
var styles = StyleSheet.create({
  SvgLoaderSignal: {
    position: 'relative'
  },
  loader: {
    textIndent: '-9999em',
    borderStyle: 'solid',
    margin: "".concat(spacing.md, " 0 0 ").concat(spacing.md),
    opacity: 0,
    position: 'absolute',
    top: "-".concat(spacing.md),
    left: "-".concat(spacing.md),
    animationName: [pulsateKeyFrames],
    animationDuration: '1s',
    animationIterationCount: 'infinite'
  }
}); // TODO[Audrey]: WIP

var SvgLoaderSignal = function SvgLoaderSignal(_ref) {
  var _ref$htmlAttributes = _ref.htmlAttributes,
      htmlAttributes = _ref$htmlAttributes === void 0 ? {} : _ref$htmlAttributes,
      _ref$style = _ref.style,
      style = _ref$style === void 0 ? {} : _ref$style,
      isThemeDark = _ref.isThemeDark,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 32 : _ref$size,
      fillAlt = _ref.fill,
      _ref$borderWidth = _ref.borderWidth,
      borderWidth = _ref$borderWidth === void 0 ? '0.2em' : _ref$borderWidth;
  var fill = fillAlt || (isThemeDark ? color.white : color.primary);
  return React.createElement("div", _extends({}, htmlAttributes, css(styles.SvgLoaderSignal), {
    style: _objectSpread({
      width: size,
      height: size
    }, style)
  }), React.createElement("div", _extends({}, css(styles.loader), {
    style: {
      width: size,
      height: size,
      borderRadius: size,
      borderColor: fill,
      borderWidth: borderWidth
    }
  }), _t('Loading...')));
};

SvgLoaderSignal.propTypes = {
  /**
   * Override the inline-styles of the root element
   */
  style: PropTypes.object,

  /**
   * Additional control for the root element, can add data-courselenium, ariaLabel...
   */
  htmlAttributes: PropTypes.object,

  /**
   * Whether component has dark bg parent element
   */
  isThemeDark: PropTypes.bool,
  size: PropTypes.number,
  fill: PropTypes.string,
  borderWidth: PropTypes.number
};
SvgLoaderSignal.displayName = 'SvgLoaderSignal';
export default SvgLoaderSignal;