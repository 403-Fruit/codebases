function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

//
import * as React from 'react';
import { css, color, font, spacing, StyleSheet } from "../../../styles/theme";
var CONFIG = {
  styles: {
    selected: {
      color: color.primaryTextThemeDark,
      backgroundColor: color.primary
    },
    selectedChildren: {
      color: color.primaryTextThemeDark
    }
  }
};

var DropDownListItem =
/*#__PURE__*/
function (_React$Component) {
  _inherits(DropDownListItem, _React$Component);

  function DropDownListItem() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, DropDownListItem);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DropDownListItem)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "handleClick", function (ev) {
      if (_this.props.onClick) {
        ev.preventDefault();

        _this.props.onClick(ev, _this.props.value);
      }
    });

    return _this;
  }

  _createClass(DropDownListItem, [{
    key: "getStyles",
    value: function getStyles() {
      var isDisabled = this.props.isDisabled;
      var colorStyle = isDisabled ? {
        color: color.border
      } : {};
      return StyleSheet.create({
        DropDownListItem: _objectSpread({
          'fontSize': font.sm,
          'padding': "".concat(spacing.sm, " ").concat(spacing.lg),
          ':hover': {
            cursor: isDisabled ? 'default' : 'pointer'
          }
        }, colorStyle),
        defaultHover: !isDisabled && {
          ':focus': _objectSpread({
            outline: 'none'
          }, CONFIG.styles.selected),
          ':focus *': CONFIG.styles.selectedChildren,
          ':hover': CONFIG.styles.selected,
          ':hover *': CONFIG.styles.selectedChildren
        }
      });
    }
  }, {
    key: "renderChildren",
    value: function renderChildren() {
      var _this$props = this.props,
          children = _this$props.children,
          label = _this$props.label;

      if (children) {
        return React.Children.map(children, function (child) {
          if (!React.isValidElement(child)) {
            return null;
          } // Don't allow focus to be set on children
          // $FlowFixMe


          return React.cloneElement(children, {
            tabIndex: -1
          });
        });
      }

      return label;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          htmlAttributes = _this$props2.htmlAttributes,
          isDisabled = _this$props2.isDisabled,
          value = _this$props2.value,
          onClick = _this$props2.onClick,
          rootClassName = _this$props2.rootClassName,
          style = _this$props2.style; // This allows rootClassName to override hover colors

      var styles = this.getStyles();
      var hoverStyles = rootClassName || styles.defaultHover;
      return React.createElement("li", _extends({
        role: "menuitem",
        tabIndex: isDisabled ? -1 : 0,
        value: value,
        onClick: isDisabled ? undefined : this.handleClick,
        style: style
      }, css(hoverStyles, styles.DropDownListItem), htmlAttributes), this.renderChildren());
    }
  }]);

  return DropDownListItem;
}(React.Component);

_defineProperty(DropDownListItem, "defaultProps", {
  onClick: function onClick() {}
});

export { DropDownListItem as default };