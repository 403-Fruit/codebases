function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

//

/* eslint-disable no-use-before-define, quote-props, react/forbid-prop-types */
import * as React from 'react';
import PropTypes from 'prop-types';
import Box from "./Box";
import { StyleSheet, css, color, transition } from "../../styles/theme";
import { darken, fade } from "../../utils/colorUtils";
import { dataAttributesFilter } from "../../utils/propProcessors";
import { onKeyPress } from "../../utils/a11yUtils";
var CONFIG = {
  size: {
    sm: {
      fontSize: '0.8rem',
      padding: '0.5rem 1rem',
      minHeight: 36
    },
    md: {
      fontSize: '1rem',
      padding: '0.9rem 2rem',
      minHeight: 48
    },
    lg: {
      fontSize: '1.2rem',
      padding: '1rem 3rem',
      minHeight: 48
    }
  }
};
export var BUTTON_TYPES = {
  primary: 'primary',
  accent: 'accent',
  secondary: 'secondary',
  "default": 'default',
  noStyle: 'noStyle',
  disabled: 'disabled',
  link: 'link',
  icon: 'icon',
  admin: 'admin',
  superUser: 'superUser'
};
export var BUTTON_SIZES = {
  zero: 'zero',
  sm: 'sm',
  md: 'md',
  lg: 'lg'
};
/**
 * A generic Button that accepts children,
 * can be rendered as link, can use together with svgIcons
 * Sample Usage:
 * <Button type="primary" size="sm" label={'sm'}/>
 *
 * <Button isThemeDark={isThemeDark} type="accent">
 *   <SvgMembers isThemeDark={isThemeDark} hoverColor={color.white} />
 * </Button>
 */

export default function Button(props) {
  var _props$rootClassName = props.rootClassName,
      rootClassName = _props$rootClassName === void 0 ? '' : _props$rootClassName,
      children = props.children,
      _props$htmlAttributes = props.htmlAttributes,
      htmlAttributesAlt = _props$htmlAttributes === void 0 ? {} : _props$htmlAttributes,
      _props$style = props.style,
      style = _props$style === void 0 ? {} : _props$style,
      _props$customStyles = props.customStyles,
      customStyles = _props$customStyles === void 0 ? {} : _props$customStyles,
      _props$isThemeDark = props.isThemeDark,
      isThemeDark = _props$isThemeDark === void 0 ? false : _props$isThemeDark,
      label = props.label,
      _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled,
      _onClick = props.onClick,
      _props$size = props.size,
      size = _props$size === void 0 ? 'md' : _props$size,
      typeAlt = props.type,
      _props$tag = props.tag,
      tag = _props$tag === void 0 ? 'button' : _props$tag,
      _props$isTransparent = props.isTransparent,
      isTransparent = _props$isTransparent === void 0 ? false : _props$isTransparent,
      _props$isChildrenOnRi = props.isChildrenOnRight,
      isChildrenOnRight = _props$isChildrenOnRi === void 0 ? false : _props$isChildrenOnRi,
      _refAlt = props._refAlt;
  var htmlAttributes = htmlAttributesAlt;
  var dynamicStyles = getStyles({
    size: size
  });

  var mergedStyles = _objectSpread({}, dynamicStyles.Button, style);

  var Tag = tag;
  var isDisabled = disabled || typeAlt === 'disabled' || htmlAttributes.disabled;
  var type = isDisabled ? BUTTON_TYPES.disabled : typeAlt;
  var disabledAttribute = tag === 'button' ? {
    disabled: !!isDisabled
  } : {};

  if (_onClick) {
    htmlAttributes.onKeyPress = function (e) {
      return onKeyPress(e, _onClick);
    };
  }

  return React.createElement(Tag, _extends({}, htmlAttributes, disabledAttribute, {
    ref: _refAlt,
    onClick: function onClick(event) {
      return !isDisabled && _onClick && _onClick(event);
    }
  }, css(rootClassName, styles.Button, styles[type], styles[size], isThemeDark && styles["".concat(type, "ThemeDark")], isThemeDark && styles["".concat(size, "ThemeDark")], tag !== 'button' && (isThemeDark ? styles["".concat(type, "LinkThemeDark")] : styles["".concat(type, "Link")]), isTransparent && styles.isTransparent, StyleSheet.create(customStyles).Button), dataAttributesFilter(props), {
    style: mergedStyles
  }), React.createElement(Box, {
    alignItems: "center",
    justifyContent: "center",
    tag: "span"
  }, !isChildrenOnRight && children, label, isChildrenOnRight && children));
} // Explicity declare the default props for documentation purpose,

Button.defaultProps = {
  htmlAttributes: {},
  size: 'md',
  style: {},
  customStyles: {},
  isThemeDark: false,
  disabled: false,
  type: BUTTON_TYPES["default"],
  tag: 'button',
  rootClassName: '',
  isTransparent: false,
  isChildrenOnRight: false
};
Button.propTypes = {
  rootClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),

  /*
  * Aphrodite styles object to provide custom styling
  */
  customStyles: PropTypes.object,

  /**
   * Override the inline-styles of the root element
   */
  style: PropTypes.object,
  // eslint-disable-line react/forbid-prop-types

  /**
   * Additional control for the root element, can add data-courselenium, ariaLabel...
   */
  htmlAttributes: PropTypes.object,
  // eslint-disable-line react/forbid-prop-types

  /**
   * Whether button has dark bg parent element
   */
  isThemeDark: PropTypes.bool,

  /**
   * Render the children inside the button, good for icons
   */
  children: PropTypes.node,

  /**
   * The text for the button
   */
  label: PropTypes.node,

  /**
   * click event
   */
  onClick: PropTypes.func,

  /**
   * If disabled, we'll use disabled type
   */
  disabled: PropTypes.bool,

  /**
   * Sometimes you want to remove the background so you can have full control of the styles
   */
  isTransparent: PropTypes.bool,

  /**
   * Render children on the right side if children exists and isChildrenOnRight
   */
  isChildrenOnRight: PropTypes.bool,

  /**
   * Decide the general padding, can be overwritten by style prop
   */
  size: PropTypes.oneOf(Object.keys(BUTTON_SIZES)),

  /**
   * Button types
   */
  type: PropTypes.oneOf(Object.keys(BUTTON_TYPES)),

  /**
   * Allow rendering of different tags, e.g. 'a', 'button', Link
   */
  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),

  /**
   * Dom ref
   */
  _refAlt: PropTypes.func
}; // Dynamic styles

function getStyles(_ref) {
  var size = _ref.size;
  return {
    Button: {},
    icon: {}
  };
}

var basePrimaryStyle = {
  color: color.white,
  backgroundColor: color.primary,
  border: "1px solid ".concat(color.primary),
  ':hover': {
    backgroundColor: color.darkPrimary
  }
};
var styles = StyleSheet.create({
  Button: {
    borderRadius: 2,
    borderWidth: 1,
    borderStyle: 'solid',
    borderColor: 'transparent',
    transition: transition.easeOut(),
    lineHeight: '1rem',
    userSelect: 'none',
    position: 'relative',
    textAlign: 'center',
    display: 'inline-block',
    verticalAlign: 'middle',
    whiteSpace: 'nowrap',
    backgroundImage: 'none',
    cursor: 'pointer',
    filter: 'none',
    textDecoration: 'none',
    fontWeight: 600,
    ':hover': {
      textDecoration: 'none !important'
    },
    ':focus': {
      outline: 'auto 2px rgb(0, 105, 217)',
      textDecoration: 'none !important'
    }
  },
  isTransparent: {
    backgroundColor: 'transparent',
    borderColor: 'transparent',
    ':hover': {
      backgroundColor: 'transparent'
    },
    ':focus': {
      backgroundColor: 'transparent'
    }
  },
  primary: basePrimaryStyle,
  primaryThemeDark: {
    color: color.primary,
    backgroundColor: color.white,
    border: "1px solid ".concat(color.white),
    ':hover': {
      color: color.white,
      backgroundColor: fade(color.white, 0.5),
      borderColor: fade(color.white, 0.5)
    },
    ':focus': {
      color: color.white,
      backgroundColor: fade(color.white, 0.5),
      borderColor: fade(color.white, 0.5)
    }
  },
  admin: _objectSpread({}, basePrimaryStyle, {
    border: "1px solid ".concat(color.admin),
    backgroundColor: color.admin,
    ':hover': {
      backgroundColor: darken(color.admin, 0.3)
    },
    ':focus': {
      backgroundColor: darken(color.admin, 0.3)
    }
  }),
  superUser: _objectSpread({}, basePrimaryStyle, {
    backgroundColor: color.superUser,
    border: "1px solid ".concat(color.superUser),
    ':hover': {
      backgroundColor: darken(color.superUser, 0.3)
    },
    ':focus': {
      backgroundColor: darken(color.superUser, 0.3)
    }
  }),
  primaryLink: {
    color: "".concat(color.white, " !important ")
  },
  primaryLinkThemeDark: {
    color: "".concat(color.primary, " !important")
  },
  accent: {
    color: color.white,
    backgroundColor: color.accent,
    borderColor: color.accent,
    ':hover': {
      color: color.white,
      backgroundColor: darken(color.accent, 0.2),
      borderColor: darken(color.accent, 0.2)
    },
    ':focus': {
      color: color.white,
      backgroundColor: darken(color.accent, 0.2),
      borderColor: darken(color.accent, 0.2)
    }
  },
  accentThemeDark: {
    color: color.white,
    backgroundColor: color.accent,
    borderColor: color.accent,
    ':hover': {
      color: color.white,
      backgroundColor: darken(color.accent, 0.2)
    },
    ':focus': {
      color: color.white,
      backgroundColor: darken(color.accent, 0.2)
    }
  },
  accentLink: {
    borderColor: color.accent,
    color: "".concat(color.white, " !important ")
  },
  accentLinkThemeDark: {
    ':hover': {
      color: "".concat(color.white, " !important "),
      backgroundColor: darken(color.accent, 0.2),
      borderColor: darken(color.accent, 0.2)
    },
    ':focus': {
      color: "".concat(color.white, " !important "),
      backgroundColor: darken(color.accent, 0.2),
      borderColor: darken(color.accent, 0.2)
    }
  },
  secondary: {
    color: color.primary,
    backgroundColor: color.white,
    border: "1px solid ".concat(color.primary),
    ':hover': {
      color: color.white,
      backgroundColor: color.darkPrimary
    },
    ':focus': {
      color: color.white,
      backgroundColor: color.darkPrimary
    }
  },
  secondaryThemeDark: {
    color: color.white,
    backgroundColor: 'transparent',
    border: "1px solid ".concat(color.white),
    ':hover': {
      borderColor: fade(color.white, 0.2),
      color: color.white,
      backgroundColor: fade(color.white, 0.2)
    },
    ':focus': {
      borderColor: fade(color.white, 0.2),
      color: color.white,
      backgroundColor: fade(color.white, 0.2)
    }
  },
  secondaryLink: {
    backgroundColor: color.white,
    border: "1px solid ".concat(color.primary),
    ':hover': {
      color: color.white,
      backgroundColor: color.darkPrimary
    },
    ':focus': {
      color: color.white,
      backgroundColor: color.darkPrimary
    }
  },
  secondaryLinkThemeDark: {
    color: "".concat(color.white, " !important"),
    ':hover': {
      backgroundColor: fade(color.white, 0.2),
      borderColor: fade(color.white, 0.2),
      color: "".concat(color.white, " !important ")
    },
    ':focus': {
      backgroundColor: fade(color.white, 0.2),
      borderColor: fade(color.white, 0.2),
      color: "".concat(color.white, " !important ")
    }
  },
  "default": {
    color: color.primaryText,
    backgroundColor: color.white,
    border: "1px solid ".concat(color.bgDarkGray),
    ':hover': {
      color: color.white,
      backgroundColor: color.darkPrimary,
      border: "1px solid ".concat(color.primary)
    },
    ':focus': {
      color: color.white,
      backgroundColor: color.darkPrimary,
      border: "1px solid ".concat(color.primary)
    }
  },
  defaultThemeDark: {
    color: color.primaryText,
    backgroundColor: color.white,
    border: "1px solid ".concat(color.bgDarkGray),
    ':hover': {
      backgroundColor: fade(color.white, 0.2),
      borderColor: fade(color.white, 0.2)
    },
    ':focus': {
      backgroundColor: fade(color.white, 0.2),
      borderColor: fade(color.white, 0.2)
    }
  },
  defaultLink: {
    color: "".concat(color.primaryText, " !important"),
    ':hover': {
      color: "".concat(color.white, " !important")
    },
    ':focus': {
      color: "".concat(color.white, " !important")
    }
  },
  defaultLinkThemeDark: {
    color: "".concat(color.primaryText, " !important"),
    ':hover': {
      backgroundColor: fade(color.white, 0.2),
      color: "".concat(color.white, " !important ")
    }
  },
  noStyle: {
    backgroundColor: 'transparent',
    color: color.primaryText,
    borderColor: 'transparent',
    ':hover': {
      backgroundColor: 'transparent',
      color: color.darkPrimary
    },
    ':focus': {
      backgroundColor: 'transparent',
      color: color.darkPrimary
    }
  },
  noStyleThemeDark: {
    color: color.white,
    borderColor: 'transparent',
    ':hover': {
      color: color.darkPrimary,
      borderColor: color.darkPrimary
    },
    ':focus': {
      color: color.darkPrimary,
      borderColor: color.darkPrimary
    }
  },
  noStyleLink: {
    color: "".concat(color.primaryText, " !important "),
    borderColor: 'transparent',
    ':hover': {
      color: "".concat(color.white, " !important ")
    },
    ':focus': {
      color: "".concat(color.white, " !important ")
    }
  },
  noStyleLinkThemeDark: {
    color: "".concat(color.white, " !important"),
    borderColor: 'transparent',
    ':hover': {
      color: "".concat(color.primary, " !important ")
    },
    ':focus': {
      color: "".concat(color.primary, " !important ")
    }
  },
  icon: {
    color: color.primaryText,
    backgroundColor: 'transparent',
    borderColor: 'transparent',
    ':hover': {
      color: color.primary,
      borderColor: 'transparent'
    },
    ':focus': {
      color: color.primary,
      borderColor: 'transparent'
    }
  },
  iconThemeDark: {
    color: color.white,
    backgroundColor: 'transparent',
    borderColor: 'transparent',
    ':hover': {
      color: "".concat(color.white, " !important "),
      borderColor: 'transparent'
    },
    ':focus': {
      color: "".concat(color.white, " !important "),
      borderColor: 'transparent'
    }
  },
  iconLink: {
    backgroundColor: 'transparent',
    color: "".concat(color.primaryText, " !important "),
    borderColor: 'transparent',
    ':hover': {
      color: "".concat(color.primary, " !important ")
    },
    ':focus': {
      color: "".concat(color.primary, " !important ")
    }
  },
  iconLinkThemeDark: {
    backgroundColor: 'transparent',
    color: "".concat(color.white, " !important"),
    borderColor: 'transparent',
    ':hover': {
      color: "".concat(color.primary, " !important ")
    },
    ':focus': {
      color: "".concat(color.primary, " !important ")
    }
  },
  link: {
    backgroundColor: 'transparent',
    color: color.primary,
    borderColor: 'transparent',
    ':hover': {
      color: color.darkPrimary,
      backgroundColor: 'transparent'
    },
    ':focus': {
      color: color.darkPrimary,
      backgroundColor: 'transparent'
    }
  },
  linkThemeDark: {
    ':hover': {
      color: "".concat(color.white, " !important "),
      backgroundColor: fade(color.white, 0.2),
      borderColor: fade(color.white, 0.2)
    },
    ':focus': {
      color: "".concat(color.white, " !important "),
      backgroundColor: fade(color.white, 0.2),
      borderColor: fade(color.white, 0.2)
    }
  },
  linkLink: {
    color: "".concat(color.primaryText, " !important "),
    ':hover': {
      color: "".concat(color.primary, " !important ")
    },
    ':focus': {
      color: "".concat(color.primary, " !important ")
    }
  },
  linkLinkThemeDark: {
    color: "".concat(color.white, " !important"),
    ':hover': {
      color: "".concat(color.primary, " !important "),
      backgroundColor: fade(color.white, 0.2)
    },
    ':focus': {
      color: "".concat(color.primary, " !important "),
      backgroundColor: fade(color.white, 0.2)
    }
  },
  disabled: {
    backgroundColor: color.disabled,
    border: "1px solid ".concat(color.disabled),
    color: color.disabledText,
    cursor: 'not-allowed !important',
    // TODO(Audrey): remove once fully migrated
    ':hover': {
      backgroundColor: color.disabled,
      borderColor: color.disabledText
    },
    ':focus': {
      backgroundColor: color.disabled,
      borderColor: color.disabledText
    }
  },
  disabledThemeDark: {},
  disabledLink: {
    color: "".concat(color.disabledText, " !important ")
  },
  disabledLinkThemeDark: {
    color: "".concat(color.disabledText, " !important ")
  },
  zero: {
    padding: 0
  },
  sm: {
    padding: CONFIG.size.sm.padding,
    fontSize: CONFIG.size.sm.fontSize,
    minHeight: CONFIG.size.sm.minHeight
  },
  md: {
    padding: CONFIG.size.md.padding,
    fontSize: CONFIG.size.md.fontSize,
    minHeight: CONFIG.size.md.minHeight
  },
  lg: {
    padding: CONFIG.size.lg.padding,
    fontSize: CONFIG.size.lg.fontSize,
    minHeight: CONFIG.size.lg.minHeight
  }
});