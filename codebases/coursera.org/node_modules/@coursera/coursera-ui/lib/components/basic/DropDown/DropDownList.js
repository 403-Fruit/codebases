function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

//
import * as React from 'react';
import _ from 'underscore';
import { css, color, spacing, StyleSheet } from "../../../styles/theme";
import { Z_DEPTH_SHADOWS } from "../../../constants/sharedConstants";
import { keyCodes } from "../../../constants/keyCodes";
import { FOCUS_DIRECTION } from "../../../constants/sharedConstants";
import { isFocusedElement } from "../../../utils/a11yUtils";
import DropDownListItem from "./DropDownListItem";
var CONFIG = {
  boxShadow: Z_DEPTH_SHADOWS[1],
  defaultMinWidth: 0,
  defaultMaxWidth: 240,
  defaultMaxHeight: '100%',
  defaultFocusIndex: -1
};
var styles = StyleSheet.create({
  DropDownList: {
    listStyle: 'none',
    width: 'fit-content',
    padding: 0,
    marginBottom: 0,
    overflow: 'auto'
  }
});

var DropDownList =
/*#__PURE__*/
function (_React$Component) {
  _inherits(DropDownList, _React$Component);

  function DropDownList() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, DropDownList);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DropDownList)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "dropdownList", undefined);

    _defineProperty(_assertThisInitialized(_this), "getCurrentFocusIndex", function () {
      if (_this.dropdownList) {
        var currentIndex = _(_this.dropdownList.children).findIndex(isFocusedElement);

        if (currentIndex > CONFIG.defaultFocusIndex) {
          return currentIndex;
        } else {
          // Allow currentSelectedIndex to be passed as props,
          // for if the list keeps track of the currently selected item
          var currentSelectedIndex = _this.props.currentSelectedIndex;

          if (currentSelectedIndex !== undefined && currentSelectedIndex > CONFIG.defaultFocusIndex) {
            return currentSelectedIndex;
          }
        }
      }

      return CONFIG.defaultFocusIndex;
    });

    _defineProperty(_assertThisInitialized(_this), "getNextFocusIndex", function (currentIndex, direction) {
      if (_this.dropdownList) {
        var lastItemIndex = _this.dropdownList.children.length - 1;

        if (direction === FOCUS_DIRECTION.previous) {
          return currentIndex === 0 ? lastItemIndex : currentIndex - 1;
        }

        return currentIndex === lastItemIndex ? 0 : currentIndex + 1;
      }

      return CONFIG.defaultFocusIndex;
    });

    _defineProperty(_assertThisInitialized(_this), "setFocusOnNextItem", function (currentIndex, direction) {
      var newIndex = _this.getNextFocusIndex(currentIndex, direction);

      if (_this.dropdownList) {
        var children = _this.dropdownList.children;

        if (children[newIndex].tabIndex === -1) {
          _this.setFocusOnNextItem(newIndex, direction);
        } else {
          children[newIndex].focus();
        }
      }
    });

    _defineProperty(_assertThisInitialized(_this), "selectItem", function (index) {
      if (_this.dropdownList && _this.dropdownList.children[index]) {
        _this.dropdownList.children[index].click();
      }
    });

    _defineProperty(_assertThisInitialized(_this), "resetFocus", function () {
      var currentFocusIndex = _this.getCurrentFocusIndex();

      if (_this.dropdownList && _this.dropdownList.children[currentFocusIndex]) {
        _this.dropdownList.children[currentFocusIndex].blur();

        _this.onBlur();
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onFocus", function (ev) {
      if (_this.props.onFocus) {
        if (ev) {
          ev.preventDefault();
        }

        _this.props.onFocus();
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onClick", function (ev, listItemValue) {
      if (_this.props.onClick) {
        _this.props.onClick(ev, listItemValue);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onBlur", function (ev) {
      if (_this.props.onBlur) {
        if (ev) {
          ev.preventDefault();
        }

        _this.props.onBlur();
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onKeyDown", function (ev) {
      var currentIndex = _this.getCurrentFocusIndex();

      switch (ev.keyCode) {
        case keyCodes.up:
        case keyCodes.left:
          ev.preventDefault();

          _this.setFocusOnNextItem(currentIndex, FOCUS_DIRECTION.previous);

          break;

        case keyCodes.down:
        case keyCodes.right:
          ev.preventDefault();

          _this.setFocusOnNextItem(currentIndex, FOCUS_DIRECTION.next);

          break;

        case keyCodes.space:
        case keyCodes.enter:
          ev.preventDefault();

          _this.selectItem(currentIndex);

          break;

        case keyCodes.esc:
          ev.preventDefault();

          _this.resetFocus();

          break;
      }
    });

    return _this;
  }

  _createClass(DropDownList, [{
    key: "getBorderStyle",
    value: function getBorderStyle() {
      var _this$props = this.props,
          borderColor = _this$props.borderColor,
          showBorder = _this$props.showBorder;
      return showBorder ? {
        border: "1px solid ".concat(borderColor)
      } : {
        boxShadow: CONFIG.boxShadow
      };
    }
  }, {
    key: "getSizingStyle",
    value: function getSizingStyle() {
      var _this$props2 = this.props,
          maxHeight = _this$props2.maxHeight,
          maxWidth = _this$props2.maxWidth,
          minWidth = _this$props2.minWidth;
      var actualMaxWidth = maxWidth || CONFIG.defaultMaxWidth;

      if (minWidth && minWidth > actualMaxWidth) {
        actualMaxWidth = minWidth;
      }

      return {
        maxHeight: maxHeight ? "".concat(maxHeight, "px") : CONFIG.defaultMaxHeight,
        maxWidth: "".concat(actualMaxWidth, "px"),
        minWidth: minWidth ? "".concat(minWidth, "px") : CONFIG.defaultMinWidth
      };
    }
  }, {
    key: "renderListItems",
    value: function renderListItems() {
      var _this2 = this;

      return this.props.listItemData.map(function (listItem, index) {
        var children = listItem.children,
            isDisabled = listItem.isDisabled,
            label = listItem.label,
            onClick = listItem.onClick,
            value = listItem.value;

        var onClickCallback = function onClickCallback(ev, listItemValue) {
          _this2.onClick(ev, listItemValue);

          if (onClick) {
            onClick(ev, listItemValue);
          }
        };

        return React.createElement(DropDownListItem, {
          key: index,
          label: label,
          isDisabled: isDisabled,
          onClick: onClickCallback,
          value: value
        }, children);
      });
    }
  }, {
    key: "renderChildren",
    value: function renderChildren() {
      var _this3 = this;

      return React.Children.map(this.props.children, function (child) {
        if (!React.isValidElement(child)) {
          return null;
        }

        var onClickHandler = function onClickHandler(ev, listItemValue) {
          _this3.onClick(ev, listItemValue);

          if (child.props && typeof child.props.onClick === 'function') {
            child.props.onClick(ev, listItemValue);
          }
        }; // $FlowFixMe


        return React.cloneElement(child, {
          onClick: onClickHandler
        });
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this4 = this;

      var _this$props3 = this.props,
          htmlAttributes = _this$props3.htmlAttributes,
          listItemData = _this$props3.listItemData,
          renderListItems = _this$props3.renderListItems,
          rootClassName = _this$props3.rootClassName,
          style = _this$props3.style;

      var mergedStyles = _objectSpread({}, style, this.getSizingStyle(), this.getBorderStyle());

      return (// Need this outer div because ReactModal adds a div to the outermost
        // element, which interferes with focus calculations
        React.createElement("div", {
          onFocus: this.onFocus,
          onBlur: this.onBlur,
          onKeyDown: this.onKeyDown
        }, React.createElement("ul", _extends({
          role: "menu",
          tabIndex: -1,
          style: mergedStyles,
          ref: function ref(dropdownList) {
            return _this4.dropdownList = dropdownList;
          }
        }, css(rootClassName, styles.DropDownList), htmlAttributes), renderListItems && renderListItems(listItemData), !renderListItems && this.renderListItems(), this.renderChildren()))
      );
    }
  }]);

  return DropDownList;
}(React.Component);

_defineProperty(DropDownList, "defaultProps", {
  borderColor: color.primary,
  listItemData: [],
  onBlur: function onBlur() {},
  onClick: function onClick() {},
  onFocus: function onFocus() {}
});

export { DropDownList as default };