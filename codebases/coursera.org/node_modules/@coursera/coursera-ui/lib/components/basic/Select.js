function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

//

/* eslint-disable react/no-unused-prop-types, react/forbid-prop-types */

/**
 * A simple wrapper around react-virtualized-select to offer consistent UI.
 * See https://github.com/bvaughn/react-virtualized-select for more details.
 * Update this component if more features needs to be introduced.
 */
import * as React from 'react';
import PropTypes from 'prop-types'; // TODO(Audrey): FRONT-760
// import 'css!react-select/dist/react-select.css';
// import 'css!react-virtualized/styles.css';
// import 'css!react-virtualized-select/styles.css';
// $FlowFixMe

import VirtualizedSelect from 'react-virtualized-select'; // $FlowFixMe

import { Creatable as ReactSelectCreatable, AsyncCreatable } from 'react-select';
import generateUUID from "../../utils/generateUUID"; // Creatable ref warning work-around:
// Reference: https://github.com/JedWatson/react-select/issues/2181#issuecomment-384566053

var Creatable =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Creatable, _React$Component);

  function Creatable() {
    _classCallCheck(this, Creatable);

    return _possibleConstructorReturn(this, _getPrototypeOf(Creatable).apply(this, arguments));
  }

  _createClass(Creatable, [{
    key: "render",
    value: function render() {
      return React.createElement(ReactSelectCreatable, this.props);
    }
  }]);

  return Creatable;
}(React.Component);

var Select =
/*#__PURE__*/
function (_React$Component2) {
  _inherits(Select, _React$Component2);

  function Select(props) {
    var _this;

    _classCallCheck(this, Select);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Select).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "props", void 0);

    _defineProperty(_assertThisInitialized(_this), "state", void 0);

    _defineProperty(_assertThisInitialized(_this), "handleOnChange", function (option) {
      var onChange = _this.props.onChange;

      if (onChange) {
        if (option == null) {
          onChange(option, 0);
        } else {
          onChange(option, _this.getIndex(option));
        }
      }
    });

    _defineProperty(_assertThisInitialized(_this), "getIndex", function (selectedOption) {
      var _this$props = _this.props,
          valueKey = _this$props.valueKey,
          options = _this$props.options; // find selected option's index by value

      return options.map(function (opt) {
        return opt[valueKey];
      }).indexOf(selectedOption[valueKey]);
    });

    _this.state = {
      uuid: 'ssr-id'
    };
    return _this;
  }

  _createClass(Select, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.setState({
        uuid: generateUUID()
      });
    }
  }, {
    key: "render",
    value: function render() {
      var uuid = this.state.uuid;
      var _this$props2 = this.props,
          async = _this$props2.async,
          creatable = _this$props2.creatable,
          htmlAttributes = _this$props2.htmlAttributes,
          searchable = _this$props2.searchable,
          selectComponent = _this$props2.selectComponent,
          _this$props2$id = _this$props2.id,
          id = _this$props2$id === void 0 ? uuid : _this$props2$id,
          instanceId = _this$props2.instanceId;
      var currentSelectComponent = selectComponent;

      if (!selectComponent) {
        if (creatable) {
          if (async) {
            currentSelectComponent = AsyncCreatable;
          } else {
            currentSelectComponent = Creatable;
          }
        }
      }

      return React.createElement(VirtualizedSelect, _extends({}, this.props, {
        onChange: this.handleOnChange,
        searchable: searchable || creatable,
        selectComponent: currentSelectComponent
      }, htmlAttributes, {
        instanceId: instanceId || id
      }));
    }
  }]);

  return Select;
}(React.Component);

_defineProperty(Select, "defaultProps", {
  async: false,
  autoFocus: false,
  clearable: false,
  creatable: false,
  htmlAttributes: {},
  labelKey: 'label',
  maxHeight: 200,
  menuContainerStyle: {},
  optionHeight: 36,
  searchable: false,
  valueKey: 'value'
});

Select.propTypes = {
  async: PropTypes.bool,
  autoFocus: PropTypes.bool,
  // autoFocus by default
  clearable: PropTypes.bool,
  // can reset value
  creatable: PropTypes.bool,
  // use <Creatable /> for custom tags
  htmlAttributes: PropTypes.object,
  // eslint-disable-line react/forbid-prop-types
  labelKey: PropTypes.string,
  // attribute of option that contains the display text
  maxHeight: PropTypes.number.isRequired,
  menuContainerStyle: PropTypes.object,
  // custom dropdown styles
  onChange: PropTypes.func.isRequired,
  options: PropTypes.arrayOf(PropTypes.shape({
    label: PropTypes.any,
    value: PropTypes.any,
    disabled: PropTypes.bool
  }).isRequired),
  optionHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,
  optionRenderer: PropTypes.func,
  searchable: PropTypes.bool,
  // can search a value
  selectComponent: PropTypes.func,
  value: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.number, PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.number]))]),
  valueKey: PropTypes.string,
  // the option property to use for the value
  loadOptions: PropTypes.func,
  id: PropTypes.string,
  instanceId: PropTypes.string
};
export default Select;