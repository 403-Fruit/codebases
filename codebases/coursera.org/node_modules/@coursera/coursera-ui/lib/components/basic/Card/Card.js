function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

//
import * as React from 'react';
import PropTypes from 'prop-types';
import { color, css, transition, StyleSheet } from "../../../styles/theme";
import { Z_DEPTH_SHADOWS } from "../../../constants/sharedConstants";
import { compose, setDisplayName, withContext } from 'recompose';
var CONFIG = {
  border: "1px solid ".concat(color.divider),
  boxShadow: Z_DEPTH_SHADOWS[1],
  boxShadowHover: Z_DEPTH_SHADOWS[2],
  darkThemeBackground: color.black
};
var styles = StyleSheet.create({
  Card: {
    position: 'relative',
    width: '100%',
    transition: transition.easeOut(),
    borderRadius: 3,
    overflow: 'hidden'
  },
  cardBorder: {
    border: CONFIG.border
  },
  cardShadow: {
    boxShadow: CONFIG.boxShadow
  },
  cardDarkTheme: {
    color: color.white,
    backgroundColor: CONFIG.darkThemeBackground
  },
  active: {
    boxShadow: CONFIG.boxShadowHover
  }
});

function getInteractiveStyle(showBorder) {
  var activeStyle = {
    boxShadow: showBorder ? 'none' : CONFIG.boxShadow
  };
  return StyleSheet.create({
    cardInteractive: {
      'cursor': 'pointer',
      ':hover': {
        boxShadow: CONFIG.boxShadowHover
      },
      ':active': activeStyle
    }
  });
}

function Card(_ref) {
  var isActive = _ref.isActive,
      children = _ref.children,
      htmlAttributes = _ref.htmlAttributes,
      isInteractive = _ref.isInteractive,
      isThemeDark = _ref.isThemeDark,
      rootClassName = _ref.rootClassName,
      showBorder = _ref.showBorder,
      style = _ref.style;
  return React.createElement("div", _extends({
    style: style
  }, css(rootClassName, styles.Card, showBorder && styles.cardBorder, !showBorder && styles.cardShadow, isInteractive && getInteractiveStyle(showBorder).cardInteractive, isThemeDark && styles.cardDarkTheme, isActive && styles.active), htmlAttributes), children);
}

export default compose(setDisplayName('CardHOC'), withContext({
  isThemeDark: PropTypes.bool
}, function (props) {
  return {
    isThemeDark: props.isThemeDark
  };
}))(Card);