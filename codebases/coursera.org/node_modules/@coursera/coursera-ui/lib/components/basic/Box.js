function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

//

/* eslint-disable no-use-before-define, quote-props */
import * as React from 'react';
import PropTypes from 'prop-types';
import { StyleSheet, css } from "../../styles/theme";
export default function Box(_ref) {
  var Tag = _ref.tag,
      rootClassName = _ref.rootClassName,
      _ref$htmlAttributes = _ref.htmlAttributes,
      htmlAttributes = _ref$htmlAttributes === void 0 ? {} : _ref$htmlAttributes,
      alignContent = _ref.alignContent,
      alignItems = _ref.alignItems,
      justifyContent = _ref.justifyContent,
      alignSelf = _ref.alignSelf,
      display = _ref.display,
      flex = _ref.flex,
      flexDirection = _ref.flexDirection,
      flexWrap = _ref.flexWrap,
      order = _ref.order,
      rest = _objectWithoutProperties(_ref, ["tag", "rootClassName", "htmlAttributes", "alignContent", "alignItems", "justifyContent", "alignSelf", "display", "flex", "flexDirection", "flexWrap", "order"]);

  return React.createElement(Tag, _extends({}, htmlAttributes, css(rootClassName, styles.Box, justifyContent && styles["".concat(justifyContent, "Justify")], alignContent && styles["".concat(alignContent, "AlignContent")], alignItems && styles["".concat(alignItems, "Align")], alignSelf && styles["".concat(alignSelf, "AlignSelf")], display && styles["display".concat(display)], flex && styles["flex".concat(flex)], flexDirection && styles["".concat(flexDirection, "Direction")], order && styles['order{order}'], flexWrap && styles["".concat(flexWrap)]), rest));
}
Box.defaultProps = {
  tag: 'div',
  display: 'flex',
  htmlAttributes: {}
};
Box.propTypes = {
  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),
  rootClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),
  htmlAttributes: PropTypes.object,
  alignContent: PropTypes.oneOf(['center', 'end', 'start', 'around', 'between', 'stretch']),
  alignItems: PropTypes.oneOf(['baseline', 'center', 'start', 'end', 'stretch']),
  justifyContent: PropTypes.oneOf(['start', 'end', 'around', 'between', 'center']),
  alignSelf: PropTypes.oneOf(['baseline', 'center', 'start', 'end', 'stretch']),
  display: PropTypes.oneOf(['flex', 'inline-flex']),
  flex: PropTypes.oneOf([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),
  flexDirection: PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row']),
  flexWrap: PropTypes.oneOf(['nowrap', 'wrap-reverse', 'wrap']),
  order: PropTypes.oneOf([-1, 1, 0])
};
var styles = StyleSheet.create({
  Box: {},
  displayflex: {
    display: 'flex'
  },
  flex1: {
    flex: 1
  },
  flex2: {
    flex: 2
  },
  flex3: {
    flex: 3
  },
  flex4: {
    flex: 4
  },
  flex5: {
    flex: 5
  },
  flex6: {
    flex: 6
  },
  flex7: {
    flex: 7
  },
  flex8: {
    flex: 8
  },
  flex9: {
    flex: 9
  },
  flex10: {
    flex: 10
  },
  flex11: {
    flex: 11
  },
  flex12: {
    flex: 12
  },
  startAlign: {
    alignItems: 'flex-start'
  },
  endAlign: {
    alignItems: 'flex-end'
  },
  centerAlign: {
    alignItems: 'center'
  },
  baselineAlign: {
    alignItems: 'baseline'
  },
  stretchAlign: {
    alignItems: 'stretch'
  },
  startAlignContent: {
    alignContent: 'flex-start'
  },
  endAlignContent: {
    alignContent: 'flex-end'
  },
  centerAlignContent: {
    alignContent: 'center'
  },
  betweenAlignContent: {
    alignContent: 'space-between'
  },
  aroundAlignContent: {
    alignContent: 'space-around'
  },
  stretchAlignContent: {
    alignContent: 'stretch'
  },
  'order-1': {
    order: -1
  },
  order1: {
    order: 1
  },
  order0: {
    order: 0
  },
  rowDirection: {
    flexDirection: 'row'
  },
  columnDirection: {
    flexDirection: 'column'
  },
  'row-reverseDirection': {
    flexDirection: 'row-reverse'
  },
  'column-reverseDirection': {
    flexDirection: 'column-reverse'
  },
  wrap: {
    flexWrap: 'wrap'
  },
  nowrap: {
    flexWrap: 'nowrap'
  },
  'wrap-reverse': {
    flexWrap: 'wrap-reverse'
  },
  startJustify: {
    justifyContent: 'flex-start'
  },
  centerJustify: {
    justifyContent: 'center'
  },
  endJustify: {
    justifyContent: 'flex-end'
  },
  aroundJustify: {
    justifyContent: 'space-around'
  },
  betweenJustify: {
    justifyContent: 'space-between'
  },
  startAlignItems: {
    alignItems: 'flex-start'
  },
  centerAlignItems: {
    alignItems: 'center'
  },
  endAlignItems: {
    alignItems: 'flex-end'
  },
  startAlignSelf: {
    alignSelf: 'flex-start'
  },
  centerAlignSelf: {
    alignSelf: 'center'
  },
  endAlignSelf: {
    alignSelf: 'flex-end'
  },
  stretchAlignSelf: {
    alignSelf: 'stretch'
  }
});
Box.defaultProps = {
  display: 'flex',
  tag: 'div'
};
export function CenterBox(_ref2) {
  var _ref2$flexDirection = _ref2.flexDirection,
      flexDirection = _ref2$flexDirection === void 0 ? 'column' : _ref2$flexDirection,
      _ref2$justifyContent = _ref2.justifyContent,
      justifyContent = _ref2$justifyContent === void 0 ? 'center' : _ref2$justifyContent,
      _ref2$alignItems = _ref2.alignItems,
      alignItems = _ref2$alignItems === void 0 ? 'center' : _ref2$alignItems,
      widthAlt = _ref2.width,
      heightAlt = _ref2.height,
      sizeAlt = _ref2.size,
      styleAlt = _ref2.style,
      rest = _objectWithoutProperties(_ref2, ["flexDirection", "justifyContent", "alignItems", "width", "height", "size", "style"]);

  var style = styleAlt || {};

  if (sizeAlt) {
    var size = parseFloat(sizeAlt);
    style.width = size;
    style.height = size;
  }

  if (widthAlt) {
    var width = parseFloat(widthAlt);
    style.width = width;
  }

  if (heightAlt) {
    var height = parseFloat(heightAlt);
    style.height = height;
  }

  return React.createElement(Box, _extends({
    flexDirection: flexDirection,
    justifyContent: justifyContent,
    alignItems: alignItems,
    style: style
  }, rest));
}