function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

//
import * as React from 'react';
import Measure from 'react-measure';
import ReactModal from 'react-modal';
import { color } from "../../../styles/theme";
import { Z_DEPTH_SHADOWS } from "../../../constants/sharedConstants";
import DropDownList from "./DropDownList";
var CONFIG = {
  borderWidth: 1,
  boxShadow: Z_DEPTH_SHADOWS[1],
  defaultMargin: 6,
  modalContentLabel: 'dropDownMenu'
};

var DropDownMenu =
/*#__PURE__*/
function (_React$Component) {
  _inherits(DropDownMenu, _React$Component);

  function DropDownMenu() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, DropDownMenu);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DropDownMenu)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "menu", undefined);

    _defineProperty(_assertThisInitialized(_this), "state", {
      width: undefined,
      height: undefined
    });

    _defineProperty(_assertThisInitialized(_this), "handleMenuFocus", function () {
      if (_this.menu && _this.menu.dropdownList) {
        _this.menu.dropdownList.focus();
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onMeasure", function (_ref) {
      var bounds = _ref.bounds;

      _this.setState({
        width: bounds.width,
        height: bounds.height
      });
    });

    return _this;
  }

  _createClass(DropDownMenu, [{
    key: "getModalStyle",
    value: function getModalStyle() {
      var _this$props = this.props,
          anchorElement = _this$props.anchorElement,
          borderColor = _this$props.borderColor,
          dropDownMargin = _this$props.dropDownMargin,
          dropDownPosition = _this$props.dropDownPosition,
          isOpen = _this$props.isOpen,
          showBorder = _this$props.showBorder;
      var _this$state = this.state,
          width = _this$state.width,
          height = _this$state.height;
      var modalStyle = {
        overlay: {
          position: 'absolute',
          backgroundColor: 'none'
        },
        content: {
          width: 'fit-content',
          top: 'auto',
          bottom: 'auto',
          left: 'auto',
          right: 'auto',
          border: 'none',
          borderRadius: '0',
          boxShadow: 'none',
          padding: '0'
        }
      };

      if (isOpen) {
        // Apply border/box-shadow to modal instead of DropDownList
        if (showBorder) {
          modalStyle.content.border = "".concat(CONFIG.borderWidth, "px solid ").concat(borderColor);
        } else {
          modalStyle.content.boxShadow = CONFIG.boxShadow;
        } // Apply positioning styles


        if (anchorElement) {
          var rect = anchorElement.getBoundingClientRect();
          var borderMargin = showBorder ? CONFIG.borderWidth * 2 : 0; // Default positioning: bottom left

          var menuTop = rect.bottom + dropDownMargin;
          var menuLeft = rect.left;

          if (width && height) {
            menuTop = dropDownPosition.vertical === 'top' ? rect.top - (height + dropDownMargin + borderMargin) : rect.bottom + dropDownMargin;
            menuLeft = dropDownPosition.horizontal === 'right' ? rect.right - (width + borderMargin) : rect.left;
          } // Need to factor in offset from window scrolling


          modalStyle.content.top = "".concat(menuTop + window.pageYOffset, "px");
          modalStyle.content.left = "".concat(menuLeft + window.pageXOffset, "px");
        }
      }

      return modalStyle;
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          borderColor = _this$props2.borderColor,
          anchorElement = _this$props2.anchorElement,
          children = _this$props2.children,
          dropDownMargin = _this$props2.dropDownMargin,
          dropDownPosition = _this$props2.dropDownPosition,
          isOpen = _this$props2.isOpen,
          onRequestClose = _this$props2.onRequestClose,
          disableMinWidthAsAnchor = _this$props2.disableMinWidthAsAnchor,
          showBorder = _this$props2.showBorder,
          menuRootClassName = _this$props2.menuRootClassName,
          dropDownListProps = _objectWithoutProperties(_this$props2, ["borderColor", "anchorElement", "children", "dropDownMargin", "dropDownPosition", "isOpen", "onRequestClose", "disableMinWidthAsAnchor", "showBorder", "menuRootClassName"]); // Set aria-expanded on anchor button


      if (anchorElement) {
        anchorElement.setAttribute('aria-expanded', isOpen);
      }

      var anchorWidth;

      if (!disableMinWidthAsAnchor && anchorElement) {
        var rect = anchorElement.getBoundingClientRect();
        var borderMargin = showBorder ? CONFIG.borderWidth * 2 : 0;
        anchorWidth = rect.width - borderMargin;
      }

      return React.createElement(ReactModal, {
        contentLabel: CONFIG.modalContentLabel,
        isOpen: isOpen,
        onAfterOpen: this.handleMenuFocus,
        onRequestClose: onRequestClose,
        style: this.getModalStyle(),
        className: menuRootClassName
      }, React.createElement(Measure, {
        bounds: true,
        onResize: this.onMeasure
      }, function (_ref2) {
        var measureRef = _ref2.measureRef;
        return React.createElement("div", {
          ref: measureRef
        }, React.createElement(DropDownList, _extends({
          minWidth: anchorWidth,
          ref: function ref(menu) {
            return _this2.menu = menu;
          }
        }, dropDownListProps), children));
      }));
    }
  }]);

  return DropDownMenu;
}(React.Component);

_defineProperty(DropDownMenu, "defaultProps", {
  borderColor: color.primary,
  dropDownMargin: CONFIG.defaultMargin,
  dropDownPosition: {
    vertical: 'bottom',
    horizontal: 'left'
  },
  onRequestClose: function onRequestClose() {}
});

export { DropDownMenu as default };