function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

//
import * as React from 'react';
import PropTypes from 'prop-types';
import CheckboxBase from "./CheckboxBase";

function Checkbox(_ref, context) {
  var disableContext = _ref.disableContext,
      rest = _objectWithoutProperties(_ref, ["disableContext"]);

  var checkboxGroup = context.checkboxGroup;

  var checkboxProps = _objectSpread({}, rest);

  if (!disableContext && checkboxGroup) {
    checkboxProps.onChange = function () {
      return checkboxGroup.toggleOption({
        label: rest.children,
        value: rest.value
      });
    };

    checkboxProps.checked = checkboxGroup.value && checkboxGroup.value.indexOf(rest.value) !== -1;
    checkboxProps.disabled = 'disabled' in rest ? rest.disabled : checkboxGroup.disabled;
  }

  return React.createElement(CheckboxBase, checkboxProps);
}

Checkbox.propTypes = {
  disableContext: PropTypes.bool,
  disabled: PropTypes.bool,
  children: PropTypes.node,
  value: PropTypes.oneOfType([PropTypes.number.isRequired, PropTypes.string.isRequired])
};
Checkbox.contextTypes = {
  checkboxGroup: PropTypes.any
}; // Must not use pure so as to pick up context changes

export default Checkbox;