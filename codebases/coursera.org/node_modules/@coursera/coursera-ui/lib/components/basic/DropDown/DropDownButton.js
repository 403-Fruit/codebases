function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import * as React from 'react';
import { Reference } from 'react-popper';
import Button from "../Button";

var DropDownButton =
/*#__PURE__*/
function (_React$Component) {
  _inherits(DropDownButton, _React$Component);

  function DropDownButton() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, DropDownButton);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DropDownButton)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "button", undefined);

    _defineProperty(_assertThisInitialized(_this), "setButtonRef", function (button) {
      _this.button = button;
    });

    _defineProperty(_assertThisInitialized(_this), "getDropDownButtonProps", function () {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          props = _extends({}, _ref);

      var _this$props = _this.props,
          onClick = _this$props.onClick,
          onKeyDown = _this$props.onKeyDown;
      return _objectSpread({
        onClick: onClick,
        onKeyDown: onKeyDown,
        ref: _this.setButtonRef
      }, _this.getAriaProps(), props);
    });

    _defineProperty(_assertThisInitialized(_this), "_popperRefHandler", undefined);

    _defineProperty(_assertThisInitialized(_this), "_setButtonRefWithPopper", undefined);

    _defineProperty(_assertThisInitialized(_this), "_getDropDownButtonPropsWithPopper", undefined);

    _defineProperty(_assertThisInitialized(_this), "memoizeSetButtonRefWithPopper", function (ref) {
      // Cache the ref to avoid creating new functions and thrashing the ref callbacks.
      if (_this._popperRefHandler !== ref) {
        _this._setButtonRefWithPopper = undefined;
        _this._getDropDownButtonPropsWithPopper = undefined;
      }

      if (!_this._setButtonRefWithPopper) {
        _this._setButtonRefWithPopper = function (node) {
          _this.setButtonRef(node);

          ref(node);
        };
      }

      return _this._setButtonRefWithPopper;
    });

    _defineProperty(_assertThisInitialized(_this), "memoizeGetDropDownButtonPropsWithPopper", function (ref) {
      var setButtonRef = _this.memoizeSetButtonRefWithPopper(ref);

      if (!_this._getDropDownButtonPropsWithPopper) {
        _this._getDropDownButtonPropsWithPopper = function (props) {
          return _this.getDropDownButtonProps(_objectSpread({}, props, {
            ref: setButtonRef
          }));
        };
      }

      return _this._getDropDownButtonPropsWithPopper;
    });

    return _this;
  }

  _createClass(DropDownButton, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var autoFocus = this.props.autoFocus;

      if (autoFocus && this.button) {
        this.button.focus();
      }
    }
  }, {
    key: "getAriaProps",
    value: function getAriaProps() {
      var _this$props2 = this.props,
          ariaHasPopup = _this$props2.ariaHasPopup,
          ariaExpanded = _this$props2.ariaExpanded;
      return {
        'aria-haspopup': ariaHasPopup,
        'aria-expanded': ariaExpanded
      };
    }
    /*
      The prop getter pattern allows the component to pass in a custom render function
      and its own props, and return additional props required to render the component.
      In this case, we use it to return a11y-related aria props, as well as control the
      onClick and onKeyDown handlers.
      For more info, see https://egghead.io/lessons/react-use-prop-getters-with-render-props
    */

  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props3 = this.props,
          buttonProps = _this$props3.buttonProps,
          onClick = _this$props3.onClick,
          onKeyDown = _this$props3.onKeyDown,
          renderButton = _this$props3.renderButton,
          _this$props3$usePoppe = _this$props3.usePopper,
          usePopper = _this$props3$usePoppe === void 0 ? false : _this$props3$usePoppe;

      if (renderButton) {
        if (usePopper) {
          return React.createElement(Reference, null, function (_ref2) {
            var ref = _ref2.ref;
            return renderButton({
              getDropDownButtonProps: _this2.memoizeGetDropDownButtonPropsWithPopper(ref)
            });
          });
        } else {
          return renderButton({
            getDropDownButtonProps: this.getDropDownButtonProps
          });
        }
      }

      var renderProps = _objectSpread({
        onClick: onClick,
        htmlAttributes: _objectSpread({
          onKeyDown: onKeyDown
        }, this.getAriaProps(), buttonProps && buttonProps.htmlAttributes)
      }, buttonProps);

      if (usePopper) {
        return React.createElement(Reference, null, function (_ref3) {
          var ref = _ref3.ref;
          return React.createElement(Button, _extends({}, renderProps, {
            _refAlt: _this2.memoizeSetButtonRefWithPopper(ref)
          }));
        });
      } else {
        return React.createElement(Button, _extends({}, renderProps, {
          _refAlt: this.setButtonRef
        }));
      }
    }
  }]);

  return DropDownButton;
}(React.Component);

export { DropDownButton as default };