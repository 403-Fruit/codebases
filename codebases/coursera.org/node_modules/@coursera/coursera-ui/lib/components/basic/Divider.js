function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

//
import * as React from 'react';
import PropTypes from 'prop-types';
import { css, StyleSheet, color } from "../../styles/theme";
/**
 * A simple divider that can accept children
 * Sample Usage:
 * <Divider />
 */

var styles = StyleSheet.create({
  Divider: {
    margin: 0,
    height: 1,
    border: 'none',
    backgroundColor: color.divider
  },
  bgThemeDark: {
    backgroundColor: color.dividerThemeDark
  },
  flex1: {
    flex: 1
  },
  dividerWrapper: {
    width: '100%',
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center'
  }
});

var Divider = function Divider(_ref) {
  var _ref$htmlAttributes = _ref.htmlAttributes,
      htmlAttributes = _ref$htmlAttributes === void 0 ? {} : _ref$htmlAttributes,
      _ref$isThemeDark = _ref.isThemeDark,
      isThemeDark = _ref$isThemeDark === void 0 ? false : _ref$isThemeDark,
      _ref$style = _ref.style,
      style = _ref$style === void 0 ? {} : _ref$style,
      _ref$inset = _ref.inset,
      inset = _ref$inset === void 0 ? 0 : _ref$inset,
      _ref$isDoubleInset = _ref.isDoubleInset,
      isDoubleInset = _ref$isDoubleInset === void 0 ? false : _ref$isDoubleInset,
      children = _ref.children;
  var singleDivider = React.createElement("hr", _extends({}, htmlAttributes, css(styles.Divider, isThemeDark && styles.bgThemeDark), {
    style: _objectSpread({
      marginLeft: inset,
      marginRight: isDoubleInset && inset
    }, style)
  }));

  if (!children) {
    return singleDivider;
  }

  singleDivider = React.createElement("hr", _extends({}, htmlAttributes, css(styles.Divider, isThemeDark && styles.bgThemeDark, styles.flex1), {
    style: _objectSpread({
      marginLeft: inset
    }, style)
  }));
  return React.createElement("div", css('Divider', styles.dividerWrapper), singleDivider, children, singleDivider);
}; // Explicity declare the default props for documentation purpose


Divider.defaultProps = {
  htmlAttributes: {},
  style: {},
  inset: 0,
  isThemeDark: false,
  isDoubleInset: false
};
Divider.propTypes = {
  // Additional control for the root element, can add data-courselenium, ariaLabel...
  htmlAttributes: PropTypes.object,
  // Whether divder has parent element with dark bg
  isThemeDark: PropTypes.bool,
  // Whether divider will be indented
  inset: PropTypes.number,
  // Whether divider is indented from both sides
  isDoubleInset: PropTypes.bool,
  // Overwrite the inline-styles of the root element
  style: PropTypes.object,
  // If childen exists, we'll render a box which has left and right divider and children in the middle
  children: PropTypes.node
};
export default Divider;