function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

//
import * as React from 'react';
import PropTypes from 'prop-types';
import Radio from "./Radio";
import { StyleSheet, css } from "../../styles/theme";
import { pure, compose, setDisplayName } from 'recompose';
import { LABEL_POSITION } from "./CheckboxBase";
var styles = StyleSheet.create({
  RadioGroup: {}
});

function getOptions(options) {
  return options.map(function (option) {
    if (typeof option === 'string') {
      return {
        label: option,
        value: option
      };
    }

    return option;
  });
}

function getCheckedValue(children) {
  var value = null;
  var matched = false;
  React.Children.forEach(children, function (radio) {
    if (radio && radio.props && radio.props.checked) {
      value = radio.props.value;
      matched = true;
    }
  });
  return matched ? {
    value: value
  } : undefined;
}

var RadioGroup =
/*#__PURE__*/
function (_React$Component) {
  _inherits(RadioGroup, _React$Component);

  function RadioGroup(props) {
    var _this;

    _classCallCheck(this, RadioGroup);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(RadioGroup).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "state", {
      value: ''
    });

    _defineProperty(_assertThisInitialized(_this), "onChange", function (ev) {
      var lastValue = _this.state.value;
      var value = ev.target.value;

      _this.setState({
        value: value
      });

      var onChange = _this.props.onChange;

      if (onChange && value !== lastValue) {
        onChange(ev);
      }
    });

    var _value;

    if ('value' in props) {
      _value = props.value;
    } else if ('defaultValue' in props) {
      _value = props.defaultValue;
    } else {
      var checkedValue = getCheckedValue(props.children);
      _value = checkedValue && checkedValue.value;
    }

    _this.state = {
      value: _value
    };
    return _this;
  }

  _createClass(RadioGroup, [{
    key: "getChildContext",
    value: function getChildContext() {
      return {
        radioGroup: {
          onChange: this.onChange,
          value: this.state.value,
          disabled: this.props.disabled
        }
      };
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if ('value' in nextProps) {
        this.setState({
          value: nextProps.value
        });
      } else {
        var checkedValue = getCheckedValue(nextProps.children);

        if (checkedValue) {
          this.setState({
            value: checkedValue.value
          });
        }
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          rootClassName = _this$props.rootClassName,
          checkboxRootClassName = _this$props.checkboxRootClassName,
          options = _this$props.options,
          disabled = _this$props.disabled,
          childrenAlt = _this$props.children,
          isVertical = _this$props.isVertical,
          renderCheckbox = _this$props.renderCheckbox,
          readOnly = _this$props.readOnly,
          labelPosition = _this$props.labelPosition;
      var value = this.state.value;
      var children = childrenAlt;

      if (options && options.length > 0) {
        children = getOptions(options).map(function (option, index) {
          return React.createElement(Radio, {
            key: index,
            disabled: option && option.disabled !== undefined ? option.disabled : disabled,
            value: option.value,
            checked: value === option || value === option.value,
            onChange: _this2.onChange,
            rootClassName: checkboxRootClassName,
            style: isVertical ? {
              display: 'flex'
            } : {},
            readOnly: readOnly,
            labelPosition: labelPosition,
            isRadio: true
          }, renderCheckbox ? renderCheckbox(_objectSpread({}, option, {
            index: index
          })) : option.label);
        });
      }

      return React.createElement("div", css(rootClassName, styles.RadioGroup), React.createElement("fieldset", null, children));
    }
  }]);

  return RadioGroup;
}(React.Component);

_defineProperty(RadioGroup, "propTypes", {
  checkboxRootClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),
  children: PropTypes.node,
  defaultValue: PropTypes.oneOfType([PropTypes.number.isRequired, PropTypes.string.isRequired]),
  disabled: PropTypes.bool,
  isVertical: PropTypes.bool,
  labelPosition: PropTypes.oneOf(Object.keys(LABEL_POSITION)),
  onChange: PropTypes.func,
  options: PropTypes.array,
  readOnly: PropTypes.bool,
  renderCheckbox: PropTypes.func,
  rootClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),
  value: PropTypes.oneOfType([PropTypes.number.isRequired, PropTypes.string.isRequired])
});

_defineProperty(RadioGroup, "childContextTypes", {
  radioGroup: PropTypes.any
});

export default compose(setDisplayName('RadioGroup'), pure)(RadioGroup);