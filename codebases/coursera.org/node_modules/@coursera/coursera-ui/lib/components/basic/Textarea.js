function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

//
import * as React from 'react';
import PropTypes from 'prop-types';
import { css, StyleSheet, font, fontWeight, fontFamily, color } from "../../styles/theme";
import withHashId from "../hoc/withHashId";
var STYLE = {
  minWidth: 300,
  borderWidth: 1
};
var styles = StyleSheet.create({
  Textarea: {
    'width': '100%',
    'font-family': fontFamily.body,
    'min-width': STYLE.minWidth
  },
  label: {
    'font-size': font.sm,
    'text-transform': 'uppercase',
    'font-weight': fontWeight.normal,
    'margin-right': '0.75rem'
  },
  input: {
    'width': '100%',
    'padding': '0.75rem',
    'font-size': font.md,
    'border': "".concat(STYLE.borderWidth, "px solid ").concat(color.darkGray),
    ':focus': {
      'border-color': color.primary,
      'outline': 'none'
    },
    ':disabled': {
      'background-color': color.disabled
    }
  },
  subLabel: {
    'font-size': font.sm,
    'color': color.secondaryText,
    'marginBottom': '0.5rem'
  },
  error: {
    'font-size': font.sm
  },
  errorText: {
    color: color.danger
  },
  errorOutline: {
    'border-color': color.error
  },
  explanatoryText: {
    'font-size': font.md,
    'color': color.secondaryText
  },
  explanatoryTextSpacingBottom: {
    'margin-bottom': '0.75rem'
  },
  explanatoryTextSpacingTop: {
    'margin-top': '0.75rem'
  }
});

var Textarea = function Textarea(props) {
  var componentId = props.componentId,
      disabled = props.disabled,
      error = props.error,
      explanatoryText = props.explanatoryText,
      explanatoryTextPosition = props.explanatoryTextPosition,
      hideLabel = props.hideLabel,
      htmlAttributes = props.htmlAttributes,
      label = props.label,
      name = props.name,
      _props$nativeHtmlAttr = props.nativeHtmlAttributes,
      nativeHtmlAttributes = _props$nativeHtmlAttr === void 0 ? {} : _props$nativeHtmlAttr,
      onBlur = props.onBlur,
      onChange = props.onChange,
      placeholder = props.placeholder,
      rows = props.rows,
      style = props.style,
      labelStyleOverrides = props.labelStyleOverrides,
      subLabel = props.subLabel,
      value = props.value,
      _refAlt = props._refAlt,
      required = props.required;

  var _labelId = "".concat(componentId, "-label");

  var _inputId = "".concat(componentId, "-input");

  return React.createElement("div", _extends({}, htmlAttributes, css(styles.Textarea), {
    style: style,
    "aria-describedby": _labelId
  }), React.createElement("div", null, React.createElement("label", _extends({}, css(hideLabel && 'sr-only', labelStyleOverrides || styles.label, error && styles.errorText), {
    id: _labelId,
    htmlFor: _inputId
  }), label), !error && subLabel && React.createElement("span", css(styles.subLabel), subLabel), error && React.createElement("span", css(styles.subLabel, styles.errorText), error)), explanatoryText && explanatoryTextPosition === 'before-input' && React.createElement("div", css(styles.explanatoryText, styles.explanatoryTextSpacingBottom), explanatoryText), React.createElement("textarea", _extends({}, css(styles.input, error ? styles.errorOutline : ''), {
    "aria-labelledby": _labelId,
    "aria-invalid": !!error,
    "aria-required": required,
    disabled: disabled,
    id: _inputId,
    name: name,
    onBlur: onBlur,
    onChange: onChange,
    placeholder: placeholder,
    ref: _refAlt,
    rows: rows,
    value: value
  }, nativeHtmlAttributes)), explanatoryText && explanatoryTextPosition === 'after-input' && React.createElement("div", css(styles.explanatoryText, styles.explanatoryTextSpacingTop), explanatoryText));
};

Textarea.defaultProps = {
  label: '',
  placeholder: '',
  error: false,
  rows: 3
};
Textarea.propTypes = {
  componentId: PropTypes.string.isRequired,
  onChange: PropTypes.func.isRequired,
  label: PropTypes.string,
  hideLabel: PropTypes.bool,
  value: PropTypes.string,
  name: PropTypes.string,
  placeholder: PropTypes.string,
  disabled: PropTypes.bool,
  subLabel: PropTypes.string,
  error: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),
  explanatoryText: PropTypes.string,
  explanatoryTextPosition: PropTypes.oneOf(['before-input', 'after-input']),
  onBlur: PropTypes.func,
  style: PropTypes.object,
  htmlAttributes: PropTypes.object,
  rows: PropTypes.number,
  nativeHtmlAttributes: PropTypes.object,
  // eslint-disable-line react/forbid-prop-types

  /**
   * Dom ref for input
   */
  _refAlt: PropTypes.func
};
export default Textarea;
export var TextareaWithHashId = withHashId()(Textarea);