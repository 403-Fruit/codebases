function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import * as React from 'react';
import { css } from "../../../styles/theme";
import { keyCodes } from "../../../constants/keyCodes";
import { compose, setDisplayName, withState, withHandlers } from 'recompose';
import DropDownButton from "./DropDownButton";
import DropDownMenu from "./DropDownMenu";
var CONFIG = {
  defaultClassName: 'ButtonMenu'
};

function ButtonMenu(_ref) {
  var anchorElement = _ref.anchorElement,
      autoFocus = _ref.autoFocus,
      buttonProps = _ref.buttonProps,
      children = _ref.children,
      handleKeyDown = _ref.handleKeyDown,
      handleItemClicked = _ref.handleItemClicked,
      handleButtonClicked = _ref.handleButtonClicked,
      hideDropdown = _ref.hideDropdown,
      isMenuOpen = _ref.isMenuOpen,
      isThemeDark = _ref.isThemeDark,
      menuHtmlAttributes = _ref.menuHtmlAttributes,
      menuStyle = _ref.menuStyle,
      renderButton = _ref.renderButton,
      showDropdown = _ref.showDropdown,
      onClick = _ref.onClick,
      dropdownProps = _objectWithoutProperties(_ref, ["anchorElement", "autoFocus", "buttonProps", "children", "handleKeyDown", "handleItemClicked", "handleButtonClicked", "hideDropdown", "isMenuOpen", "isThemeDark", "menuHtmlAttributes", "menuStyle", "renderButton", "showDropdown", "onClick"]);

  return React.createElement("div", _extends({}, css(menuStyle || CONFIG.defaultClassName), menuHtmlAttributes), React.createElement(DropDownButton, {
    ariaHasPopup: true,
    ariaExpanded: isMenuOpen,
    autoFocus: autoFocus,
    buttonProps: buttonProps,
    onClick: handleButtonClicked,
    onKeyDown: handleKeyDown,
    renderButton: renderButton
  }), React.createElement(DropDownMenu, _extends({
    isOpen: isMenuOpen,
    anchorElement: anchorElement,
    onRequestClose: hideDropdown,
    onClick: handleItemClicked
  }, dropdownProps), children));
}

ButtonMenu.defaultProps = {
  buttonProps: {},
  menuHtmlAttributes: {},
  onKeyDown: function onKeyDown(ev) {}
};
export default compose(setDisplayName('ButtonMenu'), withState('anchorElement', 'setAnchorElement', null), withState('isMenuOpen', 'setIsMenuOpen', false), withHandlers({
  showDropdown: function showDropdown(_ref2) {
    var setAnchorElement = _ref2.setAnchorElement,
        setIsMenuOpen = _ref2.setIsMenuOpen,
        onMenuOpen = _ref2.onMenuOpen;
    return function (event) {
      setAnchorElement(event.currentTarget);
      setIsMenuOpen(true);

      if (onMenuOpen) {
        onMenuOpen();
      }
    };
  },
  hideDropdown: function hideDropdown(_ref3) {
    var setIsMenuOpen = _ref3.setIsMenuOpen,
        onMenuClose = _ref3.onMenuClose;
    return function () {
      setIsMenuOpen(false);

      if (onMenuClose) {
        onMenuClose();
      }
    };
  }
}), withHandlers({
  handleItemClicked: function handleItemClicked(_ref4) {
    var hideDropdown = _ref4.hideDropdown,
        onClick = _ref4.onClick;
    return function (event, listItemValue) {
      hideDropdown();

      if (onClick) {
        onClick(event, listItemValue);
      }
    };
  },
  handleButtonClicked: function handleButtonClicked(_ref5) {
    var isMenuOpen = _ref5.isMenuOpen,
        showDropdown = _ref5.showDropdown,
        hideDropdown = _ref5.hideDropdown;
    return function (event) {
      if (isMenuOpen) {
        hideDropdown(event);
      } else {
        showDropdown(event);
      }
    };
  },
  handleKeyDown: function handleKeyDown(_ref6) {
    var onKeyDown = _ref6.onKeyDown,
        showDropdown = _ref6.showDropdown;
    return function (event) {
      switch (event.keyCode) {
        case keyCodes.enter:
        case keyCodes.space:
        case keyCodes.down:
          event.preventDefault();
          showDropdown(event);
          break;

        default:
          if (onKeyDown) {
            onKeyDown(event);
          }

          break;
      }
    };
  }
}))(ButtonMenu);