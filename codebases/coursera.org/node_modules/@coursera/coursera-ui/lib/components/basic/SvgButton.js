function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import * as React from 'react';
import PropTypes from 'prop-types';
import { StyleSheet, css } from "../../styles/theme";
import Button from "./Button";
var CONFIG = {
  iconMargin: '0.6rem'
};
var styles = StyleSheet.create({
  iconWrapper: {
    display: 'inline-flex',
    justifyContent: 'center',
    alignItems: 'center'
  },
  iconLeft: {
    marginRight: CONFIG.iconMargin
  },
  iconRight: {
    marginLeft: CONFIG.iconMargin
  }
});
/**
 * A Button that handles interaction when having svg icon as children
 */

var SvgButton =
/*#__PURE__*/
function (_React$Component) {
  _inherits(SvgButton, _React$Component);

  function SvgButton() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, SvgButton);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SvgButton)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", {
      hovered: false,
      focused: false
    });

    _defineProperty(_assertThisInitialized(_this), "handleMouseEnter", function (e) {
      _this.setState({
        hovered: true
      });

      _this.callEventIfExists('onMouseEnter', e);
    });

    _defineProperty(_assertThisInitialized(_this), "handleMouseLeave", function (e) {
      _this.setState({
        hovered: false
      });

      _this.callEventIfExists('onMouseLeave', e);
    });

    _defineProperty(_assertThisInitialized(_this), "handleFocus", function (e) {
      _this.setState({
        focused: true
      });

      _this.callEventIfExists('onFocus');
    });

    _defineProperty(_assertThisInitialized(_this), "handleBlur", function (e) {
      _this.setState({
        focused: false
      });

      _this.callEventIfExists('onBlur');
    });

    return _this;
  }

  _createClass(SvgButton, [{
    key: "callEventIfExists",
    value: function callEventIfExists(name, event) {
      var targetFunction = this.props.htmlAttributes[name];

      if (targetFunction) {
        targetFunction(event);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          svgElement = _this$props.svgElement,
          htmlAttributes = _this$props.htmlAttributes,
          children = _this$props.children,
          isChildrenOnRight = _this$props.isChildrenOnRight,
          rest = _objectWithoutProperties(_this$props, ["svgElement", "htmlAttributes", "children", "isChildrenOnRight"]);

      var _this$state = this.state,
          hovered = _this$state.hovered,
          focused = _this$state.focused;
      return React.createElement(Button, _extends({}, rest, {
        isChildrenOnRight: isChildrenOnRight,
        htmlAttributes: _objectSpread({}, htmlAttributes, {
          onMouseEnter: this.handleMouseEnter,
          onMouseLeave: this.handleMouseLeave,
          onFocus: this.handleFocus,
          onBlur: this.handleBlur
        })
      }), isChildrenOnRight && children, svgElement && React.createElement("span", css(styles.iconWrapper, 'cui-iconWrapper', (rest.label || children) && !isChildrenOnRight && styles.iconLeft, (rest.label || children) && isChildrenOnRight && styles.iconRight), svgElement && React.cloneElement(svgElement, {
        hovered: hovered || focused,
        disableMouseEvent: true
      })), !isChildrenOnRight && children);
    }
  }]);

  return SvgButton;
}(React.Component);

_defineProperty(SvgButton, "propTypes", {
  svgElement: PropTypes.node,
  htmlAttributes: PropTypes.object,
  // eslint-disable-line react/forbid-prop-types
  children: PropTypes.node,
  isChildrenOnRight: PropTypes.bool
});

_defineProperty(SvgButton, "defaultProps", {
  htmlAttributes: {}
});

export default SvgButton;