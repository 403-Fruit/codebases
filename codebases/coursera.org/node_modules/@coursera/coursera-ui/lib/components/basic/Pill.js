function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

//
import * as React from 'react';
import PropTypes from 'prop-types';
import { css, StyleSheet, color, spacing, font } from "../../styles/theme";
var PILL_HEIGHTS = {
  sm: '1.125rem',
  md: '1.5rem',
  lg: '1.875rem'
};
export var PILL_TYPE = {
  FILLED: 'filled',
  OUTLINE: 'outline'
};
export var PILL_SIZE = {
  SM: 'sm',
  MD: 'md',
  LG: 'lg'
};
var CONFIG = {
  pillSize: {
    sm: {
      height: PILL_HEIGHTS.sm,
      borderRadius: PILL_HEIGHTS.sm,
      lineHeight: spacing.sm,
      fontSize: font.xxs
    },
    md: {
      height: PILL_HEIGHTS.md,
      borderRadius: PILL_HEIGHTS.md,
      lineHeight: spacing.md,
      fontSize: font.xs
    },
    lg: {
      height: PILL_HEIGHTS.lg,
      borderRadius: PILL_HEIGHTS.lg,
      lineHeight: spacing.lg,
      fontSize: font.sm
    }
  },
  defaultFillColor: color.gray,
  defaultBorderColor: color.borderThemeDark
};
var styles = StyleSheet.create({
  Pill: {
    display: 'flex',
    alignItems: 'center',
    width: 'fit-content',
    padding: "".concat(spacing.xxs, " ").concat(spacing.md),
    border: 'none',
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    color: color.primaryText
  },
  centerContent: {
    display: 'flex',
    alignItems: 'center',
    margin: 'auto',
    overflow: 'hidden'
  },
  ellipsis: {
    overflow: 'hidden',
    textOverflow: 'ellipsis'
  },
  childContainer: {
    marginLeft: spacing.xs
  }
});

function getColorStyles(type, borderColor, fillColor) {
  switch (type) {
    case PILL_TYPE.OUTLINE:
      return {
        border: "1px solid ".concat(borderColor)
      };

    case PILL_TYPE.FILLED:
      return {
        backgroundColor: fillColor
      };
  }
}

export default function Pill(_ref) {
  var size = _ref.size,
      type = _ref.type,
      borderColor = _ref.borderColor,
      fillColor = _ref.fillColor,
      label = _ref.label,
      tag = _ref.tag,
      rootClassName = _ref.rootClassName,
      style = _ref.style,
      labelStyle = _ref.labelStyle,
      htmlAttributes = _ref.htmlAttributes,
      children = _ref.children;
  var Tag = tag;
  var sizeStyles = CONFIG.pillSize[size];
  var colorStyles = getColorStyles(type, borderColor, fillColor);

  var mergedStyles = _objectSpread({}, sizeStyles, colorStyles, style);

  return React.createElement(Tag, _extends({}, htmlAttributes, css(rootClassName, styles.Pill), {
    style: mergedStyles,
    title: label
  }), React.createElement("span", css(styles.centerContent), React.createElement("span", css(styles.ellipsis, labelStyle), label), children && React.createElement("span", css(styles.centerContent, styles.childContainer), children)));
}
Pill.defaultProps = {
  size: PILL_SIZE.MD,
  type: PILL_TYPE.FILLED,
  fillColor: CONFIG.defaultFillColor,
  borderColor: CONFIG.defaultBorderColor,
  tag: 'span'
};