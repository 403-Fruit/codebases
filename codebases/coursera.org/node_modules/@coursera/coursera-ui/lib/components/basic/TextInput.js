function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

//
import * as React from 'react';
import PropTypes from 'prop-types';
import { css, StyleSheet, font, fontWeight, fontFamily, color } from "../../styles/theme";
import withHashId from "../hoc/withHashId";
import { SvgEdit } from "../../svg";
var STYLE = {
  height: 48,
  minWidth: 300,
  borderWidth: 1
};
var styles = StyleSheet.create({
  TextInput: {
    'width': '100%',
    'font-family': fontFamily.body,
    'min-width': STYLE.minWidth
  },
  label: {
    'font-size': font.sm,
    'text-transform': 'uppercase',
    'font-weight': fontWeight.bold,
    'margin-right': '0.75rem'
  },
  inputWrapper: {
    'display': 'flex',
    'align-items': 'center'
  },
  input: {
    'width': '100%',
    'height': STYLE.height,
    'padding': '0.75rem',
    'font-size': font.md,
    'border': "".concat(STYLE.borderWidth, "px solid ").concat(color.darkGray),
    ':focus': {
      'border-color': color.primary,
      'outline': 'none'
    },
    ':disabled': {
      'background-color': color.disabled
    }
  },
  inputWithEditIcon: {
    'width': 'calc(100% - 30px)',
    'margin-right': '4px'
  },
  subLabel: {
    'font-size': font.sm,
    'color': color.secondaryText,
    'marginBottom': '0.5rem'
  },
  error: {
    'font-size': font.sm
  },
  errorText: {
    color: color.danger
  },
  errorOutline: {
    'border-color': color.danger,
    ':focus': {
      'border-color': color.danger
    }
  },
  explanatoryText: {
    'font-size': font.md,
    'color': color.secondaryText
  },
  explanatoryTextSpacingBottom: {
    'margin-bottom': '0.75rem'
  },
  explanatoryTextSpacingTop: {
    'margin-top': '0.75rem'
  }
});

var TextInput =
/*#__PURE__*/
function (_React$Component) {
  _inherits(TextInput, _React$Component);

  function TextInput() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, TextInput);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TextInput)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", {
      showIcon: false
    });

    _defineProperty(_assertThisInitialized(_this), "handleMouseOver", function () {
      var useEditIcon = _this.props.useEditIcon;
      if (useEditIcon) _this.setState({
        showIcon: true
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleMouseOut", function () {
      var useEditIcon = _this.props.useEditIcon;
      if (useEditIcon) _this.setState({
        showIcon: false
      });
    });

    return _this;
  }

  _createClass(TextInput, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          _refAlt = _this$props._refAlt,
          componentId = _this$props.componentId,
          disabled = _this$props.disabled,
          error = _this$props.error,
          explanatoryText = _this$props.explanatoryText,
          explanatoryTextPosition = _this$props.explanatoryTextPosition,
          hideLabel = _this$props.hideLabel,
          htmlAttributes = _this$props.htmlAttributes,
          label = _this$props.label,
          name = _this$props.name,
          _this$props$nativeHtm = _this$props.nativeHtmlAttributes,
          nativeHtmlAttributes = _this$props$nativeHtm === void 0 ? {} : _this$props$nativeHtm,
          onBlur = _this$props.onBlur,
          onFocus = _this$props.onFocus,
          onChange = _this$props.onChange,
          placeholder = _this$props.placeholder,
          style = _this$props.style,
          subLabel = _this$props.subLabel,
          type = _this$props.type,
          value = _this$props.value,
          required = _this$props.required,
          useEditIcon = _this$props.useEditIcon;
      var showIcon = this.state.showIcon;

      var _labelId = "".concat(componentId, "-label");

      var _inputId = "".concat(componentId, "-input");

      return React.createElement("div", _extends({}, htmlAttributes, css(styles.TextInput), {
        style: style,
        "aria-describedby": _labelId
      }), React.createElement("div", null, label && React.createElement("label", _extends({}, css(hideLabel && 'sr-only', styles.label, error && styles.errorText), {
        id: _labelId,
        htmlFor: _inputId
      }), label), !error && subLabel && React.createElement("span", css(styles.subLabel), subLabel), error && React.createElement("span", css(styles.subLabel, styles.errorText), error)), explanatoryText && explanatoryTextPosition === 'before-input' && React.createElement("div", css(styles.explanatoryText, styles.explanatoryTextSpacingBottom), explanatoryText), React.createElement("div", _extends({
        onMouseOverCapture: this.handleMouseOver,
        onMouseOutCapture: this.handleMouseOut
      }, css(styles.inputWrapper)), React.createElement("input", _extends({}, css(styles.input, error ? styles.errorOutline : '', useEditIcon ? styles.inputWithEditIcon : ''), {
        "aria-label": label,
        "aria-labelledby": _labelId,
        "aria-invalid": !!error,
        "aria-required": required,
        disabled: disabled,
        id: _inputId,
        name: name,
        onFocus: onFocus,
        onBlur: onBlur,
        onChange: onChange,
        placeholder: placeholder,
        ref: _refAlt,
        type: type,
        value: value
      }, nativeHtmlAttributes)), useEditIcon && showIcon && React.createElement(SvgEdit, {
        color: color.primary
      })), explanatoryText && explanatoryTextPosition === 'after-input' && React.createElement("div", css(styles.explanatoryText, styles.explanatoryTextSpacingTop), explanatoryText));
    }
  }]);

  return TextInput;
}(React.Component);

_defineProperty(TextInput, "defaultProps", {
  type: 'text',
  label: '',
  placeholder: '',
  error: false,
  useEditIcon: false
});

TextInput.propTypes = {
  componentId: PropTypes.string.isRequired,
  onChange: PropTypes.func,
  type: PropTypes.string,
  label: PropTypes.string.isRequired,
  hideLabel: PropTypes.bool,
  name: PropTypes.string,
  value: PropTypes.string,
  placeholder: PropTypes.string,
  disabled: PropTypes.bool,
  subLabel: PropTypes.string,
  error: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),
  explanatoryText: PropTypes.string,
  explanatoryTextPosition: PropTypes.oneOf(['before-input', 'after-input']),
  onBlur: PropTypes.func,
  style: PropTypes.object,
  // eslint-disable-line react/forbid-prop-types
  htmlAttributes: PropTypes.object,
  // eslint-disable-line react/forbid-prop-types
  nativeHtmlAttributes: PropTypes.object,
  // eslint-disable-line react/forbid-prop-types

  /**
   * Dom ref for input
   */
  _refAlt: PropTypes.func
};
export default TextInput;
export var TextInputWithHashId = withHashId()(TextInput);