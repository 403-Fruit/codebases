function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

//
import * as React from 'react';
import PropTypes from 'prop-types';
import { color } from "../../styles/theme";
import SvgButton from "./SvgButton";
import { SvgLoaderSignal, SvgCheckSolid, SvgCircleWarning } from "../../svg";
import withApiStatusUIInfo from "../hoc/withApiStatusUIInfo";
import { BUTTON_TYPES } from "./Button";
import { API_BEFORE_SEND, apiStatusPropType, errorPropType } from "../../constants/sharedConstants";
var SvgButtonWithApiStatus = withApiStatusUIInfo(SvgButton);
/**
 * A Button that handles ApiStatus changes.
 */

export default function ApiButton(_ref) {
  var apiStatusAlt = _ref.apiStatus,
      _ref$apiStatusAttribu = _ref.apiStatusAttributesConfig,
      apiStatusAttributesConfig = _ref$apiStatusAttribu === void 0 ? {} : _ref$apiStatusAttribu,
      _ref$apiStatusHtmlAtt = _ref.apiStatusHtmlAttributesConfig,
      apiStatusHtmlAttributesConfig = _ref$apiStatusHtmlAtt === void 0 ? {} : _ref$apiStatusHtmlAtt,
      children = _ref.children,
      disableApiStatus = _ref.disableApiStatus,
      _ref$iconAttributes = _ref.iconAttributes,
      iconAttributes = _ref$iconAttributes === void 0 ? {
    size: 18
  } : _ref$iconAttributes,
      isThemeDark = _ref.isThemeDark,
      _ref$style = _ref.style,
      style = _ref$style === void 0 ? {} : _ref$style,
      _ref$type = _ref.type,
      type = _ref$type === void 0 ? 'secondary' : _ref$type,
      rest = _objectWithoutProperties(_ref, ["apiStatus", "apiStatusAttributesConfig", "apiStatusHtmlAttributesConfig", "children", "disableApiStatus", "iconAttributes", "isThemeDark", "style", "type"]);

  var apiStatus = disableApiStatus ? API_BEFORE_SEND : apiStatusAlt;

  var baseIconProps = _objectSpread({}, iconAttributes, {
    isThemeDark: isThemeDark
  });

  var baseApiBtnStyle = _objectSpread({}, style, {
    backgroundColor: 'transparent'
  });

  if (type === 'icon') {
    baseApiBtnStyle.borderColor = 'transparent';
  }

  return React.createElement(SvgButtonWithApiStatus, _extends({
    apiStatus: apiStatus,
    isThemeDark: isThemeDark,
    type: type,
    apiStatusAttributesConfig: _objectSpread({
      style: {
        API_BEFORE_SEND: style,
        API_IN_PROGRESS: _objectSpread({
          color: isThemeDark ? color.disabledThemeDark : color.disabled,
          borderColor: isThemeDark ? color.disabledThemeDark : color.disabled
        }, baseApiBtnStyle),
        API_SUCCESS: _objectSpread({
          color: color.success,
          borderColor: color.success
        }, baseApiBtnStyle),
        API_ERROR: _objectSpread({
          color: color.danger,
          borderColor: color.danger
        }, baseApiBtnStyle)
      },
      svgElement: {
        API_BEFORE_SEND: children,
        API_IN_PROGRESS: React.createElement(SvgLoaderSignal, _extends({
          color: isThemeDark ? color.white : color.white
        }, baseIconProps)),
        API_SUCCESS: React.createElement(SvgCheckSolid, _extends({
          color: color.success
        }, baseIconProps)),
        API_ERROR: React.createElement(SvgCircleWarning, _extends({
          color: color.danger
        }, baseIconProps))
      }
    }, apiStatusAttributesConfig),
    apiStatusHtmlAttributesConfig: _objectSpread({
      disabled: {
        API_BEFORE_SEND: false,
        API_IN_PROGRESS: true,
        API_SUCCESS: true,
        API_ERROR: true
      }
    }, apiStatusHtmlAttributesConfig)
  }, rest));
}
ApiButton.propTypes = {
  children: PropTypes.node,
  apiStatus: apiStatusPropType,
  disableApiStatus: PropTypes.bool,
  isThemeDark: PropTypes.bool,
  type: PropTypes.oneOf(Object.keys(BUTTON_TYPES)),

  /* eslint-disable react/forbid-prop-types */
  apiStatusAttributesConfig: PropTypes.object,
  apiStatusHtmlAttributesConfig: PropTypes.object,
  iconAttributes: PropTypes.object,
  style: PropTypes.object
  /* eslint-disable react/forbid-prop-types */

};
export { apiStatusPropType };
export { errorPropType };