function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

//
import * as React from 'react';
import PropTypes from 'prop-types';
import { color, css, spacing, StyleSheet } from "../../../styles/theme";
import { compose, getContext, setDisplayName } from 'recompose';
export var CARD_SECTION_TYPE = {
  BLOCK: 'block',
  HEADER: 'header',
  FOOTER: 'footer',
  IMAGE: 'image'
};
var CONFIG = {
  border: "1px solid ".concat(color.divider),
  headerFooter: {
    background: color.bgGray,
    backgroundThemeDark: color.bgGrayThemeDark
  },
  paddingHorizontal: spacing.lg,
  paddingVertical: spacing.sm
};
var styles = StyleSheet.create({
  cardBlock: {
    padding: "".concat(CONFIG.paddingVertical, " ").concat(CONFIG.paddingHorizontal)
  },
  cardHeader: {
    backgroundColor: CONFIG.headerFooter.background,
    borderBottom: CONFIG.border,
    padding: "".concat(CONFIG.paddingVertical, " ").concat(CONFIG.paddingHorizontal)
  },
  cardFooter: {
    backgroundColor: CONFIG.headerFooter.background,
    borderTop: CONFIG.border,
    padding: "".concat(CONFIG.paddingVertical, " ").concat(CONFIG.paddingHorizontal)
  },
  cardImage: {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center'
  },
  fullBleed: {
    padding: 0
  }
});
var sectionStyles = {
  block: styles.cardBlock,
  header: styles.cardHeader,
  footer: styles.cardFooter,
  image: styles.cardImage
};

function getDarkThemeStyle(type) {
  var isHeaderFooter = type === CARD_SECTION_TYPE.HEADER || type === CARD_SECTION_TYPE.FOOTER;
  var backgroundStyle = isHeaderFooter ? {
    backgroundColor: CONFIG.headerFooter.backgroundThemeDark
  } : {};
  return StyleSheet.create({
    darkTheme: _objectSpread({
      borderColor: color.dividerThemeDark,
      color: color.primaryTextThemeDark
    }, backgroundStyle)
  });
}

function CardSection(_ref) {
  var children = _ref.children,
      htmlAttributes = _ref.htmlAttributes,
      isFullBleed = _ref.isFullBleed,
      isThemeDark = _ref.isThemeDark,
      rootClassName = _ref.rootClassName,
      style = _ref.style,
      type = _ref.type;
  return React.createElement("div", _extends({
    style: style
  }, css(rootClassName, sectionStyles[type], isFullBleed && styles.fullBleed, isThemeDark && getDarkThemeStyle(type).darkTheme), htmlAttributes), children);
}

CardSection.defaultProps = {
  type: CARD_SECTION_TYPE.BLOCK
};
export default compose(setDisplayName('CardSectionHOC'), getContext({
  isThemeDark: PropTypes.bool
}))(CardSection);