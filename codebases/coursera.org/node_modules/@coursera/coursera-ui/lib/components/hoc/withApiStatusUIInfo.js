function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

//
import * as React from 'react';
import PropTypes from 'prop-types';
import { hoistStatics } from 'recompose';
import _ from 'underscore';
import { API_BEFORE_SEND } from "../../constants/sharedConstants";
/**
 * Extract the attributes from the config object
 */

var extractAttributesByApiStatus = function extractAttributesByApiStatus(_ref) {
  var config = _ref.config,
      apiStatus = _ref.apiStatus;
  // $FlowFixMe
  return _(config).reduce(function (memo, item, key) {
    return _objectSpread({}, memo, _defineProperty({}, key, item[apiStatus]));
  }, {});
};
/**
 * A HOC to customize UI display based on the configs of different apiStatus
 * Ref: bundles/admin-dashboard-programs/components/members/ProgramSingleInvite.jsx
 * It works well with Button, but can also be applied to any kinds of component
 * Separate the config into attributes and htmlAttributes for clarity
 */


export default function withApiStatusUIInfo(Component) {
  var HOC = function HOC(_ref2) {
    var _ref2$apiStatus = _ref2.apiStatus,
        apiStatus = _ref2$apiStatus === void 0 ? API_BEFORE_SEND : _ref2$apiStatus,
        _ref2$apiStatusAttrib = _ref2.apiStatusAttributesConfig,
        apiStatusAttributesConfig = _ref2$apiStatusAttrib === void 0 ? {} : _ref2$apiStatusAttrib,
        _ref2$apiStatusHtmlAt = _ref2.apiStatusHtmlAttributesConfig,
        apiStatusHtmlAttributesConfig = _ref2$apiStatusHtmlAt === void 0 ? {} : _ref2$apiStatusHtmlAt,
        htmlAttributes = _ref2.htmlAttributes,
        rest = _objectWithoutProperties(_ref2, ["apiStatus", "apiStatusAttributesConfig", "apiStatusHtmlAttributesConfig", "htmlAttributes"]);

    // Extract the attributes based on the apiStatus and add to the component props
    var attributesByApiStatus = extractAttributesByApiStatus({
      apiStatus: apiStatus,
      config: apiStatusAttributesConfig
    });
    var htmlAttributesByApiStatus = extractAttributesByApiStatus({
      apiStatus: apiStatus,
      config: apiStatusHtmlAttributesConfig
    });

    var htmlAttributesLocal = _objectSpread({}, htmlAttributes, htmlAttributesByApiStatus);

    var htmlAttributesProp = _(htmlAttributesLocal).isEmpty() ? {} : {
      htmlAttributes: htmlAttributesLocal
    };
    return React.createElement(Component, _extends({}, rest, attributesByApiStatus, htmlAttributesProp));
  };

  HOC.propTypes = {
    apiStatus: PropTypes.string,
    apiStatusAttributesConfig: PropTypes.object,
    apiStatusHtmlAttributesConfig: PropTypes.object,
    htmlAttributes: PropTypes.object
  };
  var componentName = String(Component.displayName || Component.name);
  HOC.displayName = "withApiStatusUIInfo(".concat(componentName, ")"); // $FlowFixMe

  hoistStatics(Component, HOC);
  return HOC;
}