function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

//
import * as React from 'react';
import { css, color } from "../../../../styles/theme";
import Select from "../../../basic/Select";
import SvgButton from "../../../basic/SvgButton";
import { SvgClose, SvgChevronDown, SvgChevronUp } from "../../../../svg";
import { default as Styles, focusedStyle, dropdownSelectStyle, menuContainerStyle, dropdownOption, dropdownOptionFocused } from "./ToolbarTableStyles";

var DropdownFilter =
/*#__PURE__*/
function (_React$Component) {
  _inherits(DropdownFilter, _React$Component);

  function DropdownFilter(_props, context) {
    var _this;

    _classCallCheck(this, DropdownFilter);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(DropdownFilter).call(this, _props, context));

    _defineProperty(_assertThisInitialized(_this), "clearRenderer", function () {
      return _this.iconRenderer(React.createElement(SvgClose, {
        size: 15,
        title: "Clear selection",
        hoverColor: color.danger
      }));
    });

    _defineProperty(_assertThisInitialized(_this), "arrowRenderer", function (_ref) {
      var isOpen = _ref.isOpen;
      var props = {
        size: 15,
        hoverColor: color.primary
      };
      return _this.iconRenderer(isOpen ? React.createElement(SvgChevronUp, props) : React.createElement(SvgChevronDown, props));
    });

    _this.state = {
      focus: false
    };
    return _this;
  }

  _createClass(DropdownFilter, [{
    key: "generatePlaceholder",
    value: function generatePlaceholder() {
      var placeholder = this.props.placeholder; // Account for placeholder translations passed as functions.

      var placeholderText = typeof placeholder === 'function' ? placeholder() : placeholder;
      return React.createElement("div", css(Styles.dropdownPlaceholder), placeholderText || 'Select...');
    }
  }, {
    key: "valueRenderer",
    value: function valueRenderer(_ref2) {
      var label = _ref2.label;
      return React.createElement("div", css(Styles.dropdownValue), label);
    }
  }, {
    key: "optionRenderer",
    value: function optionRenderer(_ref3) {
      var style = _ref3.style,
          focusOption = _ref3.focusOption,
          selectValue = _ref3.selectValue,
          focusedOption = _ref3.focusedOption,
          key = _ref3.key,
          option = _ref3.option;
      return React.createElement("div", {
        onClick: function onClick() {
          return selectValue(option);
        },
        onMouseOver: function onMouseOver() {
          return focusOption(option);
        },
        key: key,
        style: Object.assign({}, _objectSpread({}, style, dropdownOption), option === focusedOption && _objectSpread({}, dropdownOptionFocused))
      }, option.label);
    }
  }, {
    key: "iconRenderer",
    value: function iconRenderer(icon) {
      return React.createElement(SvgButton, {
        htmlAttributes: {
          tabIndex: -1
        },
        size: "sm",
        type: "icon",
        style: {
          padding: 'unset'
        },
        svgElement: icon
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          options = _this$props.options,
          onUpdate = _this$props.onUpdate,
          value = _this$props.value,
          width = _this$props.width;
      var focus = this.state.focus;
      return React.createElement("div", css(Styles.dropdownWrapper), React.createElement(Select, {
        style: _objectSpread({
          width: width || 200
        }, dropdownSelectStyle, focus ? focusedStyle : {}),
        value: value,
        valueRenderer: this.valueRenderer,
        options: options,
        onChange: function onChange(option) {
          return onUpdate(option && option.value);
        },
        clearable: true,
        optionHeight: 46,
        optionRenderer: this.optionRenderer,
        clearRenderer: this.clearRenderer,
        arrowRenderer: this.arrowRenderer,
        placeholder: this.generatePlaceholder(),
        onFocus: function onFocus() {
          return _this2.setState({
            focus: true
          });
        },
        onBlur: function onBlur() {
          return _this2.setState({
            focus: false
          });
        },
        menuContainerStyle: menuContainerStyle
      }));
    }
  }]);

  return DropdownFilter;
}(React.Component);

export default DropdownFilter;