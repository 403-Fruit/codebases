function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

//
import * as React from 'react';
import Checkbox from "../../../basic/Checkbox";
import { css } from "../../../../styles/theme";
import Styles from "./SelectionTableStyles";
export var CHECKBOX_SIZE = 22;
var SelectionUtil = {
  renderCheckbox: function renderCheckbox(selected, disabled, indeterminate, onChange, otherProps) {
    return React.createElement("div", css(Styles.checkboxWrapper), React.createElement(Checkbox, _extends({
      size: CHECKBOX_SIZE,
      checked: selected,
      disabled: disabled,
      indeterminate: indeterminate,
      onChange: onChange
    }, otherProps)));
  },
  renderSelectAllCheckbox: function renderSelectAllCheckbox(rows, onChange, otherProps) {
    // Calculate the select all checkbox state
    var numDisabled = 0;
    var numDisabledSelected = 0;
    var numSelected = 0;
    rows.forEach(function (row) {
      if (row.selected === true) numSelected++;
      if (row.disabled === true) numDisabled++;
      if (row.selected === true && row.disabled === true) numDisabledSelected++;
    }); // Render the checkbox

    var checked = numSelected > 0 && (numSelected > numDisabledSelected || numSelected === rows.length);
    var disabled = numDisabled === rows.length || rows.length === 0;
    var indeterminate = numSelected > 0 && numSelected < rows.length;
    return SelectionUtil.renderCheckbox(checked, disabled, indeterminate, onChange, otherProps);
  },
  getCheckingRows: function getCheckingRows(props) {
    var rows = props.rows,
        groups = props.groups;
    return rows || groups && groups.reduce(function (rows, group) {
      return rows.concat(group.rows);
    }, []) || [];
  },
  triggerSelectionChangeCallback: function triggerSelectionChangeCallback(props, row, selected, index, secondaryIndex) {
    if (!!row.selected !== selected && !row.disabled) {
      var onSelect = props.onSelect,
          onDeselect = props.onDeselect;
      var callback = selected ? onSelect : onDeselect;
      callback && callback(row, index, secondaryIndex);
    }
  },
  handleGroupSelectAllChange: function handleGroupSelectAllChange(props, event, groupIndex) {
    var groups = props.groups;
    var checked = event.target.checked;

    if (groups) {
      groups[groupIndex].rows.forEach(function (row, rowIndex) {
        SelectionUtil.triggerSelectionChangeCallback(props, row, checked, groupIndex, rowIndex);
      });
    }
  },
  renderGroupSelectAllCheckbox: function renderGroupSelectAllCheckbox(props, groupIndex) {
    var groups = props.groups;
    var checkingRows = groups && groups[groupIndex].rows || [];
    return SelectionUtil.renderSelectAllCheckbox(checkingRows, function (event) {
      SelectionUtil.handleGroupSelectAllChange(props, event, groupIndex);
    });
  },
  handleHeaderSelectAllChange: function handleHeaderSelectAllChange(props, event) {
    var rows = props.rows,
        groups = props.groups;
    var checked = event.target.checked;

    if (rows) {
      rows.forEach(function (row, rowIndex) {
        SelectionUtil.triggerSelectionChangeCallback(props, row, checked, rowIndex);
      });
    } else if (groups) {
      groups.forEach(function (group, groupIndex) {
        group.rows.forEach(function (row, rowIndex) {
          SelectionUtil.triggerSelectionChangeCallback(props, row, checked, groupIndex, rowIndex);
        });
      });
    }
  },
  renderHeaderSelectAllCheckbox: function renderHeaderSelectAllCheckbox(props, otherProps) {
    var checkingRows = SelectionUtil.getCheckingRows(props);
    return SelectionUtil.renderSelectAllCheckbox(checkingRows, function (event) {
      SelectionUtil.handleHeaderSelectAllChange(props, event);
    }, otherProps);
  },
  getSelection: function getSelection(props) {
    var rows = props.rows,
        groups = props.groups;

    if (rows) {
      return rows.filter(function (r) {
        return r.selected;
      });
    } else if (groups) {
      return groups.reduce(function (rows, group) {
        return rows.concat(group.rows.filter(function (r) {
          return r.selected;
        }));
      }, []);
    } else {
      throw new Error('Neither rows nor groups is specified');
    }
  }
};
export default SelectionUtil;