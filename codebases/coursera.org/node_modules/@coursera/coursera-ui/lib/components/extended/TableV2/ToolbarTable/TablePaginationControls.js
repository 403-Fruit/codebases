function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

import * as React from 'react';
import Box from "../../../basic/Box";
import PaginationControls from "../../PaginationControls/PaginationControls";
import { color, spacing, font, fontWeight } from "../../../../styles/theme";
var CONFIG = {
  numberButtonStyle: {
    marginLeft: spacing.xxs,
    marginRight: spacing.xxs,
    padding: spacing.xxs,
    height: '24px',
    minHeight: '24px',
    fontSize: font.sm,
    color: color.lightGrayText,
    fontWeight: fontWeight.light
  },
  arrowButtonStyle: {
    marginLeft: spacing.xxs,
    marginRight: spacing.xxs,
    padding: spacing.xxs,
    height: '24px',
    minHeight: '24px',
    backgroundColor: color.white,
    color: color.primaryText,
    border: 'none'
  },
  selectedStyle: {
    fontWeight: fontWeight.bold,
    color: color.primaryText
  },
  buttonListStyle: {
    margin: spacing.xs
  }
};

var TablePaginationControls =
/*#__PURE__*/
function (_React$Component) {
  _inherits(TablePaginationControls, _React$Component);

  function TablePaginationControls() {
    _classCallCheck(this, TablePaginationControls);

    return _possibleConstructorReturn(this, _getPrototypeOf(TablePaginationControls).apply(this, arguments));
  }

  _createClass(TablePaginationControls, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          maxPages = _this$props.maxPages,
          currentPage = _this$props.currentPage,
          onPageChange = _this$props.onPageChange,
          pageCount = _this$props.pageCount;
      return React.createElement(Box, {
        justifyContent: "end"
      }, React.createElement(PaginationControls, _extends({
        maxPages: maxPages,
        currentPage: currentPage,
        onClickHandler: onPageChange,
        pageCount: pageCount
      }, CONFIG)));
    }
  }]);

  return TablePaginationControls;
}(React.Component);

export { TablePaginationControls as default };