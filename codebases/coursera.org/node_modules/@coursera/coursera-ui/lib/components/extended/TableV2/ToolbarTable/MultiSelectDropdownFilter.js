function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

//
import * as React from 'react';
import Divider from "../../../basic/Divider";
import Button from "../../../basic/Button";
import DropDown from "../../../basic/DropDown";
import { color, font } from "../../../../styles/theme";
import Checkbox from "../../../basic/Checkbox";
import { SvgChevronDown } from "../../../../svg";
/**
 * This is a filter that lets you select multiple options
 * You need to provide buttonContentRenderer to render the expected multi-select text and unselected text
 * see example in src/stories/support/TableV2/demos/ToolbarTableMultiSelectDemo.js
 */

var MultiSelectDropdownFilter =
/*#__PURE__*/
function (_React$Component) {
  _inherits(MultiSelectDropdownFilter, _React$Component);

  function MultiSelectDropdownFilter(props, context) {
    var _this;

    _classCallCheck(this, MultiSelectDropdownFilter);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(MultiSelectDropdownFilter).call(this, props, context));

    _defineProperty(_assertThisInitialized(_this), "componentDidUpdate", function (prevProps) {
      var selectedOptionIndices = _this.props.selectedOptionIndices;

      if (selectedOptionIndices && selectedOptionIndices !== prevProps.selectedOptionIndices) {
        _this.setState({
          selectedOptionsMap: _this.setSelectedOptionsMap(selectedOptionIndices)
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleSelectOption", function (index, option) {
      var onUpdate = _this.props.onUpdate;

      _this.setState(function (_ref) {
        var selectedOptionsMap = _ref.selectedOptionsMap;
        var selectedOptionsMapObj = selectedOptionsMap;

        if (selectedOptionsMap[index]) {
          delete selectedOptionsMapObj[index];
          return {
            selectedOptionsMap: selectedOptionsMapObj
          };
        }

        return {
          selectedOptionsMap: _objectSpread({}, selectedOptionsMap, _defineProperty({}, index, option))
        };
      }, function () {
        var selectedOptionsMap = _this.state.selectedOptionsMap;
        var selectedOptions = Object.values(selectedOptionsMap);
        onUpdate(selectedOptions.length === 0 ? undefined : selectedOptions); // make sure the focused index is updated

        _this.onHover(undefined);
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleSelectAll", function () {
      var _this$props = _this.props,
          onUpdate = _this$props.onUpdate,
          options = _this$props.options;

      _this.setState(function (_ref2) {
        var selectedOptionsMap = _ref2.selectedOptionsMap;

        if (Object.keys(selectedOptionsMap).length === options.length) {
          // all selected
          return {
            selectedOptionsMap: {}
          };
        }

        return {
          selectedOptionsMap: options.reduce(function (map, option, index) {
            return _objectSpread({}, map, _defineProperty({}, index, option));
          }, {})
        };
      }, function () {
        var selectedOptionsMap = _this.state.selectedOptionsMap;
        var selectedOptions = Object.values(selectedOptionsMap);
        onUpdate(selectedOptions.length === 0 ? undefined : selectedOptions); // make sure the focused index is updated

        _this.onHover(undefined);
      });
    });

    _defineProperty(_assertThisInitialized(_this), "onHover", function (index) {
      _this.setState({
        focusedIndex: index
      });
    });

    _defineProperty(_assertThisInitialized(_this), "setSelectedOptionsMap", function (selectedOptionIndices) {
      if (!selectedOptionIndices || selectedOptionIndices.length === 0) {
        return {};
      }

      var selectedOptionsMap = {};
      var options = _this.props.options;
      selectedOptionIndices.forEach(function (index) {
        selectedOptionsMap[index] = options[index];
      });
      return selectedOptionsMap;
    });

    _defineProperty(_assertThisInitialized(_this), "optionRenderer", function (_ref3) {
      var option = _ref3.option,
          index = _ref3.index;
      var _this$state = _this.state,
          selectedOptionsMap = _this$state.selectedOptionsMap,
          focusedIndex = _this$state.focusedIndex;
      var options = _this.props.options;
      var isOptionSelected = !!selectedOptionsMap[index] || index === -1 && Object.keys(selectedOptionsMap).length === options.length;
      var additionalProps = {};

      if (focusedIndex === index) {
        additionalProps.checkedColor = color.white;
      } else {
        additionalProps.checkedColor = color.primary;
      }

      return React.createElement("div", null, React.createElement(Checkbox, _extends({
        checked: isOptionSelected,
        uncheckedHoverColor: color.border,
        checkedHoverColor: color.white
      }, additionalProps), option.label));
    });

    _this.state = {
      selectedOptionsMap: _this.setSelectedOptionsMap(props.selectedOptionIndices),
      focusedIndex: undefined
    };
    return _this;
  }

  _createClass(MultiSelectDropdownFilter, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          options = _this$props2.options,
          value = _this$props2.value,
          optionRenderer = _this$props2.optionRenderer,
          buttonContentRenderer = _this$props2.buttonContentRenderer,
          selectAllTitle = _this$props2.selectAllTitle,
          width = _this$props2.width,
          maxHeight = _this$props2.maxHeight;
      var selectedOptionsMap = this.state.selectedOptionsMap;
      return React.createElement("div", null, React.createElement(DropDown.ButtonMenuV2, {
        dropDownPosition: {
          vertical: 'bottom',
          horizontal: 'right'
        },
        maxHeight: maxHeight || 200,
        leaveMenuOpenOnItemClick: true,
        renderButton: function renderButton(_ref4) {
          var getDropDownButtonProps = _ref4.getDropDownButtonProps;
          return React.createElement("div", {
            style: {
              border: '1px solid #E1E1E1',
              marginLeft: 12,
              height: 46
            }
          }, React.createElement(Button, _extends({
            style: {
              width: width || 200,
              minHeight: 46,
              height: 46,
              padding: 12,
              fontSize: font.sm,
              color: Object.keys(selectedOptionsMap).length > 0 ? color.primaryText : color.secondaryText,
              fontWeight: 'inherit'
            },
            size: "zero",
            type: "icon",
            _refAlt: getDropDownButtonProps().ref
          }, _objectSpread({}, getDropDownButtonProps(), {
            ref: undefined
          })), React.createElement("span", {
            style: {
              width: '100%',
              display: 'flex',
              justifyContent: 'space-between'
            }
          }, React.createElement("div", {
            style: {
              overflow: 'hidden',
              whiteSpace: 'nowrap',
              textOverflow: 'ellipsis'
            }
          }, buttonContentRenderer(value)), React.createElement(SvgChevronDown, {
            size: 16,
            style: {
              marginLeft: 6
            }
          }))));
        }
      }, selectAllTitle && React.createElement(DropDown.Item, {
        onClick: function onClick() {
          return _this2.handleSelectAll();
        },
        htmlAttributes: {
          onMouseEnter: function onMouseEnter() {
            return _this2.onHover(-1);
          },
          onMouseLeave: function onMouseLeave() {
            return _this2.onHover(undefined);
          },
          onFocus: function onFocus() {
            return _this2.onHover(-1);
          },
          onBlur: function onBlur() {
            return _this2.onHover(undefined);
          }
        },
        style: {
          padding: '0.75rem 0.75rem'
        }
      }, optionRenderer ? optionRenderer({
        option: {
          label: selectAllTitle
        },
        value: value,
        index: -1
      }) : this.optionRenderer({
        option: {
          label: selectAllTitle
        },
        index: -1,
        value: value
      })), selectAllTitle && React.createElement(Divider, null), options.map(function (option, index) {
        return React.createElement(DropDown.Item, {
          onClick: function onClick() {
            return _this2.handleSelectOption(index, option);
          },
          htmlAttributes: {
            onMouseEnter: function onMouseEnter() {
              return _this2.onHover(index);
            },
            onMouseLeave: function onMouseLeave() {
              return _this2.onHover(undefined);
            },
            onFocus: function onFocus() {
              return _this2.onHover(index);
            },
            onBlur: function onBlur() {
              return _this2.onHover(undefined);
            }
          },
          style: {
            padding: '0.75rem 0.75rem'
          }
        }, optionRenderer ? optionRenderer({
          option: option,
          value: value,
          index: index
        }) : _this2.optionRenderer({
          option: option,
          index: index,
          value: value
        }));
      })));
    }
  }]);

  return MultiSelectDropdownFilter;
}(React.Component);

export default MultiSelectDropdownFilter;