import * as React from 'react';
import Button from "../../basic/Button";
import { color, font, fontWeight, iconSize } from "../../../styles/theme";
import { SvgChevronLeft, SvgChevronRight } from "../../../svg";
var CONFIG = {
  arrowButton: {
    padding: '10px',
    width: '36px',
    height: '36px',
    marginLeft: '2px',
    marginRight: '2px'
  },
  numberButton: {
    marginLeft: '6px',
    marginRight: '6px',
    padding: '10px',
    width: '36px',
    height: '36px',
    fontSize: font.sm,
    color: color.secondaryText
  },
  selected: {
    fontWeight: fontWeight.bold,
    color: color.primaryText
  }
};
var RTL = 'rtl';

var LeftArrow = function LeftArrow(_ref) {
  var onClick = _ref.onClick,
      href = _ref.href,
      style = _ref.style,
      disabled = _ref.disabled,
      dir = _ref.dir;
  var props;

  if (href) {
    var htmlAttributes = disabled ? {
      'aria-label': 'Go to previous page'
    } : {
      'aria-label': 'Go to previous page',
      'data': 'left-arrow',
      href: href
    };
    props = {
      htmlAttributes: htmlAttributes,
      type: 'primary',
      tag: 'a',
      style: style,
      disabled: disabled
    };
  } else {
    var _htmlAttributes = disabled ? {
      'aria-label': 'Go to previous page'
    } : {
      'aria-label': 'Go to previous page',
      'data': 'left-arrow'
    };

    props = {
      htmlAttributes: _htmlAttributes,
      type: 'primary',
      onClick: onClick,
      style: style,
      disabled: disabled
    };
  }

  return React.createElement("li", {
    style: {
      display: 'inline-block'
    }
  }, React.createElement(Button, props, dir === RTL ? React.createElement(SvgChevronRight, {
    color: style.color || color.white,
    size: iconSize.xs
  }) : React.createElement(SvgChevronLeft, {
    color: style.color || color.white,
    size: iconSize.xs
  })));
};

var RightArrow = function RightArrow(_ref2) {
  var onClick = _ref2.onClick,
      href = _ref2.href,
      style = _ref2.style,
      disabled = _ref2.disabled,
      dir = _ref2.dir;
  var props;

  if (href) {
    var htmlAttributes = disabled ? {
      'aria-label': 'Go to next page'
    } : {
      'aria-label': 'Go to next page',
      'data': 'right-arrow',
      href: href
    };
    props = {
      htmlAttributes: htmlAttributes,
      type: 'primary',
      tag: 'a',
      style: style,
      disabled: disabled
    };
  } else {
    var _htmlAttributes2 = disabled ? {
      'aria-label': 'Go to next page'
    } : {
      'aria-label': 'Go to next page',
      'data': 'right-arrow'
    };

    props = {
      htmlAttributes: _htmlAttributes2,
      type: 'primary',
      onClick: onClick,
      style: style,
      disabled: disabled
    };
  }

  return React.createElement("li", {
    style: {
      display: 'inline-block'
    }
  }, React.createElement(Button, props, dir === RTL ? React.createElement(SvgChevronLeft, {
    color: style.color || color.white,
    size: iconSize.xs
  }) : React.createElement(SvgChevronRight, {
    color: style.color || color.white,
    size: iconSize.xs
  })));
};

var NumberBox = function NumberBox(_ref3) {
  var num = _ref3.num,
      onClick = _ref3.onClick,
      href = _ref3.href,
      style = _ref3.style,
      selected = _ref3.selected,
      selectedStyle = _ref3.selectedStyle;

  var onClickHandler = function onClickHandler() {
    if (onClick) {
      onClick(num);
    }
  };

  var newStyle = selected ? Object.assign({}, style, selectedStyle || CONFIG.selected) : style;
  var props;

  if (href) {
    var htmlAttributes = {
      'data': "page-".concat(num),
      'aria-label': "Go to page ".concat(num),
      'aria-current': selected ? 'page' : null,
      href: href
    };
    props = {
      htmlAttributes: htmlAttributes,
      type: 'link',
      tag: 'a',
      style: newStyle
    };
  } else {
    var _htmlAttributes3 = {
      'data': "page-".concat(num),
      'aria-label': "Go to page ".concat(num),
      'aria-current': selected ? 'page' : null
    };
    props = {
      htmlAttributes: _htmlAttributes3,
      type: 'noStyle',
      onClick: onClickHandler,
      style: newStyle
    };
  }

  return React.createElement("li", {
    style: {
      display: 'inline-block'
    }
  }, ' ', React.createElement(Button, props, num), ' ');
};

export default {
  CONFIG: CONFIG,
  LeftArrow: LeftArrow,
  RightArrow: RightArrow,
  NumberBox: NumberBox
};
export { CONFIG };
export { LeftArrow };
export { RightArrow };
export { NumberBox };