function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

//
import * as React from 'react';
import { css, color } from "../../../../styles/theme";
import SvgButton from "../../../basic/SvgButton";
import { SvgClose, SvgSearch } from "../../../../svg";
import { default as Styles } from "./ToolbarTableStyles";

var SearchBar =
/*#__PURE__*/
function (_React$Component) {
  _inherits(SearchBar, _React$Component);

  function SearchBar(props, context) {
    var _this;

    _classCallCheck(this, SearchBar);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SearchBar).call(this, props, context));

    _defineProperty(_assertThisInitialized(_this), "inputElement", void 0);

    _this.state = {
      focus: false
    };
    return _this;
  }

  _createClass(SearchBar, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      var focus = this.state.focus;

      if (focus) {
        this.inputElement.focus(); // Re-focus if already in focus when update
      }
    }
  }, {
    key: "clearInput",
    value: function clearInput() {
      var onUpdate = this.props.onUpdate;
      onUpdate(''); // Clear the input with empty string

      this.inputElement.focus(); // Focus again after clear all
    }
  }, {
    key: "handleInputKeyDown",
    value: function handleInputKeyDown(key) {
      if (key === 'Escape') {
        this.clearInput(); // When escape pressed, clear the input
      }
    }
  }, {
    key: "handleClearAllKeyPress",
    value: function handleClearAllKeyPress(key) {
      if (key === 'Enter' || key === ' ') {
        this.clearInput();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          value = _this$props.value,
          placeholder = _this$props.placeholder,
          onUpdate = _this$props.onUpdate;
      var focus = this.state.focus;
      var primaryText = color.primaryText,
          danger = color.danger;
      var title = 'Clear input';
      var displayValue = value || '';
      var hasValue = displayValue !== ''; // Account for placeholder translations passed as functions.

      var placeholderText = typeof placeholder === 'function' ? placeholder() : placeholder;
      return React.createElement("div", _extends({}, css(Styles.searchBarWrapper, focus && Styles.focused, 'cui-searchBarWrapper'), {
        onClick: function onClick() {
          return _this2.setState({
            focus: true
          });
        }
      }), React.createElement("div", css(Styles.searchBarIconWrapper, Styles.iconWrapper, 'cui-searchBarIconWrapper', 'cui-iconWrapper'), React.createElement(SvgSearch, {
        size: 18
      })), React.createElement("input", _extends({}, css(Styles.searchBarInput, 'cui-searchBarInput'), {
        ref: function ref(_ref) {
          return _this2.inputElement = _ref;
        },
        value: displayValue,
        placeholder: placeholderText,
        onChange: function onChange(event) {
          return onUpdate(event.target.value);
        },
        onFocus: function onFocus() {
          return _this2.setState({
            focus: true
          });
        },
        onBlur: function onBlur() {
          return _this2.setState({
            focus: false
          });
        },
        onKeyDown: function onKeyDown(event) {
          return _this2.handleInputKeyDown(event.key);
        }
      })), React.createElement(SvgButton, {
        size: "sm",
        type: "icon",
        style: {
          display: hasValue ? 'block' : 'none'
        },
        htmlAttributes: {
          tabIndex: 0,
          title: title
        },
        onClick: function onClick() {
          return _this2.clearInput();
        },
        svgElement: React.createElement(SvgClose, {
          size: 15,
          title: title,
          hoverColor: danger
        })
      }));
    }
  }]);

  return SearchBar;
}(React.Component);

export default SearchBar;