function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

//
import * as React from 'react';
import _ from 'underscore';
import { css } from "../../../../styles/theme";
import { default as Styles } from "./TableStyles";
import TableUtil from "./TableUtil";
/**
 * A basic table that can accept `rows` and `columns` rendering a simple table, support automatic sizing and
 * customizable cell renderer. This table provides a more flexible API than the previous table in terms of
 * customizability. Please go to https://building.coursera.org/coursera-ui/?selectedKind=extended.TableV2
 * for more usages and samples.
 * Sample usage:
 *   <Table
 *     columns={[{ accessor: "name", header: "Name" }, { accessor: "age", header: "Age" }]}
 *     rows={[{ name: "John", age: 3 }, { name: "Doe", age: 5 }]}
 *   />
 */

var Table =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Table, _React$Component);

  function Table(_props, context) {
    var _this;

    _classCallCheck(this, Table);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Table).call(this, _props, context));

    _defineProperty(_assertThisInitialized(_this), "_outerWrapper", void 0);

    _defineProperty(_assertThisInitialized(_this), "_hiddenHeader", void 0);

    _defineProperty(_assertThisInitialized(_this), "_hiddenHeaderCells", void 0);

    _defineProperty(_assertThisInitialized(_this), "_tableBody", void 0);

    _defineProperty(_assertThisInitialized(_this), "_tableBodyRows", void 0);

    _defineProperty(_assertThisInitialized(_this), "_expandContentRows", void 0);

    _defineProperty(_assertThisInitialized(_this), "handleResize", function () {
      var height = _this.props.height;

      _this.setState({
        shouldUpdateRowHeights: !!height // Same: If we don't provide height then we don't need virtualized

      });
    });

    _defineProperty(_assertThisInitialized(_this), "forceUpdateRowHeights", function () {
      TableUtil.afterBrowserRendering(function () {
        return _this.setState({
          shouldUpdateRowHeights: true
        });
      });
    });

    _defineProperty(_assertThisInitialized(_this), "forceUpdateColumnWidths", function () {
      TableUtil.afterBrowserRendering(function () {
        return _this.setState({
          shouldUpdateColumnWidths: true
        });
      });
    });

    _defineProperty(_assertThisInitialized(_this), "updateExpandContentRows", function (props) {
      if (props.enableExpandableRows) {
        // expandable content is treated as a separate row
        _this._expandContentRows = props.rows.map(function (row) {
          return {
            rowKey: row.key,
            content: row.expandContent
          };
        }).filter(function (row) {
          return !!row.content;
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "toggleExpandRow", function (row) {
      _this.setState({
        expandedRows: TableUtil.updateExpandedRows(_this.state.expandedRows || {}, row)
      });
    });

    var rows = _props.rows,
        columns = _props.columns,
        _height = _props.height;
    _this._expandContentRows = [];

    _this.updateExpandContentRows(_props);

    var numRows = rows.length + _this._expandContentRows.length;
    _this._tableBodyRows = {}; // map of row keys to row refs for height calculation

    _this._hiddenHeaderCells = new Array(columns.length);
    _this.state = {
      shouldUpdateRowHeights: !!_height,
      shouldUpdateColumnWidths: true,
      rowHeights: new Array(numRows),
      scrollTop: 0,
      totalBodyHeight: 0,
      tableOpacity: 0,
      expandedRows: _props.expandedRows || {} // map of row indexes that are expanded

    };
    return _this;
  }

  _createClass(Table, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      window.addEventListener('resize', this.handleResize);
      this.updateSize();
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      var width = nextProps.width,
          height = nextProps.height;

      if (this.props.width !== width) {
        this.setState({
          shouldUpdateRowHeights: !!height // If we don't provide height then we don't need virtualized

        });
      }

      if (!_.isEqual(nextProps.rows, this.props.rows)) {
        this.updateExpandContentRows(nextProps);
      } // if (!_.isEqual(nextProps.expandedRows, this.props.expandedRows)) {
      // Since Table can be used on its own or composed, we need to rely on props to update state


      this.setState({
        expandedRows: nextProps.expandedRows || {}
      }); // }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.updateSize();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      window.removeEventListener('resize', this.handleResize);
    }
  }, {
    key: "updateSize",
    value: function updateSize() {
      var _this2 = this;

      setTimeout(function () {
        var _this2$state = _this2.state,
            tableOpacity = _this2$state.tableOpacity,
            shouldUpdateRowHeights = _this2$state.shouldUpdateRowHeights,
            shouldUpdateColumnWidths = _this2$state.shouldUpdateColumnWidths;

        if (tableOpacity === 0 || shouldUpdateRowHeights || shouldUpdateColumnWidths) {
          _this2.setState(_objectSpread({
            tableOpacity: 1,
            shouldUpdateRowHeights: false,
            shouldUpdateColumnWidths: false
          }, shouldUpdateRowHeights ? _this2.getHeights() : {}));
        }
      }, 0);
    }
  }, {
    key: "getHeights",
    value: function getHeights() {
      var _this3 = this;

      var _this$props = this.props,
          rows = _this$props.rows,
          height = _this$props.height;
      var _this$state = this.state,
          shouldUpdateRowHeights = _this$state.shouldUpdateRowHeights,
          rowHeights = _this$state.rowHeights;

      if (height && shouldUpdateRowHeights) {
        var totalBodyHeight = 0;
        rows.forEach(function (_, rowIndex) {
          var rowHeight = _this3._tableBodyRows[_.key] ? _this3._tableBodyRows[_.key].clientHeight : 0;
          rowHeights[rowIndex] = rowHeight;
          totalBodyHeight += rowHeight;
        });
        return {
          rowHeights: rowHeights,
          totalBodyHeight: totalBodyHeight
        };
      }
    }
  }, {
    key: "renderCell",
    value: function renderCell(key, props, content) {
      return React.createElement("td", _extends({
        key: key
      }, css(Styles.tableCell), props), content);
    }
  }, {
    key: "renderRowCells",
    value: function renderRowCells(row, rowIndex) {
      var _this4 = this;

      var columns = this.props.columns;
      return columns.reduce(function (cells, col, colIndex) {
        var accessor = col.accessor,
            cellRenderer = col.cellRenderer;
        var key = "".concat(rowIndex, "-").concat(accessor, "-").concat(colIndex); // Rendering cellcontent

        var cell = function (cell) {
          if (cell != null && _typeof(cell) === 'object' && cell.cellContent) {
            // 2. Check if cell is an object and cell has content. If is then treat it as an object cell $FlowFixMe
            return _this4.renderCell(key, {
              colSpan: cell.colSpan,
              rowSpan: cell.rowSpan
            }, cell.cellContent);
          } else {
            // 3. If not then check if there's cellRenderer. And if cell or rendered cell is not undefined, return that
            var cellContent = cellRenderer ? cellRenderer(cell, row, rowIndex, _this4.toggleExpandRow, _this4.state.expandedRows[row.key]) : cell; // $FlowFixMe

            return cellContent !== undefined && _this4.renderCell(key, {}, cellContent);
          }
        }(row[accessor]); // Check if cell is undefined and add that to cells if possible


        return cell ? cells.concat(cell) : cells;
      }, []);
    }
  }, {
    key: "renderRow",
    value: function renderRow(row, rowIndex) {
      var _this5 = this;

      var _this$props2 = this.props,
          rowStyle = _this$props2.rowStyle,
          rowRootClassName = _this$props2.rowRootClassName,
          _onClick = _this$props2.onClick,
          _onDoubleClick = _this$props2.onDoubleClick,
          _onMouseDown = _this$props2.onMouseDown,
          _onMouseEnter = _this$props2.onMouseEnter,
          _onMouseLeave = _this$props2.onMouseLeave,
          _onMouseMove = _this$props2.onMouseMove,
          _onMouseOut = _this$props2.onMouseOut,
          _onMouseOver = _this$props2.onMouseOver,
          _onMouseUp = _this$props2.onMouseUp,
          enableExpandableRows = _this$props2.enableExpandableRows,
          columns = _this$props2.columns;
      var expandedRows = this.state.expandedRows;
      var key = row.key;
      var isExpanded = enableExpandableRows && !!expandedRows[row.key];
      var rows = [React.createElement("tr", _extends({
        key: key !== undefined ? key : rowIndex
      }, rowRootClassName ? _objectSpread({}, css(rowRootClassName(row, rowIndex), Styles.tableRow)) : _objectSpread({}, css(Styles.tableRow)), rowStyle && {
        style: rowStyle(row, rowIndex)
      }, _onClick && {
        onClick: function onClick(e) {
          _onClick(e, row, rowIndex);
        }
      }, _onDoubleClick && {
        onDoubleClick: function onDoubleClick(e) {
          return _onDoubleClick(e, row, rowIndex);
        }
      }, _onMouseDown && {
        onMouseDown: function onMouseDown(e) {
          return _onMouseDown(e, row, rowIndex);
        }
      }, _onMouseEnter && {
        onMouseEnter: function onMouseEnter(e) {
          return _onMouseEnter(e, row, rowIndex);
        }
      }, _onMouseLeave && {
        onMouseLeave: function onMouseLeave(e) {
          return _onMouseLeave(e, row, rowIndex);
        }
      }, _onMouseMove && {
        onMouseMove: function onMouseMove(e) {
          return _onMouseMove(e, row, rowIndex);
        }
      }, _onMouseOut && {
        onMouseOut: function onMouseOut(e) {
          return _onMouseOut(e, row, rowIndex);
        }
      }, _onMouseOver && {
        onMouseOver: function onMouseOver(e) {
          return _onMouseOver(e, row, rowIndex);
        }
      }, _onMouseUp && {
        onMouseUp: function onMouseUp(e) {
          return _onMouseUp(e, row, rowIndex);
        }
      }, {
        ref: function ref(_ref) {
          return _this5._tableBodyRows[row.key] = _ref;
        }
      }), this.renderRowCells(row, rowIndex))];

      if (enableExpandableRows && isExpanded) {
        var expandRow = this._expandContentRows.find(function (expandRow) {
          return expandRow.rowKey === row.key;
        });

        if (expandRow) {
          var content = expandRow.content,
              rowKey = expandRow.rowKey;
          rows.push(React.createElement("tr", _extends({
            colSpan: columns.length,
            className: "expand-content",
            key: "".concat(rowKey, "-expand-row")
          }, css(Styles.expandRow), {
            ref: function ref(_ref2) {
              return _this5._tableBodyRows["".concat(rowKey, "-expand-row")] = _ref2;
            }
          }), React.createElement("td", _extends({
            colSpan: columns.length
          }, css(Styles.expandCell)), content)));
        }
      }

      return rows;
    }
  }, {
    key: "renderBasicTableBody",
    value: function renderBasicTableBody() {
      var _this6 = this;

      var rows = this.props.rows;
      return React.createElement("tbody", {
        ref: function ref(_ref3) {
          return _this6._tableBody = _ref3;
        }
      }, rows.map(function (row, rowIndex) {
        return _this6.renderRow(row, rowIndex);
      }));
    }
  }, {
    key: "renderVirtualizedTableBody",
    value: function renderVirtualizedTableBody() {
      var _this7 = this;

      var rows = this.props.rows;
      var _this$state2 = this.state,
          scrollTop = _this$state2.scrollTop,
          totalBodyHeight = _this$state2.totalBodyHeight,
          rowHeights = _this$state2.rowHeights;
      var viewportHeight = this._outerWrapper.clientHeight;
      var headerHeight = this._hiddenHeader.clientHeight; // Calculate the rows on display

      var rowsOnDisplayInput = {
        rows: rows,
        scrollTop: scrollTop,
        headerHeight: headerHeight,
        totalBodyHeight: totalBodyHeight,
        viewportHeight: viewportHeight,
        rowHeights: rowHeights
      };

      var _TableUtil$calculateR = TableUtil.calculateRowsOnDisplay(rowsOnDisplayInput),
          top = _TableUtil$calculateR.top,
          bottom = _TableUtil$calculateR.bottom,
          startIndex = _TableUtil$calculateR.startIndex,
          endIndex = _TableUtil$calculateR.endIndex; // Generate the displaying indices


      var displayIndices = Array(endIndex - startIndex + 1).fill().map(function (_, index) {
        return startIndex + index;
      }); // Render the virtualized table body

      return React.createElement("tbody", {
        ref: function ref(_ref4) {
          return _this7._tableBody = _ref4;
        }
      }, React.createElement("tr", {
        style: {
          height: top
        }
      }), displayIndices.map(function (rowIndex) {
        return [].concat(_this7.renderRow(rows[rowIndex], rowIndex));
      }), React.createElement("tr", {
        style: {
          height: bottom
        }
      }));
    }
  }, {
    key: "renderTableBody",
    value: function renderTableBody() {
      var shouldUpdateRowHeights = this.state.shouldUpdateRowHeights; // Logic flow:
      // 1. When table first loaded, we will call `renderBasicTableBody`, which will render all rows no matter they are
      //    in the viewport or not.
      // 2. When the rendering is done, we will determine if the table need virtualized, if so then update the state
      //    `shouldUpdateRowHeights` to be `false`, hence triggering another round of rendering
      // 3. Now getting back to this function, since we have already calculated the sizes
      //    (the `rowHeights` and `totalBodyHeight`) in `state`, we are now going to call `renderVirtualizedTableBody`,
      //    which will use the data in the first round to render the virtualized body. In this round we will only render
      //    the rows that are within the viewport

      return shouldUpdateRowHeights ? this.renderBasicTableBody() : this.renderVirtualizedTableBody();
    }
  }, {
    key: "renderTableHeader",
    value: function renderTableHeader(isVisibleHeader) {
      var _this8 = this;

      var _this$props3 = this.props,
          columns = _this$props3.columns,
          enableExpandableRows = _this$props3.enableExpandableRows;
      var shouldUpdateColumnWidths = this.state.shouldUpdateColumnWidths;
      var headerCellWidths = shouldUpdateColumnWidths ? columns.map(function (_) {
        return 0;
      }) : this._hiddenHeaderCells.map(function (cell) {
        return cell.clientWidth;
      });
      return React.createElement("thead", _extends({}, css(Styles.tableHeader), {
        ref: function ref(_ref6) {
          return _this8._hiddenHeader = _ref6;
        },
        style: isVisibleHeader ? {} : {
          borderBottom: 'none'
        }
      }), React.createElement("tr", null, columns.map(function (col, colIndex) {
        return React.createElement("th", _extends({}, css(Styles.tableHeaderCell, Styles.tableCell), {
          key: "header-".concat(col.accessor, "-").concat(colIndex),
          style: {
            width: isVisibleHeader ? headerCellWidths[colIndex] : col.width
          },
          ref: function ref(_ref5) {
            return !isVisibleHeader && (_this8._hiddenHeaderCells[colIndex] = _ref5);
          },
          scope: "col",
          role: "columnheader"
        }, col.htmlProps), typeof col.header === 'function' ? col.header(isVisibleHeader) : col.header);
      })));
    }
  }, {
    key: "render",
    value: function render() {
      var _this9 = this;

      var _this$props4 = this.props,
          height = _this$props4.height,
          width = _this$props4.width;
      var _this$state3 = this.state,
          tableOpacity = _this$state3.tableOpacity,
          totalBodyHeight = _this$state3.totalBodyHeight;
      var header = this._hiddenHeader;
      var wrapper = this._outerWrapper;
      var headerHeight = header ? header.clientHeight : 0;
      var headerWidth = header ? header.clientWidth : 0;
      var wrapperHeight = wrapper ? wrapper.clientHeight : 0;
      var tableHeight = totalBodyHeight + headerHeight - 1;
      var overflow = wrapperHeight < tableHeight ? 'scroll' : 'hidden';
      return React.createElement("div", _extends({}, css(Styles.tableWrapper, 'cui-tableWrapper'), {
        ref: function ref(_ref7) {
          return _this9._outerWrapper = _ref7;
        },
        style: {
          height: height,
          width: width,
          opacity: tableOpacity
        },
        onScroll: function onScroll(e) {
          return _this9.setState({
            scrollTop: e.target.scrollTop
          });
        }
      }), React.createElement("table", _extends({}, css(Styles.fixedTable), {
        style: {
          width: headerWidth
        },
        "aria-hidden": true
      }), this.renderTableHeader(true)), React.createElement("div", _extends({}, css(Styles.tableBodyWrapper, 'cui-tableBodyWrapper'), {
        style: {
          overflowY: overflow,
          height: "calc(100% - ".concat(headerHeight, "px)")
        }
      }), React.createElement("table", _extends({}, css(Styles.table), {
        style: {
          marginTop: -headerHeight
        }
      }), this.renderTableHeader(false), height ? this.renderTableBody() : this.renderBasicTableBody())));
    }
  }]);

  return Table;
}(React.Component);

export default Table;