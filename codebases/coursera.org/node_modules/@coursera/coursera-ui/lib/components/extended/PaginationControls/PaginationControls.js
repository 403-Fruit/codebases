function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

//
// $FlowFixMe
import Uri from 'jsuri';
import * as React from 'react';
import _ from 'underscore';
import { StyleSheet, css, font, breakPoint } from "../../../styles/theme";
import { CONFIG, LeftArrow, RightArrow, NumberBox } from "./PaginationButtons";
var styles = StyleSheet.create({
  Container: {
    marginTop: '6px',
    marginBottom: '6px'
  },
  numberButtons: _defineProperty({}, "@media (max-width: ".concat(breakPoint.sm, "px)"), {
    display: 'none'
  }),
  ellipsis: {
    fontSize: font.sm,
    display: 'inline-block'
  },
  buttonList: {
    padding: '0'
  }
});

var PaginationControls =
/*#__PURE__*/
function (_React$Component) {
  _inherits(PaginationControls, _React$Component);

  function PaginationControls() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, PaginationControls);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PaginationControls)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "onLeftClickHandler", function () {
      var _this$props = _this.props,
          onClickHandler = _this$props.onClickHandler,
          currentPage = _this$props.currentPage;
      var newPageNumber = Math.max(currentPage - 1, 1);

      if (newPageNumber !== currentPage && onClickHandler) {
        onClickHandler(newPageNumber);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onRightClickHandler", function () {
      var _this$props2 = _this.props,
          pageCount = _this$props2.pageCount,
          onClickHandler = _this$props2.onClickHandler,
          currentPage = _this$props2.currentPage;
      var newPageNumber = Math.min(currentPage + 1, pageCount);

      if (newPageNumber !== currentPage && onClickHandler) {
        onClickHandler(newPageNumber);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onNumberClickHandler", function (pageNumber) {
      var _this$props3 = _this.props,
          onClickHandler = _this$props3.onClickHandler,
          currentPage = _this$props3.currentPage;

      if (pageNumber !== currentPage && onClickHandler) {
        onClickHandler(pageNumber);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "getUrlWithReplacedQueryParam", function (url, key, value, addQueryParamToFirstPage) {
      var destinationUrl = new Uri(url);
      var firstPageNumber = 1; // For cases where you don't want to add query params to the first page

      if (!addQueryParamToFirstPage) {
        if (destinationUrl.hasQueryParam(key) && value !== firstPageNumber) {
          return destinationUrl.replaceQueryParam(key, value).toString();
        } else if (value !== firstPageNumber) {
          return destinationUrl.addQueryParam(key, value).toString();
        }

        return destinationUrl.deleteQueryParam(key).toString();
      } else {
        // For cases where you want to add query params to the first page
        if (destinationUrl.hasQueryParam(key)) {
          destinationUrl.replaceQueryParam(key, value);
        } else {
          destinationUrl.addQueryParam(key, value);
        }

        return destinationUrl.toString();
      }
    });

    _defineProperty(_assertThisInitialized(_this), "getNumberBox", function (pageNumber) {
      var _this$props4 = _this.props,
          numberButtonStyle = _this$props4.numberButtonStyle,
          url = _this$props4.url,
          addQueryParamToFirstPage = _this$props4.addQueryParamToFirstPage,
          _this$props4$pageQuer = _this$props4.pageQueryParam,
          pageQueryParam = _this$props4$pageQuer === void 0 ? '' : _this$props4$pageQuer,
          currentPage = _this$props4.currentPage,
          selectedStyle = _this$props4.selectedStyle;
      var selected = pageNumber === currentPage;
      var props;

      if (url) {
        props = {
          key: "numberBox~".concat(pageNumber),
          num: pageNumber,
          style: numberButtonStyle,
          selected: selected,
          selectedStyle: selectedStyle,
          href: _this.getUrlWithReplacedQueryParam(url, pageQueryParam, pageNumber, addQueryParamToFirstPage)
        };
      } else {
        props = {
          key: "numberBox~".concat(pageNumber),
          num: pageNumber,
          style: numberButtonStyle,
          selectedStyle: selectedStyle,
          selected: selected,
          onClick: _this.onNumberClickHandler
        };
      }

      return React.createElement(NumberBox, props);
    });

    return _this;
  }

  _createClass(PaginationControls, [{
    key: "getLeftArrow",
    value: function getLeftArrow(currentPage) {
      var _this$props5 = this.props,
          url = _this$props5.url,
          addQueryParamToFirstPage = _this$props5.addQueryParamToFirstPage,
          _this$props5$pageQuer = _this$props5.pageQueryParam,
          pageQueryParam = _this$props5$pageQuer === void 0 ? '' : _this$props5$pageQuer,
          arrowButtonStyle = _this$props5.arrowButtonStyle,
          disabledArrowButtonStyle = _this$props5.disabledArrowButtonStyle,
          _this$props5$dir = _this$props5.dir,
          dir = _this$props5$dir === void 0 ? '' : _this$props5$dir;
      var disabled = currentPage <= 1;
      var props;

      if (url) {
        props = {
          href: this.getUrlWithReplacedQueryParam(url, pageQueryParam, currentPage - 1, addQueryParamToFirstPage),
          style: disabled && !!disabledArrowButtonStyle ? disabledArrowButtonStyle : arrowButtonStyle,
          disabled: disabled,
          dir: dir
        };
      } else {
        props = {
          onClick: this.onLeftClickHandler,
          style: disabled && !!disabledArrowButtonStyle ? disabledArrowButtonStyle : arrowButtonStyle,
          disabled: disabled,
          dir: dir
        };
      }

      return React.createElement(LeftArrow, props);
    }
  }, {
    key: "getRightArrow",
    value: function getRightArrow(currentPage) {
      var _this$props6 = this.props,
          url = _this$props6.url,
          addQueryParamToFirstPage = _this$props6.addQueryParamToFirstPage,
          _this$props6$pageQuer = _this$props6.pageQueryParam,
          pageQueryParam = _this$props6$pageQuer === void 0 ? '' : _this$props6$pageQuer,
          arrowButtonStyle = _this$props6.arrowButtonStyle,
          disabledArrowButtonStyle = _this$props6.disabledArrowButtonStyle,
          pageCount = _this$props6.pageCount,
          _this$props6$dir = _this$props6.dir,
          dir = _this$props6$dir === void 0 ? '' : _this$props6$dir;
      var disabled = currentPage >= pageCount;
      var props;

      if (url) {
        props = {
          href: this.getUrlWithReplacedQueryParam(url, pageQueryParam, currentPage + 1, addQueryParamToFirstPage),
          style: disabled && !!disabledArrowButtonStyle ? disabledArrowButtonStyle : arrowButtonStyle,
          disabled: disabled,
          dir: dir
        };
      } else {
        props = {
          onClick: this.onRightClickHandler,
          style: disabled && !!disabledArrowButtonStyle ? disabledArrowButtonStyle : arrowButtonStyle,
          disabled: disabled,
          dir: dir
        };
      }

      return React.createElement(RightArrow, props);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props7 = this.props,
          pageCount = _this$props7.pageCount,
          maxPages = _this$props7.maxPages,
          collapseThreshold = _this$props7.collapseThreshold,
          ellipsisStyle = _this$props7.ellipsisStyle,
          buttonListStyle = _this$props7.buttonListStyle,
          style = _this$props7.style,
          currentPage = _this$props7.currentPage;

      if (pageCount === 0) {
        return null;
      }

      var body; // - Format: 1 2 3 4 5

      if (pageCount <= maxPages) {
        body = _.range(1, pageCount + 1).map(function (num) {
          return _this2.getNumberBox(num);
        }); // - Format: 1 2 3 4 ... 10
      } else if (currentPage <= maxPages - collapseThreshold) {
        body = [_.range(1, maxPages).map(function (num) {
          return _this2.getNumberBox(num);
        }), React.createElement("li", _extends({
          key: "ellipsis~1"
        }, css(styles.ellipsis), {
          style: ellipsisStyle
        }), "..."), this.getNumberBox(pageCount)]; // - Format: 1 ... 7 8 9 10
      } else if (currentPage >= pageCount - (maxPages - 1 - collapseThreshold)) {
        body = [this.getNumberBox(1), React.createElement("li", _extends({
          key: "ellipsis~1"
        }, css(styles.ellipsis), {
          style: ellipsisStyle
        }), "..."), _.range(pageCount - maxPages + 2, pageCount + 1).map(function (num) {
          return _this2.getNumberBox(num);
        })]; // - Format: 1 ... 3 4 5 ... 10
      } else {
        var midSize = maxPages - collapseThreshold;
        var start = currentPage - Math.floor(midSize / 2);
        var end = currentPage + Math.ceil(midSize / 2);
        body = [this.getNumberBox(1), React.createElement("li", _extends({
          key: "ellipsis~1"
        }, css(styles.ellipsis), {
          style: ellipsisStyle
        }), "..."), _.range(start, end).map(function (num) {
          return _this2.getNumberBox(num);
        }), React.createElement("span", _extends({
          key: "ellipsis~2"
        }, css(styles.ellipsis), {
          style: ellipsisStyle
        }), "..."), this.getNumberBox(pageCount)];
      }

      return React.createElement("nav", _extends({
        "aria-label": "Pagination Controls"
      }, css(styles.Container), {
        style: style
      }), React.createElement("ul", _extends({}, css(styles.buttonList, 'cui-buttonList'), {
        style: buttonListStyle
      }), this.getLeftArrow(currentPage), body, this.getRightArrow(currentPage)));
    }
  }]);

  return PaginationControls;
}(React.Component);

_defineProperty(PaginationControls, "defaultProps", {
  addQueryParamToFirstPage: true,
  maxPages: 5,
  collapseThreshold: 2,
  currentPage: 1,
  numberButtonStyle: CONFIG.numberButton,
  arrowButtonStyle: CONFIG.arrowButton
});

export default PaginationControls;