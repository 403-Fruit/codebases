function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

//
import * as React from 'react';
import { css, color } from "../../../../styles/theme";
import { SvgSmallChevronUp, SvgSmallChevronDown } from "../../../../svg";
import { NO_SORT, ASCENDING, DESCENDING } from "./SortingDirection";
import { default as Styles, SORT_ARROW_SIZE } from "./SortableTableStyles";

var SortableHeader =
/*#__PURE__*/
function (_React$Component) {
  _inherits(SortableHeader, _React$Component);

  function SortableHeader(props, context) {
    var _this;

    _classCallCheck(this, SortableHeader);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SortableHeader).call(this, props, context));
    _this.state = {
      hovered: false,
      focused: false
    };
    return _this;
  }

  _createClass(SortableHeader, [{
    key: "handleKeyPress",
    value: function handleKeyPress(key) {
      var _this$props = this.props,
          currentColumn = _this$props.currentColumn,
          onChange = _this$props.onChange;

      if (key === 'Enter' || key === ' ') {
        onChange(currentColumn, this.getNextDirection());
      }
    }
  }, {
    key: "getNextDirection",
    value: function getNextDirection() {
      var _this$props2 = this.props,
          sortingColumn = _this$props2.sortingColumn,
          sortingDirection = _this$props2.sortingDirection,
          currentColumn = _this$props2.currentColumn;

      if (currentColumn === sortingColumn) {
        switch (sortingDirection) {
          case NO_SORT:
            return ASCENDING;

          case ASCENDING:
            return DESCENDING;

          default:
            return NO_SORT;
        }
      } else {
        return ASCENDING;
      }
    }
  }, {
    key: "isActivated",
    value: function isActivated() {
      var _this$props3 = this.props,
          sortingColumn = _this$props3.sortingColumn,
          sortingDirection = _this$props3.sortingDirection,
          currentColumn = _this$props3.currentColumn;
      return sortingColumn === currentColumn && sortingDirection !== NO_SORT;
    }
  }, {
    key: "getOpacity",
    value: function getOpacity() {
      var _this$state = this.state,
          focused = _this$state.focused,
          hovered = _this$state.hovered;

      if (this.isActivated()) {
        return 1;
      } else {
        return hovered || focused ? 0.5 : 0;
      }
    }
  }, {
    key: "renderSortArrow",
    value: function renderSortArrow() {
      var _this$props4 = this.props,
          sortingColumn = _this$props4.sortingColumn,
          sortingDirection = _this$props4.sortingDirection,
          currentColumn = _this$props4.currentColumn;
      var isSortingCurrentColumn = sortingColumn === currentColumn;

      if (isSortingCurrentColumn && sortingDirection === DESCENDING) {
        return React.createElement(SvgSmallChevronUp, {
          title: "Sort Descending",
          size: SORT_ARROW_SIZE
        });
      } else {
        var title = isSortingCurrentColumn ? 'Sort Ascending' : 'Default Sort';
        return React.createElement(SvgSmallChevronDown, {
          title: title,
          size: SORT_ARROW_SIZE
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props5 = this.props,
          isVisibleHeader = _this$props5.isVisibleHeader,
          currentColumn = _this$props5.currentColumn,
          header = _this$props5.header,
          onChange = _this$props5.onChange;
      var hovered = this.state.hovered;
      return React.createElement("div", _extends({}, css(Styles.sortableCell), {
        style: {
          color: this.isActivated() && color.primaryText
        },
        role: "button",
        tabIndex: isVisibleHeader ? 0 : -1,
        onClick: function onClick() {
          return onChange(currentColumn, _this2.getNextDirection());
        },
        onFocus: function onFocus() {
          return _this2.setState({
            focused: true
          });
        },
        onBlur: function onBlur() {
          return _this2.setState({
            focused: false
          });
        },
        onKeyPress: function onKeyPress(event) {
          return _this2.handleKeyPress(event.key);
        },
        onMouseEnter: function onMouseEnter() {
          return _this2.setState({
            hovered: true
          });
        },
        onMouseLeave: function onMouseLeave() {
          return _this2.setState({
            hovered: false
          });
        }
      }), React.createElement("span", null, typeof header === 'function' ? header(isVisibleHeader) : header), React.createElement("span", _extends({}, css(Styles.sortArrow), {
        style: {
          opacity: this.getOpacity()
        }
      }), this.renderSortArrow()));
    }
  }]);

  return SortableHeader;
}(React.Component);

export default SortableHeader;