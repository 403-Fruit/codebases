//
import * as React from 'react';
import SearchBar from "./SearchBar";
import DropdownFilter from "./DropdownFilter";
import MultiSelectDropdownFilter from "./MultiSelectDropdownFilter";
import _ from 'underscore';
var ToolbarTableUtil = {
  generateTool: function generateTool(tool) {
    switch (tool.type) {
      case 'search':
        return ToolbarTableUtil.generateSearchTool(tool);

      case 'dropdown':
        return ToolbarTableUtil.generateDropdownTool(tool);

      case 'multi-select-dropdown':
        return ToolbarTableUtil.generateMultiSelectDropdownTool(tool);

      default:
        return tool;
    }
  },
  generateSearchTool: function generateSearchTool(tool) {
    var value = tool.value,
        accessor = tool.accessor,
        placeholder = tool.placeholder,
        caseSensitive = tool.caseSensitive,
        _matches = tool.matches,
        customUpdateHandler = tool.onUpdate;
    return {
      type: 'filter',
      value: value,
      accessor: accessor,
      renderer: function renderer(key, value, onUpdate) {
        var updateHandler = customUpdateHandler ? function (val) {
          onUpdate(val);
          customUpdateHandler(val);
        } : onUpdate; // Account for placeholder translations passed as functions.

        var placeholderText = typeof placeholder === 'function' ? placeholder() : placeholder;
        return React.createElement(SearchBar, {
          key: key,
          value: value,
          onUpdate: updateHandler,
          placeholder: placeholderText
        });
      },
      matches: function matches(filter, actual) {
        if (_matches) {
          return _matches(filter, actual);
        } else if (accessor) {
          // Here since has accessor, actual is the cell value
          return ToolbarTableUtil.searchMatchesCell(caseSensitive, filter, actual);
        } else {
          // Here since no accessor, actual is a row
          return ToolbarTableUtil.rowMatches(filter, actual, function (filter, cell) {
            return ToolbarTableUtil.searchMatchesCell(caseSensitive, filter, cell);
          });
        }
      }
    };
  },
  searchMatchesCell: function searchMatchesCell(caseSensitive, filterValue, cell) {
    if (!filterValue || filterValue.trim() === '') return true;
    if (!cell) return false;
    var searching = filterValue.trim();
    var content = cell.toString();
    return caseSensitive ? content.includes(searching) : content.toLowerCase().includes(searching.toLowerCase());
  },
  generateDropdownTool: function generateDropdownTool(tool) {
    var options = tool.options,
        value = tool.value,
        placeholder = tool.placeholder,
        accessor = tool.accessor,
        _matches2 = tool.matches,
        customUpdateHandler = tool.onUpdate;
    var rowMatches = ToolbarTableUtil.rowMatches,
        dropdownMatchesCell = ToolbarTableUtil.dropdownMatchesCell;
    return {
      type: 'filter',
      value: value,
      accessor: accessor,
      renderer: function renderer(key, value, onUpdate) {
        var updateHandler = customUpdateHandler ? function (val) {
          onUpdate(val);
          customUpdateHandler(val);
        } : onUpdate; // Account for placeholder translations passed as functions.

        var placeholderText = typeof placeholder === 'function' ? placeholder() : placeholder;
        return React.createElement(DropdownFilter, {
          key: key,
          value: value,
          placeholder: placeholderText,
          options: options,
          onUpdate: updateHandler
        });
      },
      matches: function matches(filterValue, actualValue) {
        if (filterValue == undefined) return true;
        if (customUpdateHandler) return true; // dont do filtering here if custom handler is set

        if (_matches2) return _matches2(filterValue, actualValue);
        if (accessor) return dropdownMatchesCell(filterValue, actualValue);
        return rowMatches(filterValue, actualValue, dropdownMatchesCell);
      }
    };
  },
  generateMultiSelectDropdownTool: function generateMultiSelectDropdownTool(tool) {
    var options = tool.options,
        value = tool.value,
        accessor = tool.accessor,
        _matches3 = tool.matches,
        optionRenderer = tool.optionRenderer,
        buttonContentRenderer = tool.buttonContentRenderer,
        selectAllTitle = tool.selectAllTitle,
        width = tool.width,
        maxHeight = tool.maxHeight,
        customUpdateHandler = tool.onUpdate,
        selectedOptionIndices = tool.selectedOptionIndices;
    var rowMatches = ToolbarTableUtil.rowMatches,
        dropdownMatchesCell = ToolbarTableUtil.dropdownMatchesCell;
    return {
      type: 'filter',
      value: value,
      accessor: accessor,
      renderer: function renderer(key, value, onUpdate) {
        var updateHandler = customUpdateHandler ? function (val) {
          onUpdate(val);
          customUpdateHandler(val);
        } : onUpdate;
        return React.createElement(MultiSelectDropdownFilter, {
          key: key,
          value: value,
          options: options,
          onUpdate: updateHandler,
          optionRenderer: optionRenderer,
          selectedOptionIndices: selectedOptionIndices,
          buttonContentRenderer: buttonContentRenderer,
          selectAllTitle: selectAllTitle,
          width: width,
          maxHeight: maxHeight
        });
      },
      matches: function matches(filterValue, actualValue) {
        if (filterValue == undefined) return true;
        if (customUpdateHandler) return true; // dont do filtering here if custom handler is set

        if (_matches3) return _matches3(filterValue, actualValue);
        if (accessor) return dropdownMatchesCell(filterValue, actualValue);
        return rowMatches(filterValue, actualValue, dropdownMatchesCell);
      }
    };
  },
  dropdownMatchesCell: function dropdownMatchesCell(filterValue, cell) {
    return filterValue == cell;
  },
  rowMatches: function rowMatches(filterValue, row, matches) {
    return Object.keys(row).reduce(function (acc, key) {
      return acc || matches(filterValue, row[key]);
    }, false);
  },
  filterRowsWithTool: function filterRowsWithTool(rows, tool) {
    var value = tool.value,
        accessor = tool.accessor,
        matches = tool.matches; // if matches is not set, just return rows as-is

    if (!matches) {
      return rows;
    }

    return rows.filter(function (row) {
      var actual = accessor ? row[accessor] : row;
      return matches(value, actual);
    });
  },
  toolbarHasChanged: function toolbarHasChanged(newToolbar, prevToolbar) {
    if (newToolbar.length !== prevToolbar.length) {
      return true;
    }

    var toolbarHasChanged = false;
    newToolbar.forEach(function (tool, index) {
      if (!_.isEqual(tool.options, prevToolbar[index].options)) {
        toolbarHasChanged = true;
      }

      if (!_.isEqual(tool.selectedOptionIndices, prevToolbar[index].selectedOptionIndices)) {
        toolbarHasChanged = true;
      }
    });
    return toolbarHasChanged;
  }
};
export default ToolbarTableUtil;