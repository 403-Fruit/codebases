"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _apolloLinkRest = require("apollo-link-rest");

var _nodeFetch = _interopRequireWildcard(require("node-fetch"));

var _camelCase = _interopRequireDefault(require("lodash/camelCase"));

var _isSSR = _interopRequireDefault(require("./lib/isSSR"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

// apollo-link-rest requires Headers to be global:
// https://github.com/apollographql/apollo-link-rest/issues/181
// We do have polyfill for browsers, but for ssr and for tests we still need to manually
// add Headers to global scope.
var customFetch;

if ((0, _isSSR.default)()) {
  global.Headers = _nodeFetch.Headers;
  customFetch = _nodeFetch.default;
} // Add camelCase fieldNameNormalizer by default. This is needed for fields like `courses.v1`
// because GraphQL does not allow dots in field names.


var NaptimeRestLink =
/*#__PURE__*/
function (_RestLink) {
  _inherits(NaptimeRestLink, _RestLink);

  function NaptimeRestLink(options) {
    _classCallCheck(this, NaptimeRestLink);

    return _possibleConstructorReturn(this, _getPrototypeOf(NaptimeRestLink).call(this, _objectSpread({}, options, {
      customFetch: customFetch,
      fieldNameNormalizer: options.fieldNameNormalizer || function (key) {
        return (0, _camelCase.default)(key);
      }
    })));
  }

  return NaptimeRestLink;
}(_apolloLinkRest.RestLink);

var _default = NaptimeRestLink;
exports.default = _default;