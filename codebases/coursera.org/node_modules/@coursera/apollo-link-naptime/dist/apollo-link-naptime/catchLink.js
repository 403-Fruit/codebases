"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _apolloLink = require("apollo-link");

var _isSSR = _interopRequireDefault(require("./lib/isSSR"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// React Apollo link that catch errors from previous links in SSR environment.
//
// REST Link fires error if it receives error from API endpoint and if this
// error is unhandled in SSR it breaks server. This link catches errors and
// pass it as an empty result to the next link to avoid this. It also prints
// error to console.error for debugging. In browser environment it does nothing.
var CatchLink = new _apolloLink.ApolloLink(function (operation, forward) {
  return new _apolloLink.Observable(function (observer) {
    var subscription = forward(operation).subscribe({
      next: observer.next.bind(observer),
      complete: observer.complete.bind(observer),
      error: function error(_error) {
        if ((0, _isSSR.default)()) {
          console.error(_error); // eslint-disable-line no-console

          observer.next({
            data: {}
          });
        } else {
          observer.error(_error);
        }
      }
    });
    return function () {
      if (subscription) subscription.unsubscribe();
    };
  });
});
var _default = CatchLink;
exports.default = _default;