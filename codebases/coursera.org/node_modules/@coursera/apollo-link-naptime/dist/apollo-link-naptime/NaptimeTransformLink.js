"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _apolloLink = require("apollo-link");

var _transformNaptimeToRestQuery = _interopRequireDefault(require("./transformNaptimeToRestQuery"));

var _transformRestToNaptimeResponse = _interopRequireDefault(require("./transformRestToNaptimeResponse"));

var _findPatchedNodes = _interopRequireDefault(require("./findPatchedNodes"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function NaptimeTransformLink() {
  return new _apolloLink.ApolloLink(function (operation, forward) {
    var patchedNodes = operation.query.definitions.reduce(function (accumulator, definition) {
      return accumulator.concat((0, _findPatchedNodes.default)(definition));
    }, []);

    if (patchedNodes.length > 0) {
      // Patch query to transform @naptime to @rest and pass it to the next link
      // eslint-disable-next-line no-param-reassign
      operation.query = (0, _transformNaptimeToRestQuery.default)(operation.query); // When we receive result, we transform it to nodes with @naptime directive

      return forward(operation).map((0, _transformRestToNaptimeResponse.default)(patchedNodes));
    } // Skip to next link if no @naptime directive found


    return forward(operation);
  });
}

var _default = NaptimeTransformLink;
exports.default = _default;