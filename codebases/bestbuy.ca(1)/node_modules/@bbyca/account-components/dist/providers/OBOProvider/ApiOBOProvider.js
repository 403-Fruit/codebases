var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as url from "url";
import { StatusCode } from "../../errors";
import ApiBaseProvider from "../BaseProvider/ApiBaseProvider";
export class ApiOBOProvider extends ApiBaseProvider {
    constructor(accountApiUrl, accountApiVersion = null) {
        super(accountApiUrl, accountApiVersion);
        this.accountApiVersion = accountApiVersion;
    }
    impersonateAs(props) {
        const _super = Object.create(null, {
            handleError: { get: () => super.handleError }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const impersonateAsUrl = url.parse(`${this.apiUrl}/oauth/token`);
            const formattedUrl = url.format(impersonateAsUrl);
            const username = encodeURIComponent(props.username);
            const response = yield fetch(formattedUrl, {
                body: `username=${username}`,
                credentials: "include",
                headers: {
                    "Accept": "application/json",
                    "Authorization": `bearer ${props.accessToken}`,
                    "Content-Type": "application/x-www-form-urlencoded",
                },
                method: "post",
            });
            if (response.status !== StatusCode.OK) {
                return _super.handleError.call(this, response.status, formattedUrl);
            }
        });
    }
    stopImpersonating(props) {
        const _super = Object.create(null, {
            handleError: { get: () => super.handleError }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const stopImpersonatingUrl = url.parse(`${this.apiUrl}/oauth/token`);
            const formattedUrl = url.format(stopImpersonatingUrl);
            const response = yield fetch(formattedUrl, {
                credentials: "include",
                headers: {
                    "Accept": "application/json",
                    "Authorization": `bearer ${props.accessToken}`,
                    "Content-Type": "application/x-www-form-urlencoded",
                },
                method: "delete",
            });
            if (response.status !== StatusCode.OK) {
                return _super.handleError.call(this, response.status, formattedUrl);
            }
        });
    }
}
//# sourceMappingURL=ApiOBOProvider.js.map