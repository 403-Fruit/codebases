var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { ApiCsrfTokenProvider, cieUtilities } from "../../";
import { HttpRequestError, StatusCode } from "../../errors";
import ApiBaseProvider from "../BaseProvider/ApiBaseProvider";
export class ApiOrdersProvider extends ApiBaseProvider {
    constructor(hostUri, cieServiceUrl) {
        super(hostUri);
        this.getOrderHistory = (accessToken, locale, page, pageSize, include, query = "") => __awaiter(this, void 0, void 0, function* () {
            const customHeaders = {
                "Accept-Language": locale,
                "Authorization": "Bearer " + accessToken,
            };
            const url = this.getOrderHistoryUrlWithQueryParams(query, page, pageSize, include);
            const headers = yield this.generateHttpHeaders(customHeaders);
            const response = yield fetch(url, {
                credentials: "include",
                headers,
                method: "GET",
            });
            let json;
            try {
                json = yield response.json();
            }
            catch (error) {
                return Promise.reject(new HttpRequestError(url, error.message, error));
            }
            if (response.status !== StatusCode.OK) {
                return this.handleError(response.status, url);
            }
            let orders = [];
            if (json.orders) {
                orders = json.orders.map((orderRes) => {
                    return {
                        createdOnDate: orderRes.datetime,
                        orderNumber: orderRes.orderNumber,
                        products: orderRes.lineItems,
                        status: orderRes.status,
                        totalCost: orderRes.totalPrice,
                    };
                });
            }
            return Object.assign(Object.assign({}, json), { orders });
        });
        this.getOrderHistoryUrlWithQueryParams = (query, page, pageSize, include) => {
            let url = this.apiUrl + "/orders/history";
            const queryParams = {};
            if (query) {
                queryParams.query = query;
            }
            if (page) {
                queryParams.page = page.toString();
            }
            if (pageSize) {
                queryParams.pageSize = pageSize.toString();
            }
            if (include) {
                queryParams.include = include;
            }
            if (queryParams) {
                const queryString = Object.keys(queryParams)
                    .map((k) => encodeURIComponent(k) + "=" + encodeURIComponent(queryParams[k])).join("&");
                url += "?" + queryString;
            }
            return url;
        };
        this.generateHttpHeaders = (customHeaders = {}) => __awaiter(this, void 0, void 0, function* () {
            const headers = Object.assign(Object.assign({}, customHeaders), { Accept: "application/vnd.bestbuy.checkout+json" });
            yield this.addCsrfToken(headers);
            return headers;
        });
        this.addCsrfToken = (headers) => __awaiter(this, void 0, void 0, function* () {
            let csrfToken = cieUtilities.getCsrfToken();
            const csrfTokenProvider = new ApiCsrfTokenProvider(this.cieServiceUrl);
            if (!csrfToken) {
                yield csrfTokenProvider.getCsrfToken();
                csrfToken = cieUtilities.getCsrfToken();
            }
            if (csrfToken) {
                headers["X-TX"] = csrfToken;
            }
        });
        this.cieServiceUrl = cieServiceUrl;
    }
}
export default ApiOrdersProvider;
//# sourceMappingURL=ApiOrdersProvider.js.map