'use strict';

var _classCallCheck = require("/usr/src/app/www/cloud/gatsbyjs.com/node_modules/gatsby/node_modules/@babel/runtime/helpers/classCallCheck");

var _createClass = require("/usr/src/app/www/cloud/gatsbyjs.com/node_modules/gatsby/node_modules/@babel/runtime/helpers/createClass");

var _assertThisInitialized = require("/usr/src/app/www/cloud/gatsbyjs.com/node_modules/gatsby/node_modules/@babel/runtime/helpers/assertThisInitialized");

var _inherits = require("/usr/src/app/www/cloud/gatsbyjs.com/node_modules/gatsby/node_modules/@babel/runtime/helpers/inherits");

var _possibleConstructorReturn = require("/usr/src/app/www/cloud/gatsbyjs.com/node_modules/gatsby/node_modules/@babel/runtime/helpers/possibleConstructorReturn");

var _getPrototypeOf = require("/usr/src/app/www/cloud/gatsbyjs.com/node_modules/gatsby/node_modules/@babel/runtime/helpers/getPrototypeOf");

var _wrapNativeSuper = require("/usr/src/app/www/cloud/gatsbyjs.com/node_modules/gatsby/node_modules/@babel/runtime/helpers/wrapNativeSuper");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var _require = require('colorette'),
    red = _require.red,
    bold = _require.bold,
    gray = _require.gray,
    colorette = _require.options;

var terminalHighlight = require('./terminal-highlight');

var CssSyntaxError = /*#__PURE__*/function (_Error) {
  _inherits(CssSyntaxError, _Error);

  var _super = _createSuper(CssSyntaxError);

  function CssSyntaxError(message, line, column, source, file, plugin) {
    var _this;

    _classCallCheck(this, CssSyntaxError);

    _this = _super.call(this, message);
    _this.name = 'CssSyntaxError';
    _this.reason = message;

    if (file) {
      _this.file = file;
    }

    if (source) {
      _this.source = source;
    }

    if (plugin) {
      _this.plugin = plugin;
    }

    if (typeof line !== 'undefined' && typeof column !== 'undefined') {
      _this.line = line;
      _this.column = column;
    }

    _this.setMessage();

    if (Error.captureStackTrace) {
      Error.captureStackTrace(_assertThisInitialized(_this), CssSyntaxError);
    }

    return _this;
  }

  _createClass(CssSyntaxError, [{
    key: "setMessage",
    value: function setMessage() {
      this.message = this.plugin ? this.plugin + ': ' : '';
      this.message += this.file ? this.file : '<css input>';

      if (typeof this.line !== 'undefined') {
        this.message += ':' + this.line + ':' + this.column;
      }

      this.message += ': ' + this.reason;
    }
  }, {
    key: "showSourceCode",
    value: function showSourceCode(color) {
      var _this2 = this;

      if (!this.source) return '';
      var css = this.source;
      if (color == null) color = colorette.enabled;

      if (terminalHighlight) {
        if (color) css = terminalHighlight(css);
      }

      var lines = css.split(/\r?\n/);
      var start = Math.max(this.line - 3, 0);
      var end = Math.min(this.line + 2, lines.length);
      var maxWidth = String(end).length;
      var mark, aside;

      if (color) {
        mark = function mark(text) {
          return bold(red(text));
        };

        aside = function aside(text) {
          return gray(text);
        };
      } else {
        mark = aside = function aside(str) {
          return str;
        };
      }

      return lines.slice(start, end).map(function (line, index) {
        var number = start + 1 + index;
        var gutter = ' ' + (' ' + number).slice(-maxWidth) + ' | ';

        if (number === _this2.line) {
          var spacing = aside(gutter.replace(/\d/g, ' ')) + line.slice(0, _this2.column - 1).replace(/[^\t]/g, ' ');
          return mark('>') + aside(gutter) + line + '\n ' + spacing + mark('^');
        }

        return ' ' + aside(gutter) + line;
      }).join('\n');
    }
  }, {
    key: "toString",
    value: function toString() {
      var code = this.showSourceCode();

      if (code) {
        code = '\n\n' + code + '\n';
      }

      return this.name + ': ' + this.message + code;
    }
  }]);

  return CssSyntaxError;
}( /*#__PURE__*/_wrapNativeSuper(Error));

module.exports = CssSyntaxError;
CssSyntaxError.default = CssSyntaxError;