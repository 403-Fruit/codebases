'use strict';

var _toConsumableArray = require("/usr/src/app/www/cloud/gatsbyjs.com/node_modules/gatsby/node_modules/@babel/runtime/helpers/toConsumableArray");

var _classCallCheck = require("/usr/src/app/www/cloud/gatsbyjs.com/node_modules/gatsby/node_modules/@babel/runtime/helpers/classCallCheck");

var _createClass = require("/usr/src/app/www/cloud/gatsbyjs.com/node_modules/gatsby/node_modules/@babel/runtime/helpers/createClass");

var _get = require("/usr/src/app/www/cloud/gatsbyjs.com/node_modules/gatsby/node_modules/@babel/runtime/helpers/get");

var _inherits = require("/usr/src/app/www/cloud/gatsbyjs.com/node_modules/gatsby/node_modules/@babel/runtime/helpers/inherits");

var _possibleConstructorReturn = require("/usr/src/app/www/cloud/gatsbyjs.com/node_modules/gatsby/node_modules/@babel/runtime/helpers/possibleConstructorReturn");

var _getPrototypeOf = require("/usr/src/app/www/cloud/gatsbyjs.com/node_modules/gatsby/node_modules/@babel/runtime/helpers/getPrototypeOf");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var Declaration = require('./declaration');

var _require = require('./symbols'),
    isClean = _require.isClean;

var Comment = require('./comment');

var Node = require('./node');

var parse, Rule, AtRule;

function cleanSource(nodes) {
  return nodes.map(function (i) {
    if (i.nodes) i.nodes = cleanSource(i.nodes);
    delete i.source;
    return i;
  });
}

function markDirtyUp(node) {
  node[isClean] = false;

  if (node.proxyOf.nodes) {
    var _iterator = _createForOfIteratorHelper(node.proxyOf.nodes),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var i = _step.value;
        markDirtyUp(i);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }
} // istanbul ignore next


function rebuild(node) {
  if (node.type === 'atrule') {
    Object.setPrototypeOf(node, AtRule.prototype);
  } else if (node.type === 'rule') {
    Object.setPrototypeOf(node, Rule.prototype);
  } else if (node.type === 'decl') {
    Object.setPrototypeOf(node, Declaration.prototype);
  } else if (node.type === 'comment') {
    Object.setPrototypeOf(node, Comment.prototype);
  }

  if (node.nodes) {
    node.nodes.forEach(function (child) {
      rebuild(child);
    });
  }
}

var Container = /*#__PURE__*/function (_Node) {
  _inherits(Container, _Node);

  var _super = _createSuper(Container);

  function Container() {
    _classCallCheck(this, Container);

    return _super.apply(this, arguments);
  }

  _createClass(Container, [{
    key: "push",
    value: function push(child) {
      child.parent = this;
      this.proxyOf.nodes.push(child);
      return this;
    }
  }, {
    key: "each",
    value: function each(callback) {
      if (!this.proxyOf.nodes) return undefined;
      var iterator = this.getIterator();
      var index, result;

      while (this.indexes[iterator] < this.proxyOf.nodes.length) {
        index = this.indexes[iterator];
        result = callback(this.proxyOf.nodes[index], index);
        if (result === false) break;
        this.indexes[iterator] += 1;
      }

      delete this.indexes[iterator];
      return result;
    }
  }, {
    key: "walk",
    value: function walk(callback) {
      return this.each(function (child, i) {
        var result;

        try {
          result = callback(child, i);
        } catch (e) {
          throw child.addToError(e);
        }

        if (result !== false && child.walk) {
          result = child.walk(callback);
        }

        return result;
      });
    }
  }, {
    key: "walkDecls",
    value: function walkDecls(prop, callback) {
      if (!callback) {
        callback = prop;
        return this.walk(function (child, i) {
          if (child.type === 'decl') {
            return callback(child, i);
          }
        });
      }

      if (prop instanceof RegExp) {
        return this.walk(function (child, i) {
          if (child.type === 'decl' && prop.test(child.prop)) {
            return callback(child, i);
          }
        });
      }

      return this.walk(function (child, i) {
        if (child.type === 'decl' && child.prop === prop) {
          return callback(child, i);
        }
      });
    }
  }, {
    key: "walkRules",
    value: function walkRules(selector, callback) {
      if (!callback) {
        callback = selector;
        return this.walk(function (child, i) {
          if (child.type === 'rule') {
            return callback(child, i);
          }
        });
      }

      if (selector instanceof RegExp) {
        return this.walk(function (child, i) {
          if (child.type === 'rule' && selector.test(child.selector)) {
            return callback(child, i);
          }
        });
      }

      return this.walk(function (child, i) {
        if (child.type === 'rule' && child.selector === selector) {
          return callback(child, i);
        }
      });
    }
  }, {
    key: "walkAtRules",
    value: function walkAtRules(name, callback) {
      if (!callback) {
        callback = name;
        return this.walk(function (child, i) {
          if (child.type === 'atrule') {
            return callback(child, i);
          }
        });
      }

      if (name instanceof RegExp) {
        return this.walk(function (child, i) {
          if (child.type === 'atrule' && name.test(child.name)) {
            return callback(child, i);
          }
        });
      }

      return this.walk(function (child, i) {
        if (child.type === 'atrule' && child.name === name) {
          return callback(child, i);
        }
      });
    }
  }, {
    key: "walkComments",
    value: function walkComments(callback) {
      return this.walk(function (child, i) {
        if (child.type === 'comment') {
          return callback(child, i);
        }
      });
    }
  }, {
    key: "append",
    value: function append() {
      for (var _len = arguments.length, children = new Array(_len), _key = 0; _key < _len; _key++) {
        children[_key] = arguments[_key];
      }

      for (var _i = 0, _children = children; _i < _children.length; _i++) {
        var child = _children[_i];
        var nodes = this.normalize(child, this.last);

        var _iterator2 = _createForOfIteratorHelper(nodes),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var node = _step2.value;
            this.proxyOf.nodes.push(node);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }

      this.markDirty();
      return this;
    }
  }, {
    key: "prepend",
    value: function prepend() {
      for (var _len2 = arguments.length, children = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        children[_key2] = arguments[_key2];
      }

      children = children.reverse();

      var _iterator3 = _createForOfIteratorHelper(children),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var child = _step3.value;
          var nodes = this.normalize(child, this.first, 'prepend').reverse();

          var _iterator4 = _createForOfIteratorHelper(nodes),
              _step4;

          try {
            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
              var node = _step4.value;
              this.proxyOf.nodes.unshift(node);
            }
          } catch (err) {
            _iterator4.e(err);
          } finally {
            _iterator4.f();
          }

          for (var id in this.indexes) {
            this.indexes[id] = this.indexes[id] + nodes.length;
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      this.markDirty();
      return this;
    }
  }, {
    key: "cleanRaws",
    value: function cleanRaws(keepBetween) {
      _get(_getPrototypeOf(Container.prototype), "cleanRaws", this).call(this, keepBetween);

      if (this.nodes) {
        var _iterator5 = _createForOfIteratorHelper(this.nodes),
            _step5;

        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var node = _step5.value;
            node.cleanRaws(keepBetween);
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }
      }
    }
  }, {
    key: "insertBefore",
    value: function insertBefore(exist, add) {
      exist = this.index(exist);
      var type = exist === 0 ? 'prepend' : false;
      var nodes = this.normalize(add, this.proxyOf.nodes[exist], type).reverse();

      var _iterator6 = _createForOfIteratorHelper(nodes),
          _step6;

      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var node = _step6.value;
          this.proxyOf.nodes.splice(exist, 0, node);
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }

      var index;

      for (var id in this.indexes) {
        index = this.indexes[id];

        if (exist <= index) {
          this.indexes[id] = index + nodes.length;
        }
      }

      this.markDirty();
      return this;
    }
  }, {
    key: "insertAfter",
    value: function insertAfter(exist, add) {
      exist = this.index(exist);
      var nodes = this.normalize(add, this.proxyOf.nodes[exist]).reverse();

      var _iterator7 = _createForOfIteratorHelper(nodes),
          _step7;

      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var node = _step7.value;
          this.proxyOf.nodes.splice(exist + 1, 0, node);
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }

      var index;

      for (var id in this.indexes) {
        index = this.indexes[id];

        if (exist < index) {
          this.indexes[id] = index + nodes.length;
        }
      }

      this.markDirty();
      return this;
    }
  }, {
    key: "removeChild",
    value: function removeChild(child) {
      child = this.index(child);
      this.proxyOf.nodes[child].parent = undefined;
      this.proxyOf.nodes.splice(child, 1);
      var index;

      for (var id in this.indexes) {
        index = this.indexes[id];

        if (index >= child) {
          this.indexes[id] = index - 1;
        }
      }

      this.markDirty();
      return this;
    }
  }, {
    key: "removeAll",
    value: function removeAll() {
      var _iterator8 = _createForOfIteratorHelper(this.proxyOf.nodes),
          _step8;

      try {
        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
          var node = _step8.value;
          node.parent = undefined;
        }
      } catch (err) {
        _iterator8.e(err);
      } finally {
        _iterator8.f();
      }

      this.proxyOf.nodes = [];
      this.markDirty();
      return this;
    }
  }, {
    key: "replaceValues",
    value: function replaceValues(pattern, opts, callback) {
      if (!callback) {
        callback = opts;
        opts = {};
      }

      this.walkDecls(function (decl) {
        if (opts.props && !opts.props.includes(decl.prop)) return;
        if (opts.fast && !decl.value.includes(opts.fast)) return;
        decl.value = decl.value.replace(pattern, callback);
      });
      this.markDirty();
      return this;
    }
  }, {
    key: "every",
    value: function every(condition) {
      return this.nodes.every(condition);
    }
  }, {
    key: "some",
    value: function some(condition) {
      return this.nodes.some(condition);
    }
  }, {
    key: "index",
    value: function index(child) {
      if (typeof child === 'number') return child;
      if (child.proxyOf) child = child.proxyOf;
      return this.proxyOf.nodes.indexOf(child);
    }
  }, {
    key: "first",
    get: function get() {
      if (!this.proxyOf.nodes) return undefined;
      return this.proxyOf.nodes[0];
    }
  }, {
    key: "last",
    get: function get() {
      if (!this.proxyOf.nodes) return undefined;
      return this.proxyOf.nodes[this.proxyOf.nodes.length - 1];
    }
  }, {
    key: "normalize",
    value: function normalize(nodes, sample) {
      var _this = this;

      if (typeof nodes === 'string') {
        nodes = cleanSource(parse(nodes).nodes);
      } else if (Array.isArray(nodes)) {
        nodes = nodes.slice(0);

        var _iterator9 = _createForOfIteratorHelper(nodes),
            _step9;

        try {
          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
            var i = _step9.value;
            if (i.parent) i.parent.removeChild(i, 'ignore');
          }
        } catch (err) {
          _iterator9.e(err);
        } finally {
          _iterator9.f();
        }
      } else if (nodes.type === 'root') {
        nodes = nodes.nodes.slice(0);

        var _iterator10 = _createForOfIteratorHelper(nodes),
            _step10;

        try {
          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
            var _i2 = _step10.value;
            if (_i2.parent) _i2.parent.removeChild(_i2, 'ignore');
          }
        } catch (err) {
          _iterator10.e(err);
        } finally {
          _iterator10.f();
        }
      } else if (nodes.type) {
        nodes = [nodes];
      } else if (nodes.prop) {
        if (typeof nodes.value === 'undefined') {
          throw new Error('Value field is missed in node creation');
        } else if (typeof nodes.value !== 'string') {
          nodes.value = String(nodes.value);
        }

        nodes = [new Declaration(nodes)];
      } else if (nodes.selector) {
        nodes = [new Rule(nodes)];
      } else if (nodes.name) {
        nodes = [new AtRule(nodes)];
      } else if (nodes.text) {
        nodes = [new Comment(nodes)];
      } else {
        throw new Error('Unknown node type in node creation');
      }

      var processed = nodes.map(function (i) {
        // istanbul ignore next
        if (typeof i.markDirty !== 'function') rebuild(i);
        i = i.proxyOf;
        if (i.parent) i.parent.removeChild(i);
        if (i[isClean]) markDirtyUp(i);

        if (typeof i.raws.before === 'undefined') {
          if (sample && typeof sample.raws.before !== 'undefined') {
            i.raws.before = sample.raws.before.replace(/\S/g, '');
          }
        }

        i.parent = _this;
        return i;
      });
      return processed;
    }
  }, {
    key: "getProxyProcessor",
    value: function getProxyProcessor() {
      return {
        set: function set(node, prop, value) {
          if (node[prop] === value) return true;
          node[prop] = value;

          if (prop === 'name' || prop === 'params' || prop === 'selector') {
            node.markDirty();
          }

          return true;
        },
        get: function get(node, prop) {
          if (prop === 'proxyOf') {
            return node;
          } else if (!node[prop]) {
            return node[prop];
          } else if (prop === 'each' || typeof prop === 'string' && prop.startsWith('walk')) {
            return function () {
              for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                args[_key3] = arguments[_key3];
              }

              return node[prop].apply(node, _toConsumableArray(args.map(function (i) {
                if (typeof i === 'function') {
                  return function (child, index) {
                    return i(child.toProxy(), index);
                  };
                } else {
                  return i;
                }
              })));
            };
          } else if (prop === 'every' || prop === 'some') {
            return function (cb) {
              return node[prop](function (child) {
                for (var _len4 = arguments.length, other = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
                  other[_key4 - 1] = arguments[_key4];
                }

                return cb.apply(void 0, [child.toProxy()].concat(other));
              });
            };
          } else if (prop === 'root') {
            return function () {
              return node.root().toProxy();
            };
          } else if (prop === 'nodes') {
            return node.nodes.map(function (i) {
              return i.toProxy();
            });
          } else if (prop === 'first' || prop === 'last') {
            return node[prop].toProxy();
          } else {
            return node[prop];
          }
        }
      };
    }
  }, {
    key: "getIterator",
    value: function getIterator() {
      if (!this.lastEach) this.lastEach = 0;
      if (!this.indexes) this.indexes = {};
      this.lastEach += 1;
      var iterator = this.lastEach;
      this.indexes[iterator] = 0;
      return iterator;
    }
  }]);

  return Container;
}(Node);

Container.registerParse = function (dependant) {
  parse = dependant;
};

Container.registerRule = function (dependant) {
  Rule = dependant;
};

Container.registerAtRule = function (dependant) {
  AtRule = dependant;
};

module.exports = Container;
Container.default = Container;