'use strict';

var _defineProperty = require("/usr/src/app/www/cloud/gatsbyjs.com/node_modules/gatsby/node_modules/@babel/runtime/helpers/defineProperty");

var _objectWithoutProperties = require("/usr/src/app/www/cloud/gatsbyjs.com/node_modules/gatsby/node_modules/@babel/runtime/helpers/objectWithoutProperties");

var _excluded = ["inputs"],
    _excluded2 = ["inputId"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var Declaration = require('./declaration');

var PreviousMap = require('./previous-map');

var Comment = require('./comment');

var AtRule = require('./at-rule');

var Input = require('./input');

var Root = require('./root');

var Rule = require('./rule');

function fromJSON(json, inputs) {
  if (Array.isArray(json)) return json.map(function (n) {
    return fromJSON(n);
  });

  var ownInputs = json.inputs,
      defaults = _objectWithoutProperties(json, _excluded);

  if (ownInputs) {
    inputs = [];

    var _iterator = _createForOfIteratorHelper(ownInputs),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var input = _step.value;

        var inputHydrated = _objectSpread(_objectSpread({}, input), {}, {
          __proto__: Input.prototype
        });

        if (inputHydrated.map) {
          inputHydrated.map = _objectSpread(_objectSpread({}, inputHydrated.map), {}, {
            __proto__: PreviousMap.prototype
          });
        }

        inputs.push(inputHydrated);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }

  if (defaults.nodes) {
    defaults.nodes = json.nodes.map(function (n) {
      return fromJSON(n, inputs);
    });
  }

  if (defaults.source) {
    var _defaults$source = defaults.source,
        inputId = _defaults$source.inputId,
        source = _objectWithoutProperties(_defaults$source, _excluded2);

    defaults.source = source;

    if (inputId != null) {
      defaults.source.input = inputs[inputId];
    }
  }

  if (defaults.type === 'root') {
    return new Root(defaults);
  } else if (defaults.type === 'decl') {
    return new Declaration(defaults);
  } else if (defaults.type === 'rule') {
    return new Rule(defaults);
  } else if (defaults.type === 'comment') {
    return new Comment(defaults);
  } else if (defaults.type === 'atrule') {
    return new AtRule(defaults);
  } else {
    throw new Error('Unknown node type: ' + json.type);
  }
}

module.exports = fromJSON;
fromJSON.default = fromJSON;