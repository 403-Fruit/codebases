'use strict';

var _classCallCheck = require("/usr/src/app/www/cloud/gatsbyjs.com/node_modules/gatsby/node_modules/@babel/runtime/helpers/classCallCheck");

var _createClass = require("/usr/src/app/www/cloud/gatsbyjs.com/node_modules/gatsby/node_modules/@babel/runtime/helpers/createClass");

var _get = require("/usr/src/app/www/cloud/gatsbyjs.com/node_modules/gatsby/node_modules/@babel/runtime/helpers/get");

var _inherits = require("/usr/src/app/www/cloud/gatsbyjs.com/node_modules/gatsby/node_modules/@babel/runtime/helpers/inherits");

var _possibleConstructorReturn = require("/usr/src/app/www/cloud/gatsbyjs.com/node_modules/gatsby/node_modules/@babel/runtime/helpers/possibleConstructorReturn");

var _getPrototypeOf = require("/usr/src/app/www/cloud/gatsbyjs.com/node_modules/gatsby/node_modules/@babel/runtime/helpers/getPrototypeOf");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var Container = require('./container');

var AtRule = /*#__PURE__*/function (_Container) {
  _inherits(AtRule, _Container);

  var _super = _createSuper(AtRule);

  function AtRule(defaults) {
    var _this;

    _classCallCheck(this, AtRule);

    _this = _super.call(this, defaults);
    _this.type = 'atrule';
    return _this;
  }

  _createClass(AtRule, [{
    key: "append",
    value: function append() {
      var _get2;

      if (!this.proxyOf.nodes) this.nodes = [];

      for (var _len = arguments.length, children = new Array(_len), _key = 0; _key < _len; _key++) {
        children[_key] = arguments[_key];
      }

      return (_get2 = _get(_getPrototypeOf(AtRule.prototype), "append", this)).call.apply(_get2, [this].concat(children));
    }
  }, {
    key: "prepend",
    value: function prepend() {
      var _get3;

      if (!this.proxyOf.nodes) this.nodes = [];

      for (var _len2 = arguments.length, children = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        children[_key2] = arguments[_key2];
      }

      return (_get3 = _get(_getPrototypeOf(AtRule.prototype), "prepend", this)).call.apply(_get3, [this].concat(children));
    }
  }]);

  return AtRule;
}(Container);

module.exports = AtRule;
AtRule.default = AtRule;
Container.registerAtRule(AtRule);