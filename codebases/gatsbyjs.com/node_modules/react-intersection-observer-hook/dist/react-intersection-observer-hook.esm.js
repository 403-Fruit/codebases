import { useRef, useState, useEffect, useCallback } from 'react';
var DEFAULT_ROOT = null;
var DEFAULT_ROOT_MARGIN = '0px';
var DEFAULT_THRESHOLD = [0]; // For more info:
// https://developers.google.com/web/updates/2016/04/intersectionobserver
// https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API

function useIntersectionObserver(_temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      _ref$root = _ref.root,
      root = _ref$root === void 0 ? DEFAULT_ROOT : _ref$root,
      _ref$rootMargin = _ref.rootMargin,
      rootMargin = _ref$rootMargin === void 0 ? DEFAULT_ROOT_MARGIN : _ref$rootMargin,
      _ref$threshold = _ref.threshold,
      threshold = _ref$threshold === void 0 ? DEFAULT_THRESHOLD : _ref$threshold;

  var observerRef = useRef(null);

  var _useState = useState(),
      entry = _useState[0],
      setEntry = _useState[1];

  useEffect(function () {
    return function () {
      var observer = observerRef.current;

      if (observer) {
        observer.disconnect();
      }
    };
  }, []);
  var refCallback = useCallback(function (node) {
    function getObserver() {
      // If there is no observer, then create it.
      // So, we only create it only once.
      if (!observerRef.current) {
        observerRef.current = new IntersectionObserver(function (_ref2) {
          var entry = _ref2[0];
          setEntry(entry);
        }, {
          root: root,
          rootMargin: rootMargin,
          threshold: threshold
        });
      }

      return observerRef.current;
    }

    var observer = getObserver();
    observer.disconnect();

    if (node) {
      observer.observe(node);
    }
  }, [root, rootMargin, threshold]);
  return [refCallback, {
    entry: entry
  }];
}

function useTrackVisibility(props) {
  var _useIntersectionObser = useIntersectionObserver(props),
      ref = _useIntersectionObser[0],
      entry = _useIntersectionObser[1].entry;

  var isVisible = Boolean(entry && entry.isIntersecting);
  return [ref, {
    isVisible: isVisible
  }];
}

export { useIntersectionObserver, useTrackVisibility };